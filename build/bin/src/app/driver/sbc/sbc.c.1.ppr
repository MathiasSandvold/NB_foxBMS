# pragma diag_push
# pragma CHECK_MISRA("-19.7")
# pragma CHECK_MISRA("-19.4")
# pragma CHECK_MISRA("-19.1")
# pragma CHECK_MISRA("-19.15")
# pragma diag_pop
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.6\")")
#pragma diag_push
#pragma CHECK_MISRA("-19.4")
#pragma diag_pop
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"none\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	signed char		__int8_t;
typedef	unsigned char		__uint8_t;
typedef	short			__int16_t;
typedef	unsigned short		__uint16_t;
typedef	int			__int32_t;
typedef	unsigned int		__uint32_t;
typedef	long long		__int64_t;
typedef	unsigned long long	__uint64_t;
typedef	__uint32_t	__clock_t;
typedef	__int32_t	__critical_t;
typedef	double		__double_t;
typedef	float		__float_t;
typedef	__int32_t	__intfptr_t;
typedef	__int64_t	__intmax_t;
typedef	__int32_t	__intptr_t;
typedef	__int32_t	__int_fast8_t;
typedef	__int32_t	__int_fast16_t;
typedef	__int32_t	__int_fast32_t;
typedef	__int64_t	__int_fast64_t;
typedef	__int8_t	__int_least8_t;
typedef	__int16_t	__int_least16_t;
typedef	__int32_t	__int_least32_t;
typedef	__int64_t	__int_least64_t;
typedef	__int32_t	__ptrdiff_t;
typedef	__int32_t	__register_t;
typedef	__int32_t	__segsz_t;
typedef	__uint32_t	__size_t;
typedef	__int32_t	__ssize_t;
typedef __uint32_t      __time_t;
typedef	__uint32_t	__uintfptr_t;
typedef	__uint64_t	__uintmax_t;
typedef	__uint32_t	__uintptr_t;
typedef	__uint32_t	__uint_fast8_t;
typedef	__uint32_t	__uint_fast16_t;
typedef	__uint32_t	__uint_fast32_t;
typedef	__uint64_t	__uint_fast64_t;
typedef	__uint8_t	__uint_least8_t;
typedef	__uint16_t	__uint_least16_t;
typedef	__uint32_t	__uint_least32_t;
typedef	__uint64_t	__uint_least64_t;
typedef	__uint32_t	__u_register_t;
typedef	__uint32_t	__vm_offset_t;
typedef	__uint32_t	__vm_paddr_t;
typedef	__uint32_t	__vm_size_t;
typedef	unsigned short ___wchar_t;
typedef long _off_t;
typedef struct __va_list_t {
    void * __ap;
} __va_list;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	__int32_t	__blksize_t;
typedef	__int64_t	__blkcnt_t;
typedef	__int32_t	__clockid_t;
typedef	__uint32_t	__fflags_t;
typedef	__uint64_t	__fsblkcnt_t;
typedef	__uint64_t	__fsfilcnt_t;
typedef	__uint32_t	__gid_t;
typedef	__int64_t	__id_t;
typedef	__uint64_t	__ino_t;
typedef	long		__key_t;
typedef	__int32_t	__lwpid_t;
typedef	__uint16_t	__mode_t;
typedef	int		__accmode_t;
typedef	int		__nl_item;
typedef	__uint64_t	__nlink_t;
typedef	_off_t	        __off_t;
typedef	__int64_t	__off64_t;
typedef	__int32_t	__pid_t;
typedef	__int64_t	__rlim_t;
typedef	__uint8_t	__sa_family_t;
typedef	__uint32_t	__socklen_t;
typedef	long		__suseconds_t;
typedef	struct __timer	*__timer_t;
typedef	struct __mq	*__mqd_t;
typedef	__uint32_t	__uid_t;
typedef	unsigned int	__useconds_t;
typedef	int		__cpuwhich_t;
typedef	int		__cpulevel_t;
typedef int		__cpusetid_t;
typedef	int		__ct_rune_t;
typedef	__ct_rune_t	__rune_t;
typedef	__ct_rune_t	__wint_t;
typedef	__uint_least16_t __char16_t;
typedef	__uint_least32_t __char32_t;
typedef struct {
	long long __max_align1 __attribute__((aligned(_Alignof(long long))));
	long double __max_align2 __attribute__((aligned(_Alignof(long double))));
} __max_align_t;
typedef	__uint64_t	__dev_t;
typedef	__uint32_t	__fixpt_t;
typedef int _Mbstatet;
typedef _Mbstatet __mbstate_t;
typedef __uintmax_t     __rman_res_t;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-19.13\")")
_Pragma("diag_pop")
typedef	__int8_t		int8_t;
typedef	__int16_t		int16_t;
typedef	__int32_t		int32_t;
typedef	__int64_t		int64_t;
typedef	__uint8_t		uint8_t;
typedef	__uint16_t		uint16_t;
typedef	__uint32_t		uint32_t;
typedef	__uint64_t		uint64_t;
typedef	__intptr_t		intptr_t;
typedef	__uintptr_t		uintptr_t;
typedef	__intmax_t		intmax_t;
typedef	__uintmax_t		uintmax_t;
typedef	__int_least8_t		int_least8_t;
typedef	__int_least16_t		int_least16_t;
typedef	__int_least32_t		int_least32_t;
typedef	__int_least64_t		int_least64_t;
typedef	__uint_least8_t		uint_least8_t;
typedef	__uint_least16_t	uint_least16_t;
typedef	__uint_least32_t	uint_least32_t;
typedef	__uint_least64_t	uint_least64_t;
typedef	__int_fast8_t		int_fast8_t;
typedef	__int_fast16_t		int_fast16_t;
typedef	__int_fast32_t		int_fast32_t;
typedef	__int_fast64_t		int_fast64_t;
typedef	__uint_fast8_t		uint_fast8_t;
typedef	__uint_fast16_t		uint_fast16_t;
typedef	__uint_fast32_t		uint_fast32_t;
typedef	__uint_fast64_t		uint_fast64_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-10.1\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
_Pragma("diag_pop")
typedef enum {
    STD_OK,
    STD_NOT_OK,
} STD_RETURN_TYPE_e;
typedef enum {
    STD_PIN_LOW,
    STD_PIN_HIGH,
    STD_PIN_UNDEFINED,
} STD_PIN_STATE_e;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-20.1\")")
_Pragma("CHECK_MISRA(\"-20.2\")")
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;
typedef long double max_align_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.10\")")
_Pragma("diag_pop")
_Pragma("diag_pop")
typedef void (* TaskFunction_t)( void * );
typedef uint32_t   StackType_t;
typedef long             BaseType_t;
typedef unsigned long    UBaseType_t;
    typedef uint32_t     TickType_t;
#pragma SWI_ALIAS(vPortEnterCritical, 2)
extern void vPortEnterCritical( void );
#pragma SWI_ALIAS(vPortExitCritical, 3)
extern void vPortExitCritical( void );
#pragma SWI_ALIAS(vPortDisableInterrupts, 5)
extern void vPortDisableInterrupts( void );
#pragma SWI_ALIAS(vPortEnableInterrupts, 6)
extern void vPortEnableInterrupts( void );
#pragma SWI_ALIAS( vPortYield, 0 )
extern void vPortYield( void );
#pragma SWI_ALIAS(vPortTaskUsesFPU, 4)
extern void vPortTaskUsesFPU( void );
    unsigned long ulPortCountLeadingZeros( unsigned long ulBitmap );
typedef struct MPU_REGION_REGISTERS
{
    unsigned ulRegionBaseAddress;
    unsigned ulRegionSize;
    unsigned ulRegionAttribute;
} xMPU_REGION_REGISTERS;
typedef struct MPU_SETTINGS
{
    xMPU_REGION_REGISTERS xRegion[ ( ( ( ( ( 16UL ) - 2 ) - ( 13UL - 1UL ) ) + 1 ) + 1 ) ];
} xMPU_SETTINGS;
        StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                             TaskFunction_t pxCode,
                                             void * pvParameters,
                                             BaseType_t xRunPrivileged ) ;
typedef struct HeapRegion
{
    uint8_t * pucStartAddress;
    size_t xSizeInBytes;
} HeapRegion_t;
typedef struct xHeapStats
{
    size_t xAvailableHeapSpaceInBytes;
    size_t xSizeOfLargestFreeBlockInBytes;
    size_t xSizeOfSmallestFreeBlockInBytes;
    size_t xNumberOfFreeBlocks;
    size_t xMinimumEverFreeBytesRemaining;
    size_t xNumberOfSuccessfulAllocations;
    size_t xNumberOfSuccessfulFrees;
} HeapStats_t;
void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) ;
void vPortGetHeapStats( HeapStats_t * pxHeapStats );
void * pvPortMalloc( size_t xSize ) ;
void vPortFree( void * pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;
size_t xPortGetMinimumEverFreeHeapSize( void ) ;
BaseType_t xPortStartScheduler( void ) ;
void vPortEndScheduler( void ) ;
    struct xMEMORY_REGION;
    void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                    const struct xMEMORY_REGION * const xRegions,
                                    StackType_t * pxBottomOfStack,
                                    uint32_t ulStackDepth ) ;
struct xSTATIC_LIST_ITEM
{
    TickType_t xDummy2;
    void * pvDummy3[ 4 ];
};
typedef struct xSTATIC_LIST_ITEM StaticListItem_t;
struct xSTATIC_MINI_LIST_ITEM
{
    TickType_t xDummy2;
    void * pvDummy3[ 2 ];
};
typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;
typedef struct xSTATIC_LIST
{
    UBaseType_t uxDummy2;
    void * pvDummy3;
    StaticMiniListItem_t xDummy4;
} StaticList_t;
typedef struct xSTATIC_TCB
{
    void * pxDummy1;
        xMPU_SETTINGS xDummy2;
    StaticListItem_t xDummy3[ 2 ];
    UBaseType_t uxDummy5;
    void * pxDummy6;
    uint8_t ucDummy7[ ( 40 ) ];
        void * pxDummy8;
        void * pvDummy15[ ( 1 ) ];
        uint32_t ulDummy18[ ( 3 ) ];
        uint8_t ucDummy19[ ( 3 ) ];
        uint8_t ucDummy21;
} StaticTask_t;
typedef struct xSTATIC_QUEUE
{
    void * pvDummy1[ 3 ];
    union
    {
        void * pvDummy2;
        UBaseType_t uxDummy2;
    } u;
    StaticList_t xDummy3[ 2 ];
    UBaseType_t uxDummy4[ 3 ];
    uint8_t ucDummy5[ 2 ];
} StaticQueue_t;
typedef StaticQueue_t StaticSemaphore_t;
typedef struct xSTATIC_EVENT_GROUP
{
    TickType_t xDummy1;
    StaticList_t xDummy2;
} StaticEventGroup_t;
typedef struct xSTATIC_TIMER
{
    void * pvDummy1;
    StaticListItem_t xDummy2;
    TickType_t xDummy3;
    void * pvDummy5;
    TaskFunction_t pvDummy6;
    uint8_t ucDummy8;
} StaticTimer_t;
typedef struct xSTATIC_STREAM_BUFFER
{
    size_t uxDummy1[ 4 ];
    void * pvDummy2[ 3 ];
    uint8_t ucDummy3;
} StaticStreamBuffer_t;
typedef StaticStreamBuffer_t StaticMessageBuffer_t;
struct xLIST;
struct xLIST_ITEM
{
     TickType_t xItemValue;
    struct xLIST_ITEM *  pxNext;
    struct xLIST_ITEM *  pxPrevious;
    void * pvOwner;
    struct xLIST *  pvContainer;
};
typedef struct xLIST_ITEM ListItem_t;
struct xMINI_LIST_ITEM
{
     TickType_t xItemValue;
    struct xLIST_ITEM *  pxNext;
    struct xLIST_ITEM *  pxPrevious;
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;
typedef struct xLIST
{
    volatile UBaseType_t uxNumberOfItems;
    ListItem_t *  pxIndex;
    MiniListItem_t xListEnd;
} List_t;
void vListInitialise( List_t * const pxList ) ;
void vListInitialiseItem( ListItem_t * const pxItem ) ;
void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem ) ;
void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem ) ;
UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) ;
struct tskTaskControlBlock;
typedef struct tskTaskControlBlock * TaskHandle_t;
typedef BaseType_t (* TaskHookFunction_t)( void * );
typedef enum
{
    eRunning = 0,
    eReady,
    eBlocked,
    eSuspended,
    eDeleted,
    eInvalid
} eTaskState;
typedef enum
{
    eNoAction = 0,
    eSetBits,
    eIncrement,
    eSetValueWithOverwrite,
    eSetValueWithoutOverwrite
} eNotifyAction;
typedef struct xTIME_OUT
{
    BaseType_t xOverflowCount;
    TickType_t xTimeOnEntering;
} TimeOut_t;
typedef struct xMEMORY_REGION
{
    void * pvBaseAddress;
    uint32_t ulLengthInBytes;
    uint32_t ulParameters;
} MemoryRegion_t;
typedef struct xTASK_PARAMETERS
{
    TaskFunction_t pvTaskCode;
    const char * pcName;
    uint16_t usStackDepth;
    void * pvParameters;
    UBaseType_t uxPriority;
    StackType_t * puxStackBuffer;
    MemoryRegion_t xRegions[ ( ( ( ( 16UL ) - 2 ) - ( 13UL - 1UL ) ) + 1 ) ];
        StaticTask_t * const pxTaskBuffer;
} TaskParameters_t;
typedef struct xTASK_STATUS
{
    TaskHandle_t xHandle;
    const char * pcTaskName;
    UBaseType_t xTaskNumber;
    eTaskState eCurrentState;
    UBaseType_t uxCurrentPriority;
    UBaseType_t uxBasePriority;
    uint32_t ulRunTimeCounter;
    StackType_t * pxStackBase;
    uint16_t usStackHighWaterMark;
} TaskStatus_t;
typedef enum
{
    eAbortSleep = 0,
    eStandardSleep,
    eNoTasksWaitingTimeout
} eSleepModeStatus;
    TaskHandle_t MPU_xTaskCreateStatic( TaskFunction_t pxTaskCode,
                                    const char * const pcName,
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer ) ;
    BaseType_t MPU_xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
                                      TaskHandle_t * pxCreatedTask ) ;
    BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
                                            TaskHandle_t * pxCreatedTask ) ;
void MPU_vTaskAllocateMPURegions( TaskHandle_t xTask,
                              const MemoryRegion_t * const pxRegions ) ;
void MPU_vTaskDelete( TaskHandle_t xTaskToDelete ) ;
void MPU_vTaskDelay( const TickType_t xTicksToDelay ) ;
BaseType_t MPU_xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                            const TickType_t xTimeIncrement ) ;
BaseType_t MPU_xTaskAbortDelay( TaskHandle_t xTask ) ;
UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t xTask ) ;
UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask ) ;
eTaskState MPU_eTaskGetState( TaskHandle_t xTask ) ;
void MPU_vTaskGetInfo( TaskHandle_t xTask,
                   TaskStatus_t * pxTaskStatus,
                   BaseType_t xGetFreeStackSpace,
                   eTaskState eState ) ;
void MPU_vTaskPrioritySet( TaskHandle_t xTask,
                       UBaseType_t uxNewPriority ) ;
void MPU_vTaskSuspend( TaskHandle_t xTaskToSuspend ) ;
void MPU_vTaskResume( TaskHandle_t xTaskToResume ) ;
BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) ;
void vTaskStartScheduler( void ) ;
void vTaskEndScheduler( void ) ;
void MPU_vTaskSuspendAll( void ) ;
BaseType_t MPU_xTaskResumeAll( void ) ;
TickType_t MPU_xTaskGetTickCount( void ) ;
TickType_t xTaskGetTickCountFromISR( void ) ;
UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) ;
char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) ;
TaskHandle_t MPU_xTaskGetHandle( const char * pcNameToQuery ) ;
UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) ;
uint16_t MPU_uxTaskGetStackHighWaterMark2( TaskHandle_t xTask ) ;
    void MPU_vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
                                            BaseType_t xIndex,
                                            void * pvValue ) ;
    void * MPU_pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
                                               BaseType_t xIndex ) ;
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        uint32_t * pulIdleTaskStackSize );
BaseType_t MPU_xTaskCallApplicationTaskHook( TaskHandle_t xTask,
                                         void * pvParameter ) ;
TaskHandle_t MPU_xTaskGetIdleTaskHandle( void ) ;
UBaseType_t MPU_uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                  const UBaseType_t uxArraySize,
                                  uint32_t * const pulTotalRunTime ) ;
void MPU_vTaskList( char * pcWriteBuffer ) ;
void MPU_vTaskGetRunTimeStats( char * pcWriteBuffer ) ;
uint32_t MPU_ulTaskGetIdleRunTimeCounter( void ) ;
uint32_t MPU_ulTaskGetIdleRunTimePercent( void ) ;
BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                               UBaseType_t uxIndexToNotify,
                               uint32_t ulValue,
                               eNotifyAction eAction,
                               uint32_t * pulPreviousNotificationValue ) ;
BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
                                      UBaseType_t uxIndexToNotify,
                                      uint32_t ulValue,
                                      eNotifyAction eAction,
                                      uint32_t * pulPreviousNotificationValue,
                                      BaseType_t * pxHigherPriorityTaskWoken ) ;
BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                   uint32_t ulBitsToClearOnEntry,
                                   uint32_t ulBitsToClearOnExit,
                                   uint32_t * pulNotificationValue,
                                   TickType_t xTicksToWait ) ;
void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                    UBaseType_t uxIndexToNotify,
                                    BaseType_t * pxHigherPriorityTaskWoken ) ;
uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                  BaseType_t xClearCountOnExit,
                                  TickType_t xTicksToWait ) ;
BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                         UBaseType_t uxIndexToClear ) ;
uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                        UBaseType_t uxIndexToClear,
                                        uint32_t ulBitsToClear ) ;
void MPU_vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) ;
BaseType_t MPU_xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait ) ;
BaseType_t MPU_xTaskCatchUpTicks( TickType_t xTicksToCatchUp ) ;
BaseType_t xTaskIncrementTick( void ) ;
void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait ) ;
void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait ) ;
void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                      TickType_t xTicksToWait,
                                      const BaseType_t xWaitIndefinitely ) ;
BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) ;
void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue ) ;
 void vTaskSwitchContext( void ) ;
TickType_t uxTaskResetEventItemValue( void ) ;
TaskHandle_t MPU_xTaskGetCurrentTaskHandle( void ) ;
void vTaskMissedYield( void ) ;
BaseType_t MPU_xTaskGetSchedulerState( void ) ;
BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) ;
BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) ;
void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                          UBaseType_t uxHighestPriorityWaitingTask ) ;
UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) ;
void vTaskSetTaskNumber( TaskHandle_t xTask,
                         const UBaseType_t uxHandle ) ;
void vTaskStepTick( const TickType_t xTicksToJump ) ;
eSleepModeStatus eTaskConfirmSleepModeStatus( void ) ;
TaskHandle_t pvTaskIncrementMutexHeldCount( void ) ;
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut ) ;
struct QueueDefinition;
typedef struct QueueDefinition   * QueueHandle_t;
typedef struct QueueDefinition   * QueueSetHandle_t;
typedef struct QueueDefinition   * QueueSetMemberHandle_t;
BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition ) ;
BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait ) ;
BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer ) ;
BaseType_t MPU_xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait ) ;
UBaseType_t MPU_uxQueueMessagesWaiting( const QueueHandle_t xQueue ) ;
UBaseType_t MPU_uxQueueSpacesAvailable( const QueueHandle_t xQueue ) ;
void MPU_vQueueDelete( QueueHandle_t xQueue ) ;
BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition ) ;
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken ) ;
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken ) ;
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue ) ;
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue ) ;
UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue ) ;
BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
                                const void * pvItemToQueue,
                                BaseType_t xCoRoutinePreviouslyWoken );
BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
                                   void * pvBuffer,
                                   BaseType_t * pxTaskWoken );
BaseType_t xQueueCRSend( QueueHandle_t xQueue,
                         const void * pvItemToQueue,
                         TickType_t xTicksToWait );
BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
                            void * pvBuffer,
                            TickType_t xTicksToWait );
QueueHandle_t MPU_xQueueCreateMutex( const uint8_t ucQueueType ) ;
QueueHandle_t MPU_xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                       StaticQueue_t * pxStaticQueue ) ;
QueueHandle_t MPU_xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                             const UBaseType_t uxInitialCount ) ;
QueueHandle_t MPU_xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                   const UBaseType_t uxInitialCount,
                                                   StaticQueue_t * pxStaticQueue ) ;
BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait ) ;
TaskHandle_t MPU_xQueueGetMutexHolder( QueueHandle_t xSemaphore ) ;
TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore ) ;
BaseType_t MPU_xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                     TickType_t xTicksToWait ) ;
BaseType_t MPU_xQueueGiveMutexRecursive( QueueHandle_t xMutex ) ;
    QueueHandle_t MPU_xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType ) ;
QueueSetHandle_t MPU_xQueueCreateSet( const UBaseType_t uxEventQueueLength ) ;
BaseType_t MPU_xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                           QueueSetHandle_t xQueueSet ) ;
BaseType_t MPU_xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                                QueueSetHandle_t xQueueSet ) ;
QueueSetMemberHandle_t MPU_xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                            const TickType_t xTicksToWait ) ;
QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet ) ;
void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                     TickType_t xTicksToWait,
                                     const BaseType_t xWaitIndefinitely ) ;
BaseType_t MPU_xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue ) ;
void vQueueSetQueueNumber( QueueHandle_t xQueue,
                           UBaseType_t uxQueueNumber ) ;
UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue ) ;
uint8_t ucQueueGetQueueType( QueueHandle_t xQueue ) ;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.11\")")
_Pragma("diag_pop")
typedef enum {
    OS_SUCCESS,
    OS_FAIL,
} OS_STD_RETURN_e;
typedef enum {
    OS_PRIORITY_IDLE,
    OS_PRIORITY_LOW,
    OS_PRIORITY_BELOW_NORMAL,
    OS_PRIORITY_NORMAL,
    OS_PRIORITY_ABOVE_NORMAL,
    OS_PRIORITY_HIGH,
    OS_PRIORITY_ABOVE_HIGH,
    OS_PRIORITY_VERY_HIGH,
    OS_PRIORITY_BELOW_REALTIME,
    OS_PRIORITY_REAL_TIME,
} OS_PRIORITY_e;
typedef enum {
    OS_OFF,
    OS_INITIALIZE_SCHEDULER,
    OS_CREATE_QUEUES,
    OS_CREATE_TASKS,
    OS_INIT_PRE_OS,
    OS_SCHEDULER_RUNNING,
    OS_ENGINE_RUNNING,
    OS_PRE_CYCLIC_INITIALIZATION_HAS_FINISHED,
    OS_SYSTEM_RUNNING,
    OS_INIT_OS_FATALERROR_SCHEDULER,
    OS_INIT_OS_FATALERROR,
    OS_BOOT_STATE_MAX,
} OS_BOOT_STATE_e;
typedef struct {
    uint8_t timer_1ms;
    uint8_t timer_10ms;
    uint8_t timer_100ms;
    uint8_t timer_sec;
    uint8_t timer_min;
    uint8_t timer_h;
    uint16_t timer_d;
} OS_TIMER_s;
typedef struct {
    OS_PRIORITY_e priority;
    uint32_t phase;
    uint32_t cycleTime;
    uint32_t stackSize_B;
    void *pvParameters;
} OS_TASK_DEFINITION_s;
extern volatile OS_BOOT_STATE_e os_boot;
extern uint32_t os_schedulerStartTime;
extern void OS_InitializeScheduler(void);
extern void OS_StartScheduler(void);
extern void OS_InitializeOperatingSystem(void);
extern void vApplicationIdleHook(void);
extern void OS_EnterTaskCritical(void);
extern void OS_ExitTaskCritical(void);
extern void OS_IncrementTimer(void);
extern uint32_t OS_GetTickCount(void);
extern void OS_DelayTaskUntil(uint32_t *pPreviousWakeTime, uint32_t milliseconds);
extern void OS_MarkTaskAsRequiringFpuContext(void);
extern OS_STD_RETURN_e OS_WaitForNotification(uint32_t *pNotifiedValue, uint32_t timeout);
extern OS_STD_RETURN_e OS_NotifyFromIsr(TaskHandle_t taskToNotify, uint32_t notifiedValue);
extern OS_STD_RETURN_e OS_WaitForNotificationIndexed(
    uint32_t indexToWaitOn,
    uint32_t *pNotifiedValue,
    uint32_t timeout);
extern OS_STD_RETURN_e OS_NotifyIndexedFromIsr(
    TaskHandle_t taskToNotify,
    uint32_t indexToNotify,
    uint32_t notifiedValue);
extern OS_STD_RETURN_e OS_ClearNotificationIndexed(uint32_t indexToClear);
extern OS_STD_RETURN_e OS_ReceiveFromQueue(QueueHandle_t xQueue, void *const pvBuffer, uint32_t ticksToWait);
extern OS_STD_RETURN_e OS_SendToBackOfQueue(QueueHandle_t xQueue, const void *const pvItemToQueue, uint32_t ticksToWait);
extern OS_STD_RETURN_e OS_SendToBackOfQueueFromIsr(
    QueueHandle_t xQueue,
    const void *const pvItemToQueue,
    long *const pxHigherPriorityTaskWoken);
extern uint32_t OS_GetNumberOfStoredMessagesInQueue(QueueHandle_t xQueue);
extern _Bool OS_CheckTimeHasPassed(uint32_t oldTimeStamp_ms, uint32_t timeToPass_ms);
extern _Bool OS_CheckTimeHasPassedWithTimestamp(
    uint32_t oldTimeStamp_ms,
    uint32_t currentTimeStamp_ms,
    uint32_t timeToPass_ms);
extern STD_RETURN_TYPE_e OS_CheckTimeHasPassedSelfTest(void);
extern OS_TASK_DEFINITION_s ftsk_taskDefinitionEngine;
extern OS_TASK_DEFINITION_s ftsk_taskDefinitionCyclic1ms;
extern OS_TASK_DEFINITION_s ftsk_taskDefinitionCyclic10ms;
extern OS_TASK_DEFINITION_s ftsk_taskDefinitionCyclic100ms;
extern OS_TASK_DEFINITION_s ftsk_taskDefinitionCyclicAlgorithm100ms;
extern OS_TASK_DEFINITION_s ftsk_taskDefinitionI2c;
extern OS_TASK_DEFINITION_s ftsk_taskDefinitionAfe;
extern TaskHandle_t ftsk_taskHandleI2c;
extern TaskHandle_t ftsk_taskHandleAfe;
extern void FTSK_InitializeUserCodeEngine(void);
extern void FTSK_RunUserCodeEngine(void);
extern void FTSK_InitializeUserCodePreCyclicTasks(void);
extern void FTSK_RunUserCodeCyclic1ms(void);
extern void FTSK_RunUserCodeCyclic10ms(void);
extern void FTSK_RunUserCodeCyclic100ms(void);
extern void FTSK_RunUserCodeCyclicAlgorithm100ms(void);
extern void FTSK_RunUserCodeI2c(void);
extern void FTSK_RunUserCodeAfe(void);
extern void FTSK_RunUserCodeIdle(void);
#pragma SWI_ALIAS(FAS_DisableInterrupts, 5)
extern void FAS_DisableInterrupts(void);
typedef struct {
    uint32_t *pc;
    uint32_t line;
} FAS_ASSERT_LOCATION_s;
extern void FAS_StoreAssertLocation(uint32_t *pc, uint32_t line);
static inline void FAS_InfiniteLoop(void) {
    FAS_DisableInterrupts();
    while (1) {
    }
}
_Static_assert(0 == 0, "false seems to have been modified.");
_Static_assert(1 != 0, "true seems to have been modified.");
_Static_assert(1 == 1, "true seems to have been modified.");
_Static_assert(STD_OK == 0, "STD_OK seems to have been modified.");
_Static_assert(STD_OK != STD_NOT_OK, "STD_OK or STD_NOT_OK seem to have been modified.");
_Static_assert(STD_NOT_OK == 1, "STD_NOT_OK seems to have been modified.");
typedef enum {
    BS_STRING_WITH_PRECHARGE,
    BS_STRING_WITHOUT_PRECHARGE,
} BS_STRING_PRECHARGE_PRESENT_e;
typedef enum {
    BS_STRING0    = 0u,
    BS_STRING1    = 1u,
    BS_STRING2    = 2u,
    BS_STRING_MAX = 3u,
} BS_STRING_ID_e;
_Static_assert(((1u) <= (uint8_t)0xff), "This code assumes BS_NR_OF_STRINGS fits into uint8_t");
extern BS_STRING_PRECHARGE_PRESENT_e bs_stringsWithPrecharge[(1u)];
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
_Pragma("CHECK_MISRA(\"-12.7\")")
_Pragma("CHECK_MISRA(\"-16.4\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-19.10\")")
_Pragma("CHECK_MISRA(\"-20.1\")")
_Pragma("CHECK_MISRA(\"-20.2\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
_Pragma("CHECK_MISRA(\"-8.1\")")
_Pragma("CHECK_MISRA(\"-8.5\")")
_Pragma("CHECK_MISRA(\"-8.11\")")
_Pragma("CHECK_MISRA(\"-10.1\")")
_Pragma("CHECK_MISRA(\"-10.3\")")
_Pragma("CHECK_MISRA(\"-12.1\")")
_Pragma("CHECK_MISRA(\"-12.2\")")
_Pragma("CHECK_MISRA(\"-12.4\")")
_Pragma("CHECK_MISRA(\"-12.7\")")
_Pragma("CHECK_MISRA(\"-14.7\")")
_Pragma("CHECK_MISRA(\"-14.9\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.6\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_suppress 1558")
_Pragma("diag_suppress 3195")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
 __inline int __isfinite(double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0; }
 __inline int __isfinitef(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) == 0; }
 __inline int __isfinitel(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0; }
 __inline int __isnan(double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) &&
        ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)) == 0); }
 __inline int __isnanf(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) &&
        (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)) == 0); }
 __inline int __isnanl(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) &&
        ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)) == 0); }
 __inline int __isnormal(double d)
{ return (((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0); }
 __inline int __isnormalf(float f)
{ return ((((((unsigned int)((_ftoi(f)) >> (24-1))) & ((128u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) == 0); }
 __inline int __isnormall(long double e)
{ return (((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0); }
 __inline int __signbit(double d)
{ return (((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & ((__uint64_t)(1) << (64-1))) == 0)) == 0; }
 __inline int __signbitf(float f)
{ return ((((_ftoi(f)) & ((__uint32_t)(1) << (32-1))) == 0)) == 0; }
 __inline int __signbitl(long double e)
{ return (((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & ((__uint64_t)(1) << (64-1))) == 0)) == 0; }
 __inline int __isinff(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) && ((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)); }
 __inline int __isinf (double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) && (((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)); }
 __inline int __isinfl(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) && (((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)); }
 __inline int __fpclassifyf(float f)
{
    if ((((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)))
    {
        if (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if ((((((unsigned int)((_ftoi(f)) >> (24-1))) & ((128u * 2) - 1)) == 0)))
    {
        if (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
 __inline int __fpclassify (double d)
{
    if ((((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)))
    {
        if ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if (((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)))
    {
        if ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
 __inline int __fpclassifyl(long double e)
{
    if ((((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)))
    {
        if ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if (((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)))
    {
        if ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
_Pragma("diag_pop")
typedef	double	double_t;
typedef	float	float_t;
 double      acos(double x);
 float       acosf(float x);
 long double acosl(long double x);
 double      asin(double x);
 float       asinf(float x);
 long double asinl(long double x);
 double      atan(double x);
 float       atanf(float x);
 long double atanl(long double x);
 double      atan2(double y, double x);
 float       atan2f(float y, float x);
 long double atan2l(long double y, long double x);
 double      cos(double x);
 float       cosf(float x);
 long double cosl(long double x);
 double      sin(double x);
 float       sinf(float x);
 long double sinl(long double x);
 double      tan(double x);
 float       tanf(float x);
 long double tanl(long double x);
 double      acosh(double x);
 float       acoshf(float x);
 long double acoshl(long double x);
 double      asinh(double x);
 float       asinhf(float x);
 long double asinhl(long double x);
 double      atanh(double x);
 float       atanhf(float x);
 long double atanhl(long double x);
 double      cosh(double x);
 float       coshf(float x);
 long double coshl(long double x);
 double      sinh(double x);
 float       sinhf(float x);
 long double sinhl(long double x);
 double      tanh(double x);
 float       tanhf(float x);
 long double tanhl(long double x);
 double      exp(double x);
 float       expf(float x);
 long double expl(long double x);
 double      exp2(double x);
 float       exp2f(float x);
 long double exp2l(long double x);
 double      expm1(double x);
 float       expm1f(float x);
 long double expm1l(long double x);
 double      frexp(double val, int *e);
 float       frexpf(float val, int *e);
 long double frexpl(long double val, int *e);
 int         ilogb(double x);
 int         ilogbf(float x);
 int         ilogbl(long double x);
 double      ldexp(double x, int e);
 float       ldexpf(float x, int e);
 long double ldexpl(long double x, int e);
 double      log(double x);
 float       logf(float x);
 long double logl(long double x);
 double      log10(double x);
 float       log10f(float x);
 long double log10l(long double x);
 double      log1p(double x);
 float       log1pf(float x);
 long double log1pl(long double x);
 double      log2(double x);
 float       log2f(float x);
 long double log2l(long double x);
 double      logb(double x);
 float       logbf(float x);
 long double logbl(long double x);
 double      modf(double val, double *iptr);
 float       modff(float val, float *iptr);
 long double modfl(long double val, long double *iptr);
 double      scalbn(double x, int n);
 float       scalbnf(float x, int n);
 long double scalbnl(long double x, int n);
 double      scalbln(double x, long n);
 float       scalblnf(float x, long n);
 long double scalblnl(long double x, long n);
 double      cbrt(double x);
 float       cbrtf(float x);
 long double cbrtl(long double x);
 double      fabs(double x);
 float       fabsf(float x);
 long double fabsl(long double x);
 double      hypot(double x, double y);
 float       hypotf(float x, float y);
 long double hypotl(long double x, long double y);
 double      pow(double x, double y);
 float       powf(float x, float y);
 long double powl(long double x, long double y);
 double      sqrt(double x);
 float       sqrtf(float x);
 long double sqrtl(long double x);
 double      erf(double x);
 float       erff(float x);
 long double erfl(long double x);
 double      erfc(double x);
 float       erfcf(float x);
 long double erfcl(long double x);
 double      lgamma(double x);
 float       lgammaf(float x);
 long double lgammal(long double x);
 double      tgamma(double x);
 float       tgammaf(float x);
 long double tgammal(long double x);
 double      ceil(double x);
 float       ceilf(float x);
 long double ceill(long double x);
 double      floor(double x);
 float       floorf(float x);
 long double floorl(long double x);
 double      nearbyint(double x);
 float       nearbyintf(float x);
 long double nearbyintl(long double x);
 double      rint(double x);
 float       rintf(float x);
 long double rintl(long double x);
 long        lrint(double x);
 long        lrintf(float x);
 long        lrintl(long double x);
 long long   llrint(double x);
 long long   llrintf(float x);
 long long   llrintl(long double x);
 double      round(double x);
 float       roundf(float x);
 long double roundl(long double x);
 long        lround(double x);
 long        lroundf(float x);
 long        lroundl(long double x);
 long long   llround(double x);
 long long   llroundf(float x);
 long long   llroundl(long double x);
 double      trunc(double x);
 float       truncf(float x);
 long double truncl(long double x);
 double      fmod(double x, double y);
 float       fmodf(float x, float y);
 long double fmodl(long double x, long double y);
 double      remainder(double x, double y);
 float       remainderf(float x, float y);
 long double remainderl(long double x, long double y);
 double      remquo(double x, double y, int *quo);
 float       remquof(float x, float y, int *quo);
 long double remquol(long double x, long double y, int *quo);
 double      copysign(double x, double y);
 float       copysignf(float x, float y);
 long double copysignl(long double x, long double y);
 double      nan(const char *tagp);
 float       nanf(const char *tagp);
 long double nanl(const char *tagp);
 double      nextafter(double x, double y);
 float       nextafterf(float x, float y);
 long double nextafterl(long double x, long double y);
 double      nexttoward(double x, long double y);
 float       nexttowardf(float x, long double y);
 long double nexttowardl(long double x, long double y);
 double      fdim(double x, double y);
 float       fdimf(float x, float y);
 long double fdiml(long double x, long double y);
 double      fmax(double x, double y);
 float       fmaxf(float x, float y);
 long double fmaxl(long double x, long double y);
 double      fmin(double x, double y);
 float       fminf(float x, float y);
 long double fminl(long double x, long double y);
 double      fma(double x, double y, double z);
 float       fmaf(float x, float y, float z);
 long double fmal(long double x, long double y, long double z);
_Pragma("diag_pop")
typedef uint16_t FRAM_PROJECT_ID;
typedef enum {
    FRAM_ACCESS_OK,
    FRAM_ACCESS_SPI_BUSY,
    FRAM_ACCESS_CRC_BUSY,
    FRAM_ACCESS_CRC_ERROR,
} FRAM_RETURN_TYPE_e;
typedef struct {
    void *blockptr;
    uint32_t datalength;
    uint32_t address;
} FRAM_BASE_HEADER_s;
typedef enum {
    FRAM_BLOCK_ID_VERSION,
    FRAM_BLOCK_ID_SOC,
    FRAM_BLOCK_ID_SBC_INIT_STATE,
    FRAM_BLOCK_ID_DEEP_DISCHARGE_FLAG,
    FRAM_BLOCK_ID_SOE,
    FRAM_BLOCK_ID_SYS_MON_RECORD,
    FRAM_BLOCK_ID_INSULATION_FLAG,
    FRAM_BLOCK_MAX,
} FRAM_BLOCK_ID_e;
typedef struct {
    FRAM_PROJECT_ID project;
    uint8_t major;
    uint8_t minor;
    uint8_t patch;
} FRAM_VERSION_s;
typedef struct {
    uint8_t phase;
    STD_RETURN_TYPE_e finState;
} FRAM_SBC_INIT_s;
typedef struct {
    float_t minimumSoc_perc[(1u)];
    float_t maximumSoc_perc[(1u)];
    float_t averageSoc_perc[(1u)];
} FRAM_SOC_s;
typedef struct {
    float_t minimumSoe_perc[(1u)];
    float_t maximumSoe_perc[(1u)];
    float_t averageSoe_perc[(1u)];
} FRAM_SOE_s;
typedef struct {
    _Bool deepDischargeFlag[(1u)];
} FRAM_DEEP_DISCHARGE_FLAG_s;
typedef struct {
    _Bool groundErrorDetected;
} FRAM_INSULATION_FLAG_s;
typedef struct {
    _Bool anyTimingIssueOccurred;
    uint32_t taskEngineViolatingDuration;
    uint32_t taskEngineEnterTimestamp;
    uint32_t task1msViolatingDuration;
    uint32_t task1msEnterTimestamp;
    uint32_t task10msViolatingDuration;
    uint32_t task10msEnterTimestamp;
    uint32_t task100msViolatingDuration;
    uint32_t task100msEnterTimestamp;
    uint32_t task100msAlgorithmViolatingDuration;
    uint32_t task100msAlgorithmEnterTimestamp;
} FRAM_SYS_MON_RECORD_s;
extern FRAM_BASE_HEADER_s fram_base_header[FRAM_BLOCK_MAX];
extern FRAM_VERSION_s fram_version;
extern FRAM_SOC_s fram_soc;
extern FRAM_SOE_s fram_soe;
extern FRAM_SBC_INIT_s fram_sbcInit;
extern FRAM_DEEP_DISCHARGE_FLAG_s fram_deepDischargeFlags;
extern FRAM_SYS_MON_RECORD_s fram_sys_mon_record;
extern FRAM_INSULATION_FLAG_s fram_insulationFlags;
typedef uint64_t uint64;
typedef uint32_t uint32;
typedef uint16_t uint16;
typedef uint8_t uint8;
typedef _Bool boolean;
typedef int64_t sint64;
typedef int32_t sint32;
typedef int16_t sint16;
typedef int8_t sint8;
typedef float float32;
typedef double float64;
typedef uint8 Std_ReturnType;
typedef struct
{
    uint16 vendorID;
    uint16 moduleID;
    uint8  instanceID;
    uint8  sw_major_version;
    uint8  sw_minor_version;
    uint8  sw_patch_version;
} Std_VersionInfoType;
  typedef unsigned char StatusType;
typedef boolean tBoolean;
typedef enum loopBackType
{
    Digital_Lbk = 0U,
    Analog_Lbk = 1U
}loopBackType_t;
typedef enum config_value_type
{
	InitialValue,
	CurrentValue
}config_value_type_t;
typedef volatile struct gioBase
{
    uint32 GCR0;
    uint32   rsvd;
    uint32 INTDET;
    uint32 POL;
    uint32 ENASET;
    uint32 ENACLR;
    uint32 LVLSET;
    uint32 LVLCLR;
    uint32 FLG;
    uint32 OFF1;
    uint32 OFF2;
    uint32 EMU1;
	uint32 EMU2;
} gioBASE_t;
typedef volatile struct gioPort
{
    uint32 DIR;
    uint32 DIN;
    uint32 DOUT;
    uint32 DSET;
    uint32 DCLR;
    uint32 PDR;
    uint32 PULDIS;
    uint32 PSL;
} gioPORT_t;
typedef volatile struct hetBase
{
    uint32 GCR;
    uint32 PFR;
    uint32 ADDR;
    uint32 OFF1;
    uint32 OFF2;
    uint32 INTENAS;
    uint32 INTENAC;
    uint32 EXC1;
    uint32 EXC2;
    uint32 PRY;
    uint32 FLG;
    uint32 AND;
    uint32   rsvd1;
    uint32 HRSH;
    uint32 XOR;
    uint32 REQENS;
    uint32 REQENC;
    uint32 REQDS;
    uint32   rsvd2;
    uint32 DIR;
    uint32 DIN;
    uint32 DOUT;
    uint32 DSET;
    uint32 DCLR;
    uint32 PDR;
    uint32 PULDIS;
    uint32 PSL;
    uint32   rsvd3;
    uint32   rsvd4;
    uint32 PCR;
    uint32 PAR;
    uint32 PPR;
    uint32 SFPRLD;
    uint32 SFENA;
    uint32   rsvd5;
    uint32 LBPSEL;
    uint32 LBPDIR;
    uint32 PINDIS;
} hetBASE_t;
typedef volatile struct hetInstructionBase
{
    uint32 Program;
    uint32 Control;
    uint32 Data;
    uint32   rsvd1;
} hetINSTRUCTION_t;
typedef volatile struct het1RamBase
{
    hetINSTRUCTION_t Instruction[160U];
} hetRAMBASE_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-20.1\")")
_Pragma("CHECK_MISRA(\"-20.2\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
 size_t  strlen(const char *string);
 char *strcpy(char * __restrict dest,
                        const char * __restrict src);
 char *strncpy(char * __restrict dest,
                         const char * __restrict src, size_t n);
 char *strcat(char * __restrict string1,
                        const char * __restrict string2);
 char *strncat(char * __restrict dest,
                         const char * __restrict src, size_t n);
 char *strchr(const char *string, int c);
 char *strrchr(const char *string, int c);
 int  strcmp(const char *string1, const char *string2);
 int  strncmp(const char *string1, const char *string2, size_t n);
 int     strcoll(const char *string1, const char *_string2);
 size_t  strxfrm(char * __restrict to,
                             const char * __restrict from, size_t n);
 char   *strpbrk(const char *string, const char *chs);
 size_t  strspn(const char *string, const char *chs);
 size_t  strcspn(const char *string, const char *chs);
 char   *strstr(const char *string1, const char *string2);
 char   *strtok(char * __restrict str1,
                            const char * __restrict str2);
 char   *strerror(int _errno);
 char   *strdup(const char *string);
 void   *memmove(void *s1, const void *s2, size_t n);
 void   *memccpy(void *dest, const void *src, int ch, size_t count);
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-16.4\")")
 void   *memcpy(void * __restrict s1,
                            const void * __restrict s2, size_t n);
_Pragma("diag_pop")
 int     memcmp(const void *cs, const void *ct, size_t n);
 void   *memchr(const void *cs, int c, size_t n);
 void   *memset(void *mem, int ch, size_t length);
_Pragma("diag_pop")
enum hetPinSelect
{
    PIN_HET_0 = 0U,
    PIN_HET_1 = 1U,
    PIN_HET_2 = 2U,
    PIN_HET_3 = 3U,
    PIN_HET_4 = 4U,
    PIN_HET_5 = 5U,
    PIN_HET_6 = 6U,
    PIN_HET_7 = 7U,
    PIN_HET_8 = 8U,
    PIN_HET_9 = 9U,
    PIN_HET_10 = 10U,
    PIN_HET_11 = 11U,
    PIN_HET_12 = 12U,
    PIN_HET_13 = 13U,
    PIN_HET_14 = 14U,
    PIN_HET_15 = 15U,
    PIN_HET_16 = 16U,
    PIN_HET_17 = 17U,
    PIN_HET_18 = 18U,
    PIN_HET_19 = 19U,
    PIN_HET_20 = 20U,
    PIN_HET_21 = 21U,
    PIN_HET_22 = 22U,
    PIN_HET_23 = 23U,
    PIN_HET_24 = 24U,
    PIN_HET_25 = 25U,
    PIN_HET_26 = 26U,
    PIN_HET_27 = 27U,
    PIN_HET_28 = 28U,
    PIN_HET_29 = 29U,
    PIN_HET_30 = 30U,
    PIN_HET_31 = 31U
};
typedef struct hetSignal
{
	uint32 duty;
	float64   period;
} hetSIGNAL_t;
typedef struct het_config_reg
{
    uint32 CONFIG_GCR;
    uint32 CONFIG_PFR;
    uint32 CONFIG_INTENAS;
    uint32 CONFIG_INTENAC;
    uint32 CONFIG_PRY;
    uint32 CONFIG_AND;
    uint32 CONFIG_HRSH;
    uint32 CONFIG_XOR;
    uint32 CONFIG_DIR;
    uint32 CONFIG_PDR;
	uint32 CONFIG_PULDIS;
	uint32 CONFIG_PSL;
	uint32 CONFIG_PCR;
} het_config_reg_t;
void hetInit(void);
void   pwmStart(hetRAMBASE_t * hetRAM,uint32 pwm);
void   pwmStop(hetRAMBASE_t * hetRAM,uint32 pwm);
void   pwmSetDuty(hetRAMBASE_t * hetRAM,uint32 pwm, uint32 pwmDuty);
void   pwmSetSignal(hetRAMBASE_t * hetRAM,uint32 pwm, hetSIGNAL_t signal);
void   pwmGetSignal(hetRAMBASE_t * hetRAM,uint32 pwm, hetSIGNAL_t *signal);
void   pwmEnableNotification(hetBASE_t * hetREG,uint32 pwm, uint32 notification);
void   pwmDisableNotification(hetBASE_t * hetREG,uint32 pwm, uint32 notification);
void   pwmNotification(hetBASE_t * hetREG,uint32 pwm, uint32 notification);
void   edgeResetCounter(hetRAMBASE_t * hetRAM,uint32 edge);
uint32 edgeGetCounter(hetRAMBASE_t * hetRAM,uint32 edge);
void   edgeEnableNotification(hetBASE_t * hetREG,uint32 edge);
void   edgeDisableNotification(hetBASE_t * hetREG,uint32 edge);
void   edgeNotification(hetBASE_t * hetREG,uint32 edge);
void capGetSignal(hetRAMBASE_t * hetRAM, uint32 cap, hetSIGNAL_t *signal);
void   hetResetTimestamp(hetRAMBASE_t * hetRAM);
uint32 hetGetTimestamp(hetRAMBASE_t * hetRAM);
void het1GetConfigValue(het_config_reg_t *config_reg, config_value_type_t type);
void het2GetConfigValue(het_config_reg_t *config_reg, config_value_type_t type);
void hetNotification(hetBASE_t *het, uint32 offset);
typedef volatile struct spiBase
{
    uint32  GCR0;
    uint32  GCR1;
    uint32  INT0;
    uint32  LVL;
    uint32  FLG;
    uint32  PC0;
    uint32  PC1;
    uint32  PC2;
    uint32  PC3;
    uint32  PC4;
    uint32  PC5;
    uint32  PC6;
    uint32  PC7;
    uint32  PC8;
    uint32  DAT0;
    uint32  DAT1;
    uint32  BUF;
    uint32  EMU;
    uint32  DELAY;
    uint32  DEF;
    uint32  FMT0;
    uint32  FMT1;
    uint32  FMT2;
    uint32  FMT3;
    uint32  INTVECT0;
    uint32  INTVECT1;
    uint32  RESERVED[51U];
    uint32  IOLPKTSTCR;
} spiBASE_t;
enum spiChipSelect
{
    SPI_CS_NONE = 0xFFU,
    SPI_CS_0    = 0xFEU,
    SPI_CS_1    = 0xFDU,
    SPI_CS_2    = 0xFBU,
    SPI_CS_3    = 0xF7U,
    SPI_CS_4    = 0xEFU,
    SPI_CS_5    = 0xDFU,
    SPI_CS_6    = 0xBFU,
    SPI_CS_7    = 0x7FU
};
enum spiPinSelect
{
    SPI_PIN_CS0    = 0U,
    SPI_PIN_CS1    = 1U,
    SPI_PIN_CS2    = 2U,
    SPI_PIN_CS3    = 3U,
    SPI_PIN_CS4    = 4U,
    SPI_PIN_CS5    = 5U,
    SPI_PIN_CS6    = 6U,
    SPI_PIN_CS7    = 7U,
    SPI_PIN_ENA    = 8U,
    SPI_PIN_CLK    = 9U,
    SPI_PIN_SIMO   = 10U,
    SPI_PIN_SOMI   = 11U,
    SPI_PIN_SIMO_1 = 17U,
    SPI_PIN_SIMO_2 = 18U,
    SPI_PIN_SIMO_3 = 19U,
    SPI_PIN_SIMO_4 = 20U,
    SPI_PIN_SIMO_5 = 21U,
    SPI_PIN_SIMO_6 = 22U,
    SPI_PIN_SIMO_7 = 23U,
    SPI_PIN_SOMI_1 = 25U,
    SPI_PIN_SOMI_2 = 26U,
    SPI_PIN_SOMI_3 = 27U,
    SPI_PIN_SOMI_4 = 28U,
    SPI_PIN_SOMI_5 = 29U,
    SPI_PIN_SOMI_6 = 30U,
    SPI_PIN_SOMI_7 = 31U
};
typedef enum dataformat
{
    SPI_FMT_0 = 0U,
    SPI_FMT_1 = 1U,
    SPI_FMT_2 = 2U,
    SPI_FMT_3 = 3U
}SPIDATAFMT_t;
typedef struct spiDAT1RegConfig
{
    boolean CS_HOLD;
    boolean WDEL;
    SPIDATAFMT_t DFSEL;
    uint8 CSNR;
}spiDAT1_t;
typedef enum SpiTxRxDataStatus
{
    SPI_READY = 0U,
    SPI_PENDING = 1U,
    SPI_COMPLETED = 2U
}SpiDataStatus_t;
typedef struct spi_config_reg
{
    uint32 CONFIG_GCR1;
    uint32 CONFIG_INT0;
    uint32 CONFIG_LVL;
    uint32 CONFIG_PC0;
    uint32 CONFIG_PC1;
    uint32 CONFIG_PC6;
    uint32 CONFIG_PC7;
    uint32 CONFIG_PC8;
    uint32 CONFIG_DELAY;
    uint32 CONFIG_FMT0;
    uint32 CONFIG_FMT1;
    uint32 CONFIG_FMT2;
    uint32 CONFIG_FMT3;
}spi_config_reg_t;
void spiInit(void);
void spiSetFunctional(spiBASE_t *spi, uint32 port);
void spiEnableNotification(spiBASE_t *spi, uint32 flags);
void spiDisableNotification(spiBASE_t *spi, uint32 flags);
uint32 spiTransmitData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * srcbuff);
void spiSendData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * srcbuff);
uint32 spiReceiveData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * destbuff);
void spiGetData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * destbuff);
uint32 spiTransmitAndReceiveData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * srcbuff, uint16 * destbuff);
void spiSendAndGetData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * srcbuff, uint16 * destbuff);
void spiEnableLoopback(spiBASE_t *spi, loopBackType_t Loopbacktype);
void spiDisableLoopback(spiBASE_t *spi);
SpiDataStatus_t SpiTxStatus(spiBASE_t *spi);
SpiDataStatus_t SpiRxStatus(spiBASE_t *spi);
void spi1GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spi2GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spi3GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spi4GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spi5GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spiNotification(spiBASE_t *spi, uint32 flags);
void spiEndNotification(spiBASE_t *spi);
typedef enum {
    SPI_IDLE,
    SPI_BUSY,
} SPI_BUSY_STATE_e;
typedef enum {
    SPI_CHIP_SELECT_HARDWARE,
    SPI_CHIP_SELECT_SOFTWARE,
    SPI_CHIP_SELECT_MAX,
} SPI_CHIP_SELECT_TYPE_e;
typedef struct {
    spiDAT1_t *pConfig;
    spiBASE_t *pNode;
    volatile uint32_t *pGioPort;
    uint32_t csPin;
    SPI_CHIP_SELECT_TYPE_e csType;
} SPI_INTERFACE_CONFIG_s;
extern SPI_INTERFACE_CONFIG_s spi_ltcInterface[(1u)];
extern SPI_INTERFACE_CONFIG_s spi_mxmInterface;
extern SPI_INTERFACE_CONFIG_s spi_nxp775InterfaceTx[(1u)];
extern SPI_INTERFACE_CONFIG_s spi_nxp775InterfaceRx[(1u)];
extern SPI_INTERFACE_CONFIG_s spi_framInterface;
extern SPI_INTERFACE_CONFIG_s spi_spsInterface;
extern SPI_INTERFACE_CONFIG_s spi_sbcMcuInterface;
extern SPI_BUSY_STATE_e spi_busyFlags[];
extern const uint8_t spi_nrBusyFlags;
extern void SPI_SpsInterfaceSwitchToHighSpeed(SPI_INTERFACE_CONFIG_s *pSpiSpsInterface);
extern void SPI_SpsInterfaceSwitchToLowSpeed(SPI_INTERFACE_CONFIG_s *pSpiSpsInterface);
extern void SPI_Initialize(void);
extern STD_RETURN_TYPE_e SPI_TransmitDummyByte(SPI_INTERFACE_CONFIG_s *pSpiInterface, uint32_t delay);
extern STD_RETURN_TYPE_e SPI_TransmitData(SPI_INTERFACE_CONFIG_s *pSpiInterface, uint16 *pTxBuff, uint32 frameLength);
extern STD_RETURN_TYPE_e SPI_TransmitReceiveData(
    SPI_INTERFACE_CONFIG_s *pSpiInterface,
    uint16 *pTxBuff,
    uint16 *pRxBuff,
    uint32 frameLength);
extern void SPI_FramTransmitReceiveData(
    SPI_INTERFACE_CONFIG_s *pSpiInterface,
    uint16 *pTxBuff,
    uint16 *pRxBuff,
    uint32 frameLength);
extern STD_RETURN_TYPE_e SPI_TransmitReceiveDataDma(
    SPI_INTERFACE_CONFIG_s *pSpiInterface,
    uint16_t *pTxBuff,
    uint16_t *pRxBuff,
    uint32_t frameLength);
extern STD_RETURN_TYPE_e SPI_SlaveSetReceiveDataDma(
    SPI_INTERFACE_CONFIG_s *pSpiInterface,
    uint16_t *pTxBuff,
    uint16_t *pRxBuff,
    uint32_t frameLength);
extern STD_RETURN_TYPE_e SPI_Lock(uint8_t spi);
extern void SPI_Unlock(uint8_t spi);
extern void SPI_SetFunctional(spiBASE_t *pNode, enum spiPinSelect bit, _Bool hardwareControlled);
extern void SPI_DmaSendLastByte(uint8_t spiIndex);
extern STD_RETURN_TYPE_e SPI_CheckInterfaceAvailable(spiBASE_t *pNode);
extern uint8_t SPI_GetSpiIndex(spiBASE_t *pNode);
typedef enum
{
    fs8xStatusOk    = 0U,
    fs8xStatusError = 1U
} fs8x_status_t;
typedef enum
{
    fs8xSPI = 0,
    fs8xI2C = 1
} fs8x_commType_t;
typedef enum {
    fs8xRegRead,
    fs8xRegWrite
} fs8x_command_type_t;
typedef struct
{
    _Bool isFailSafe;
    uint8_t registerAddress;
    fs8x_command_type_t commandType;
    uint16_t writeData;
} fs8x_tx_frame_t;
typedef struct
{
    uint8_t deviceStatus;
    uint16_t readData;
} fs8x_rx_frame_t;
typedef struct
{
    uint16_t watchdogSeed;
    fs8x_commType_t communicationMode;
    uint8_t i2cAddressOtp;
} fs8x_drv_data_t;
typedef enum
{
    fs8xBuck1 = 4,
    fs8xBuck2 = 3,
    fs8xBuck3 = 2,
    fs8xLdo1 = 1,
    fs8xLdo2 = 0,
    fs8xVBoost = 5,
    fs8xVPre = 6
} fs8x_reg_output_t;
typedef enum
{
    fs8xAmuxGnd = (0x0000U << 0x0000U),
    fs8xAmuxVddio = (0x0001U << 0x0000U),
    fs8xAmuxTempSensor = (0x0002U << 0x0000U),
    fs8xAmuxBandgapMain = (0x0003U << 0x0000U),
    fs8xAmuxBandgapFailSafe = (0x0004U << 0x0000U),
    fs8xAmuxVbuck1Volt = (0x0005U << 0x0000U),
    fs8xAmuxVbuck2Volt = (0x0006U << 0x0000U),
    fs8xAmuxVbuck3VoltDiv2_5 = (0x0007U << 0x0000U),
    fs8xAmuxVpreVoltDiv2_5 = (0x0008U << 0x0000U),
    fs8xAmuxVboostVoltDiv2_5 = (0x0009U << 0x0000U),
    fs8xAmuxVldo1VoltDiv2_5 = (0x000AU << 0x0000U),
    fs8xAmuxVldo2VoltDiv2_5 = (0x000BU << 0x0000U),
    fs8xAmuxVbosVoltDiv2_5 = (0x000CU << 0x0000U),
    fs8xAmuxVsup1VoltDiv7_5 = (0x000EU << 0x0000U),
    fs8xAmuxWake1VoltDiv7_5 = (0x000FU << 0x0000U),
    fs8xAmuxWake2VoltDiv7_5 = (0x0010U << 0x0000U),
    fs8xAmuxVana = (0x0011U << 0x0000U),
    fs8xAmuxVdig = (0x0012U << 0x0000U),
    fs8xAmuxVdigFs = (0x0013U << 0x0000U),
    fs8xAmuxPsync = (0x0014U << 0x0000U),
    fs8xAmuxVsup1VoltDiv14 = (0x0001U << 0x0005U) | (0x000EU << 0x0000U),
    fs8xAmuxWake1VoltDiv14 = (0x0001U << 0x0005U) | (0x000FU << 0x0000U),
    fs8xAmuxWake2VoltDiv14 = (0x0001U << 0x0005U) | (0x0010U << 0x0000U)
} fs8x_amux_selection_t;
fs8x_status_t FS8x_WD_ChangeSeed(SPI_INTERFACE_CONFIG_s* spiInterface, fs8x_drv_data_t* drvData, uint16_t wdSeed);
fs8x_status_t FS8x_WD_Refresh(SPI_INTERFACE_CONFIG_s* spiInterface, fs8x_drv_data_t* drvData);
fs8x_status_t FS8x_FS0B_Release(SPI_INTERFACE_CONFIG_s* spiInterface, fs8x_drv_data_t* drvData);
fs8x_status_t FS8x_SwitchAMUXchannel(SPI_INTERFACE_CONFIG_s* spiInterface, fs8x_drv_data_t* drvData,
        fs8x_amux_selection_t channelSelection);
fs8x_status_t FS8x_SetRegulatorState(SPI_INTERFACE_CONFIG_s* spiInterface, fs8x_drv_data_t* drvData,
        fs8x_reg_output_t vreg, _Bool enable);
fs8x_status_t FS8x_GetFaultErrorCounterValue(SPI_INTERFACE_CONFIG_s* spiInterface, fs8x_drv_data_t* drvData,
        uint8_t* faultErrorCounterValue);
extern fs8x_status_t MCU_SPI_TransferData(SPI_INTERFACE_CONFIG_s* pSpiInterface, uint8_t* txFrame,
                uint16_t frameLengthBytes, uint8_t* rxFrame);
fs8x_status_t FS8x_ReadRegister(SPI_INTERFACE_CONFIG_s* pSpiInterface, fs8x_drv_data_t* drvData, _Bool isFailSafe,
        uint8_t address, fs8x_rx_frame_t* rxData);
fs8x_status_t FS8x_WriteRegister(SPI_INTERFACE_CONFIG_s* pSpiInterface, fs8x_drv_data_t* drvData, _Bool isFailSafe,
        uint8_t address, uint16_t writeData);
fs8x_status_t FS8x_WriteRegisterInit(SPI_INTERFACE_CONFIG_s* pSpiInterface, fs8x_drv_data_t* drvData, uint8_t address,
        uint16_t writeData);
fs8x_status_t FS8x_UpdateRegister(SPI_INTERFACE_CONFIG_s* pSpiInterface, fs8x_drv_data_t* drvData, _Bool isFailSafe,
        uint8_t address, int16_t mask, uint16_t writeData);
typedef struct {
    uint16_t grl_flags;
    uint16_t iOvervoltageUndervoltageSafeReaction1;
    uint16_t iOvervoltageUndervoltageSafeReaction2;
    uint16_t iWatchdogConfiguration;
    uint16_t i_safe_inputs;
    uint16_t iFailSafeSateMachine;
    uint16_t i_svs;
    uint16_t watchdogWindow;
    uint16_t watchdogSeed;
    uint16_t watchdogAnswer;
    uint16_t overvoltageUndervoltageRegisterStatus;
    uint16_t releaseFs0bPin;
    uint16_t safeIos;
    uint16_t diag_safety;
    uint16_t intb_mask;
    uint16_t states;
} FS85_FS_REGISTER_s;
typedef struct {
    uint16_t flag;
    uint16_t mode;
    uint16_t registerControl1;
    uint16_t registerControl2;
    uint16_t analogMultiplexer;
    uint16_t clock;
    uint16_t int_mask1;
    uint16_t int_mask2;
    uint16_t flag1;
    uint16_t flag2;
    uint16_t vmon_regx;
    uint16_t lvb1_svs;
    uint16_t memory0;
    uint16_t memory1;
    uint16_t deviceId;
} FS85_MAIN_REGISTERS_s;
typedef enum {
    SBC_NORMAL_MODE,
    SBC_DEBUG_MODE,
} FS85_OPERATION_MODE_e;
typedef struct {
    _Bool finUsed;
    STD_RETURN_TYPE_e finState;
    volatile uint32_t *pGIOport;
    uint32_t pin;
} FS85_FIN_CONFIGURATION_s;
typedef struct {
    FRAM_BLOCK_ID_e entry;
    FRAM_SBC_INIT_s *data;
} FS85_NVRAM_INFO_s;
typedef struct {
    SPI_INTERFACE_CONFIG_s *pSpiInterface;
    fs8x_drv_data_t configValues;
    FS85_FIN_CONFIGURATION_s fin;
    FS85_MAIN_REGISTERS_s mainRegister;
    FS85_FS_REGISTER_s fsRegister;
    FS85_NVRAM_INFO_s nvram;
    FS85_OPERATION_MODE_e mode;
} FS85_STATE_s;
extern FS85_STATE_s fs85xx_mcuSupervisor;
extern STD_RETURN_TYPE_e FS85_InitializeFsPhase(FS85_STATE_s *pInstance);
extern STD_RETURN_TYPE_e FS85_InitializeNumberOfRequiredWatchdogRefreshes(
    FS85_STATE_s *pInstance,
    uint8_t *requiredWatchdogRefreshes);
extern STD_RETURN_TYPE_e FS85_CheckFaultErrorCounter(FS85_STATE_s *pInstance);
extern STD_RETURN_TYPE_e FS85_SafetyPathChecks(FS85_STATE_s *pInstance);
extern STD_RETURN_TYPE_e SBC_TriggerWatchdog(FS85_STATE_s *pInstance);
typedef enum {
    SBC_STATE_INIT_REQUEST,
    SBC_STATE_ERROR_REQUEST,
    SBC_STATE_NO_REQUEST,
} SBC_STATE_REQUEST_e;
typedef enum {
    SBC_PERIODIC_WATCHDOG_ACTIVATED,
    SBC_PERIODIC_WATCHDOG_DEACTIVATED,
} SBC_PERIODIC_WATCHDOG_STATE_e;
typedef enum {
    SBC_OK,
    SBC_BUSY_OK,
    SBC_REQUEST_PENDING,
    SBC_ILLEGAL_REQUEST,
    SBC_ALREADY_INITIALIZED,
    SBC_ILLEGAL_TASK_TYPE,
} SBC_RETURN_TYPE_e;
typedef enum {
    SBC_STATEMACHINE_UNINITIALIZED,
    SBC_STATEMACHINE_INITIALIZATION,
    SBC_STATEMACHINE_RUNNING,
    SBC_STATEMACHINE_ERROR,
    SBC_STATEMACHINE_UNDEFINED,
} SBC_STATEMACHINE_e;
typedef enum {
    SBC_ENTRY,
    SBC_INIT_RESET_FAULT_ERROR_COUNTER_PART1,
    SBC_INIT_RESET_FAULT_ERROR_COUNTER_PART2,
    SBC_INITIALIZE_SAFETY_PATH_CHECK,
    SBC_INITIALIZE_VOLTAGE_SUPERVISOR_PART3,
    SBC_INITIALIZE_VOLTAGE_SUPERVISOR_PART4,
} SBC_STATEMACHINE_SUB_e;
typedef struct {
    uint16_t timer;
    uint16_t watchdogTrigger;
    SBC_STATE_REQUEST_e stateRequest;
    SBC_STATEMACHINE_e state;
    SBC_STATEMACHINE_SUB_e substate;
    SBC_STATEMACHINE_e lastState;
    SBC_STATEMACHINE_SUB_e lastSubstate;
    uint32_t illegalRequestsCounter;
    uint8_t retryCounter;
    uint8_t requestWatchdogTrigger;
    uint8_t triggerEntry;
    SBC_PERIODIC_WATCHDOG_STATE_e watchdogState;
    FS85_STATE_s *pFs85xxInstance;
    uint16_t watchdogPeriod_10ms;
} SBC_STATE_s;
extern SBC_STATE_s sbc_stateMcuSupervisor;
extern SBC_RETURN_TYPE_e SBC_SetStateRequest(SBC_STATE_s *pInstance, SBC_STATE_REQUEST_e stateRequest);
extern SBC_STATEMACHINE_e SBC_GetState(SBC_STATE_s *pInstance);
extern void SBC_Trigger(SBC_STATE_s *pInstance);
typedef struct gio_config_reg
{
    uint32 CONFIG_INTDET;
    uint32 CONFIG_POL;
    uint32 CONFIG_INTENASET;
    uint32 CONFIG_LVLSET;
	uint32 CONFIG_PORTADIR;
	uint32 CONFIG_PORTAPDR;
	uint32 CONFIG_PORTAPSL;
	uint32 CONFIG_PORTAPULDIS;
	uint32 CONFIG_PORTBDIR;
	uint32 CONFIG_PORTBPDR;
	uint32 CONFIG_PORTBPSL;
	uint32 CONFIG_PORTBPULDIS;
}gio_config_reg_t;
void gioInit(void);
void gioSetDirection(gioPORT_t *port, uint32 dir);
void gioSetBit(gioPORT_t *port, uint32 bit, uint32 value);
void gioSetPort(gioPORT_t *port, uint32 value);
uint32 gioGetBit(gioPORT_t *port, uint32 bit);
uint32 gioGetPort(gioPORT_t *port);
void gioToggleBit(gioPORT_t *port, uint32 bit);
void gioEnableNotification(gioPORT_t *port, uint32 bit);
void gioDisableNotification(gioPORT_t *port, uint32 bit);
void gioNotification(gioPORT_t *port, uint32 bit);
void gioGetConfigValue(gio_config_reg_t *config_reg, config_value_type_t type);
typedef enum {
    SBC_REENTRANCE_NO,
    SBC_REENTRANCE_YES,
} SBC_CHECK_REENTRANCE_e;
SBC_STATE_s sbc_stateMcuSupervisor = {
    .timer = 0u,
    .stateRequest = SBC_STATE_NO_REQUEST,
    .state        = SBC_STATEMACHINE_UNINITIALIZED,
    .substate     = SBC_ENTRY,
    .lastState    = SBC_STATEMACHINE_UNINITIALIZED,
    .lastSubstate = SBC_ENTRY,
    .illegalRequestsCounter = 0u,
    .retryCounter           = 0u,
    .requestWatchdogTrigger = 0u,
    .triggerEntry           = 0u,
    .pFs85xxInstance        = &fs85xx_mcuSupervisor,
    .watchdogState          = SBC_PERIODIC_WATCHDOG_DEACTIVATED,
    .watchdogPeriod_10ms    = 10u,
};
static void SBC_SaveLastStates(SBC_STATE_s *pInstance);
static SBC_RETURN_TYPE_e SBC_CheckStateRequest(SBC_STATE_s *pInstance, SBC_STATE_REQUEST_e stateRequest);
static SBC_CHECK_REENTRANCE_e SBC_CheckReEntrance(SBC_STATE_s *pInstance);
static SBC_STATE_REQUEST_e SBC_TransferStateRequest(SBC_STATE_s *pInstance);
static _Bool SBC_TriggerWatchdogIfRequired(SBC_STATE_s *pInstance);
static void SBC_SaveLastStates(SBC_STATE_s *pInstance) {
    do { if (!(pInstance != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 149); } while (0); FAS_InfiniteLoop(); } } while (0);
    if (pInstance->lastState != pInstance->state) {
        pInstance->lastState    = pInstance->state;
        pInstance->lastSubstate = pInstance->substate;
    } else if (pInstance->lastSubstate != pInstance->substate) {
        pInstance->lastSubstate = pInstance->substate;
    } else {
        ;
    }
}
static SBC_RETURN_TYPE_e SBC_CheckStateRequest(SBC_STATE_s *pInstance, SBC_STATE_REQUEST_e stateRequest) {
    do { if (!(pInstance != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 163); } while (0); FAS_InfiniteLoop(); } } while (0);
    SBC_RETURN_TYPE_e retval = SBC_ILLEGAL_REQUEST;
    if (stateRequest == SBC_STATE_ERROR_REQUEST) {
        retval = SBC_OK;
    } else {
        if (pInstance->stateRequest == SBC_STATE_NO_REQUEST) {
            if (stateRequest == SBC_STATE_INIT_REQUEST) {
                if (pInstance->state == SBC_STATEMACHINE_UNINITIALIZED) {
                    retval = SBC_OK;
                } else {
                    retval = SBC_ALREADY_INITIALIZED;
                }
            } else {
                retval = SBC_ILLEGAL_REQUEST;
            }
        } else {
            retval = SBC_REQUEST_PENDING;
        }
    }
    return retval;
}
static SBC_CHECK_REENTRANCE_e SBC_CheckReEntrance(SBC_STATE_s *pInstance) {
    do { if (!(pInstance != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 188); } while (0); FAS_InfiniteLoop(); } } while (0);
    SBC_CHECK_REENTRANCE_e isReEntrance = SBC_REENTRANCE_NO;
    OS_EnterTaskCritical();
    if (!pInstance->triggerEntry) {
        pInstance->triggerEntry++;
    } else {
        isReEntrance = SBC_REENTRANCE_YES;
    }
    OS_ExitTaskCritical();
    return isReEntrance;
}
static SBC_STATE_REQUEST_e SBC_TransferStateRequest(SBC_STATE_s *pInstance) {
    do { if (!(pInstance != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 204); } while (0); FAS_InfiniteLoop(); } } while (0);
    SBC_STATE_REQUEST_e retval = SBC_STATE_NO_REQUEST;
    OS_EnterTaskCritical();
    retval                  = pInstance->stateRequest;
    pInstance->stateRequest = SBC_STATE_NO_REQUEST;
    OS_ExitTaskCritical();
    return (retval);
}
static _Bool SBC_TriggerWatchdogIfRequired(SBC_STATE_s *pInstance) {
    do { if (!(pInstance != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 217); } while (0); FAS_InfiniteLoop(); } } while (0);
    _Bool watchdogHasBeenTriggered = 0;
    if (pInstance->watchdogTrigger > 0u) {
        pInstance->watchdogTrigger--;
        if (pInstance->watchdogTrigger == 0u) {
            if (STD_OK != SBC_TriggerWatchdog(pInstance->pFs85xxInstance)) {
            } else {
                watchdogHasBeenTriggered = 1;
                pInstance->watchdogTrigger = pInstance->watchdogPeriod_10ms;
            }
        }
    }
    return watchdogHasBeenTriggered;
}
extern SBC_RETURN_TYPE_e SBC_SetStateRequest(SBC_STATE_s *pInstance, SBC_STATE_REQUEST_e stateRequest) {
    do { if (!(pInstance != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 239); } while (0); FAS_InfiniteLoop(); } } while (0);
    SBC_RETURN_TYPE_e retVal = SBC_ILLEGAL_REQUEST;
    OS_EnterTaskCritical();
    retVal = SBC_CheckStateRequest(pInstance, stateRequest);
    if (retVal == SBC_OK) {
        pInstance->stateRequest = stateRequest;
    }
    OS_ExitTaskCritical();
    return (retVal);
}
extern SBC_STATEMACHINE_e SBC_GetState(SBC_STATE_s *pInstance) {
    do { if (!(pInstance != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 255); } while (0); FAS_InfiniteLoop(); } } while (0);
    return pInstance->state;
}
extern void SBC_Trigger(SBC_STATE_s *pInstance) {
    do { if (!(pInstance != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 261); } while (0); FAS_InfiniteLoop(); } } while (0);
    SBC_STATE_REQUEST_e stateRequest = SBC_STATE_NO_REQUEST;
    if (SBC_CheckReEntrance(pInstance) == SBC_REENTRANCE_YES) {
        return;
    }
    if (pInstance->watchdogState == SBC_PERIODIC_WATCHDOG_ACTIVATED) {
        (void)SBC_TriggerWatchdogIfRequired(pInstance);
    }
    if (pInstance->timer > 0u) {
        if ((--pInstance->timer) > 0u) {
            pInstance->triggerEntry--;
            return;
        }
    }
    switch (pInstance->state) {
        case SBC_STATEMACHINE_UNINITIALIZED:
            stateRequest = SBC_TransferStateRequest(pInstance);
            if (stateRequest == SBC_STATE_INIT_REQUEST) {
                SBC_SaveLastStates(pInstance);
                pInstance->timer    = (1u);
                pInstance->state    = SBC_STATEMACHINE_INITIALIZATION;
                pInstance->substate = SBC_ENTRY;
            } else if (stateRequest == SBC_STATE_NO_REQUEST) {
            } else {
                pInstance->illegalRequestsCounter++;
            }
            break;
        case SBC_STATEMACHINE_INITIALIZATION:
            SBC_SaveLastStates(pInstance);
            if (pInstance->substate == SBC_ENTRY) {
                if (STD_NOT_OK == FS85_InitializeFsPhase(pInstance->pFs85xxInstance)) {
                    pInstance->retryCounter++;
                    if (pInstance->retryCounter > 3u) {
                        pInstance->retryCounter = 0u;
                        pInstance->timer        = (1u);
                        pInstance->state        = SBC_STATEMACHINE_ERROR;
                        pInstance->substate     = SBC_ENTRY;
                    }
                } else {
                    pInstance->watchdogState   = SBC_PERIODIC_WATCHDOG_ACTIVATED;
                    pInstance->watchdogTrigger = pInstance->watchdogPeriod_10ms;
                    pInstance->timer           = (1u);
                    pInstance->substate        = SBC_INIT_RESET_FAULT_ERROR_COUNTER_PART1;
                    pInstance->retryCounter    = 0u;
                }
            } else if (pInstance->substate == SBC_INIT_RESET_FAULT_ERROR_COUNTER_PART1) {
                uint8_t requiredWatchdogTrigger = 0;
                if (STD_OK != FS85_InitializeNumberOfRequiredWatchdogRefreshes(
                                  pInstance->pFs85xxInstance, &requiredWatchdogTrigger)) {
                    pInstance->retryCounter++;
                    if (pInstance->retryCounter > 3u) {
                        pInstance->retryCounter = 0;
                        pInstance->timer        = (1u);
                        pInstance->state        = SBC_STATEMACHINE_ERROR;
                        pInstance->substate     = SBC_ENTRY;
                    }
                } else {
                    pInstance->retryCounter = 0;
                    pInstance->timer        = (requiredWatchdogTrigger * pInstance->watchdogPeriod_10ms);
                    pInstance->substate     = SBC_INIT_RESET_FAULT_ERROR_COUNTER_PART2;
                }
            } else if (pInstance->substate == SBC_INIT_RESET_FAULT_ERROR_COUNTER_PART2) {
                if (STD_OK != FS85_CheckFaultErrorCounter(pInstance->pFs85xxInstance)) {
                    pInstance->retryCounter++;
                    if (pInstance->retryCounter > 3u) {
                        pInstance->retryCounter = 0;
                        pInstance->state        = SBC_STATEMACHINE_ERROR;
                        pInstance->substate     = SBC_ENTRY;
                    }
                    pInstance->timer = (1u);
                } else {
                    pInstance->substate = SBC_INITIALIZE_SAFETY_PATH_CHECK;
                    pInstance->timer    = (1u);
                }
            } else if (pInstance->substate == SBC_INITIALIZE_SAFETY_PATH_CHECK) {
                if (STD_NOT_OK == FS85_SafetyPathChecks(pInstance->pFs85xxInstance)) {
                    pInstance->retryCounter++;
                    if (pInstance->retryCounter > 3u) {
                        pInstance->retryCounter = 0;
                        pInstance->state        = SBC_STATEMACHINE_ERROR;
                        pInstance->substate     = SBC_ENTRY;
                    }
                } else {
                    pInstance->retryCounter = 0;
                    pInstance->state        = SBC_STATEMACHINE_RUNNING;
                    pInstance->substate     = SBC_ENTRY;
                }
                pInstance->timer = (1u);
            } else {
                do { if (!((0u == 1u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 376); } while (0); FAS_InfiniteLoop(); } } while (0);
            }
            break;
        case SBC_STATEMACHINE_RUNNING:
            SBC_SaveLastStates(pInstance);
            pInstance->timer = (10u);
            break;
        case SBC_STATEMACHINE_ERROR:
            SBC_SaveLastStates(pInstance);
            pInstance->timer = (10u);
            break;
        default:
            do { if (!((0u == 1u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 394); } while (0); FAS_InfiniteLoop(); } } while (0);
            break;
    }
    pInstance->triggerEntry--;
}
