typedef	signed char		__int8_t;
typedef	unsigned char		__uint8_t;
typedef	short			__int16_t;
typedef	unsigned short		__uint16_t;
typedef	int			__int32_t;
typedef	unsigned int		__uint32_t;
typedef	long long		__int64_t;
typedef	unsigned long long	__uint64_t;
typedef	__uint32_t	__clock_t;
typedef	__int32_t	__critical_t;
typedef	double		__double_t;
typedef	float		__float_t;
typedef	__int32_t	__intfptr_t;
typedef	__int64_t	__intmax_t;
typedef	__int32_t	__intptr_t;
typedef	__int32_t	__int_fast8_t;
typedef	__int32_t	__int_fast16_t;
typedef	__int32_t	__int_fast32_t;
typedef	__int64_t	__int_fast64_t;
typedef	__int8_t	__int_least8_t;
typedef	__int16_t	__int_least16_t;
typedef	__int32_t	__int_least32_t;
typedef	__int64_t	__int_least64_t;
typedef	__int32_t	__ptrdiff_t;
typedef	__int32_t	__register_t;
typedef	__int32_t	__segsz_t;
typedef	__uint32_t	__size_t;
typedef	__int32_t	__ssize_t;
typedef __uint32_t      __time_t;
typedef	__uint32_t	__uintfptr_t;
typedef	__uint64_t	__uintmax_t;
typedef	__uint32_t	__uintptr_t;
typedef	__uint32_t	__uint_fast8_t;
typedef	__uint32_t	__uint_fast16_t;
typedef	__uint32_t	__uint_fast32_t;
typedef	__uint64_t	__uint_fast64_t;
typedef	__uint8_t	__uint_least8_t;
typedef	__uint16_t	__uint_least16_t;
typedef	__uint32_t	__uint_least32_t;
typedef	__uint64_t	__uint_least64_t;
typedef	__uint32_t	__u_register_t;
typedef	__uint32_t	__vm_offset_t;
typedef	__uint32_t	__vm_paddr_t;
typedef	__uint32_t	__vm_size_t;
typedef	unsigned short ___wchar_t;
typedef long _off_t;
typedef struct __va_list_t {
    void * __ap;
} __va_list;
typedef	__int32_t	__blksize_t;
typedef	__int64_t	__blkcnt_t;
typedef	__int32_t	__clockid_t;
typedef	__uint32_t	__fflags_t;
typedef	__uint64_t	__fsblkcnt_t;
typedef	__uint64_t	__fsfilcnt_t;
typedef	__uint32_t	__gid_t;
typedef	__int64_t	__id_t;
typedef	__uint64_t	__ino_t;
typedef	long		__key_t;
typedef	__int32_t	__lwpid_t;
typedef	__uint16_t	__mode_t;
typedef	int		__accmode_t;
typedef	int		__nl_item;
typedef	__uint64_t	__nlink_t;
typedef	_off_t	        __off_t;
typedef	__int64_t	__off64_t;
typedef	__int32_t	__pid_t;
typedef	__int64_t	__rlim_t;
typedef	__uint8_t	__sa_family_t;
typedef	__uint32_t	__socklen_t;
typedef	long		__suseconds_t;
typedef	struct __timer	*__timer_t;
typedef	struct __mq	*__mqd_t;
typedef	__uint32_t	__uid_t;
typedef	unsigned int	__useconds_t;
typedef	int		__cpuwhich_t;
typedef	int		__cpulevel_t;
typedef int		__cpusetid_t;
typedef	int		__ct_rune_t;
typedef	__ct_rune_t	__rune_t;
typedef	__ct_rune_t	__wint_t;
typedef	__uint_least16_t __char16_t;
typedef	__uint_least32_t __char32_t;
typedef struct {
	long long __max_align1 ;
	long double __max_align2 ;
} __max_align_t;
typedef	__uint64_t	__dev_t;
typedef	__uint32_t	__fixpt_t;
typedef int _Mbstatet;
typedef _Mbstatet __mbstate_t;
typedef __uintmax_t     __rman_res_t;
typedef	__int8_t		int8_t;
typedef	__int16_t		int16_t;
typedef	__int32_t		int32_t;
typedef	__int64_t		int64_t;
typedef	__uint8_t		uint8_t;
typedef	__uint16_t		uint16_t;
typedef	__uint32_t		uint32_t;
typedef	__uint64_t		uint64_t;
typedef	__intptr_t		intptr_t;
typedef	__uintptr_t		uintptr_t;
typedef	__intmax_t		intmax_t;
typedef	__uintmax_t		uintmax_t;
typedef	__int_least8_t		int_least8_t;
typedef	__int_least16_t		int_least16_t;
typedef	__int_least32_t		int_least32_t;
typedef	__int_least64_t		int_least64_t;
typedef	__uint_least8_t		uint_least8_t;
typedef	__uint_least16_t	uint_least16_t;
typedef	__uint_least32_t	uint_least32_t;
typedef	__uint_least64_t	uint_least64_t;
typedef	__int_fast8_t		int_fast8_t;
typedef	__int_fast16_t		int_fast16_t;
typedef	__int_fast32_t		int_fast32_t;
typedef	__int_fast64_t		int_fast64_t;
typedef	__uint_fast8_t		uint_fast8_t;
typedef	__uint_fast16_t		uint_fast16_t;
typedef	__uint_fast32_t		uint_fast32_t;
typedef	__uint_fast64_t		uint_fast64_t;
typedef enum {
    STD_OK,
    STD_NOT_OK,
} STD_RETURN_TYPE_e;
typedef enum {
    STD_PIN_LOW,
    STD_PIN_HIGH,
    STD_PIN_UNDEFINED,
} STD_PIN_STATE_e;
extern void IO_SetPinDirectionToOutput(volatile uint32_t *pRegisterAddress, uint32_t pin);
extern void IO_SetPinDirectionToInput(volatile uint32_t *pRegisterAddress, uint32_t pin);
extern void IO_PinSet(volatile uint32_t *pRegisterAddress, uint32_t pin);
extern void IO_PinReset(volatile uint32_t *pRegisterAddress, uint32_t pin);
extern STD_PIN_STATE_e IO_PinGet(const volatile uint32_t *pRegisterAddress, uint32_t pin);
extern void FAS_DisableInterrupts(void);
typedef struct {
    uint32_t *pc;
    uint32_t line;
} FAS_ASSERT_LOCATION_s;
extern void FAS_StoreAssertLocation(uint32_t *pc, uint32_t line);
static inline void FAS_InfiniteLoop(void) {
    FAS_DisableInterrupts();
    while (1) {
    }
}
extern void MCU_Delay_us(uint32_t delay_us);
extern uint32_t MCU_GetFreeRunningCount(void);
extern uint32_t MCU_ConvertFrcDifferenceToTimespan_us(uint32_t count);
extern _Bool MCU_IsTimeElapsed(uint32_t startCounter, uint32_t timeout_us);
extern void IO_SetPinDirectionToOutput(volatile uint32_t *pRegisterAddress, uint32_t pin) {
    do { if (!(pRegisterAddress != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 78); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(pin <= (31u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 79); } while (0); FAS_InfiniteLoop(); } } while (0);
    *pRegisterAddress |= (uint32_t)((uint32_t)1u << pin);
}
extern void IO_SetPinDirectionToInput(volatile uint32_t *pRegisterAddress, uint32_t pin) {
    do { if (!(pRegisterAddress != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 85); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(pin <= (31u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 86); } while (0); FAS_InfiniteLoop(); } } while (0);
    *pRegisterAddress &= ~(uint32_t)((uint32_t)1u << pin);
}
extern void IO_PinSet(volatile uint32_t *pRegisterAddress, uint32_t pin) {
    do { if (!(pRegisterAddress != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 92); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(pin <= (31u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 93); } while (0); FAS_InfiniteLoop(); } } while (0);
    *pRegisterAddress |= (uint32_t)((uint32_t)1u << pin);
}
extern void IO_PinReset(volatile uint32_t *pRegisterAddress, uint32_t pin) {
    do { if (!(pRegisterAddress != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 99); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(pin <= (31u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 100); } while (0); FAS_InfiniteLoop(); } } while (0);
    *pRegisterAddress &= ~(uint32_t)((uint32_t)1u << pin);
}
extern STD_PIN_STATE_e IO_PinGet(const volatile uint32_t *pRegisterAddress, uint32_t pin) {
    do { if (!(pRegisterAddress != ((void *)(0u)))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 106); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(pin <= (31u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 107); } while (0); FAS_InfiniteLoop(); } } while (0);
    STD_PIN_STATE_e retval = STD_PIN_UNDEFINED;
    uint8_t pinState       = (uint8_t)((*pRegisterAddress & ((uint32_t)1u << (pin))) >> pin);
    if (pinState == 0u) {
        retval = STD_PIN_LOW;
    } else {
        retval = STD_PIN_HIGH;
    }
    return retval;
}
