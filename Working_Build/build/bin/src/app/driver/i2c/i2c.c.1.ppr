# pragma diag_push
# pragma CHECK_MISRA("-19.7")
# pragma CHECK_MISRA("-19.4")
# pragma CHECK_MISRA("-19.1")
# pragma CHECK_MISRA("-19.15")
# pragma diag_pop
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.6\")")
#pragma diag_push
#pragma CHECK_MISRA("-19.4")
#pragma diag_pop
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"none\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	signed char		__int8_t;
typedef	unsigned char		__uint8_t;
typedef	short			__int16_t;
typedef	unsigned short		__uint16_t;
typedef	int			__int32_t;
typedef	unsigned int		__uint32_t;
typedef	long long		__int64_t;
typedef	unsigned long long	__uint64_t;
typedef	__uint32_t	__clock_t;
typedef	__int32_t	__critical_t;
typedef	double		__double_t;
typedef	float		__float_t;
typedef	__int32_t	__intfptr_t;
typedef	__int64_t	__intmax_t;
typedef	__int32_t	__intptr_t;
typedef	__int32_t	__int_fast8_t;
typedef	__int32_t	__int_fast16_t;
typedef	__int32_t	__int_fast32_t;
typedef	__int64_t	__int_fast64_t;
typedef	__int8_t	__int_least8_t;
typedef	__int16_t	__int_least16_t;
typedef	__int32_t	__int_least32_t;
typedef	__int64_t	__int_least64_t;
typedef	__int32_t	__ptrdiff_t;
typedef	__int32_t	__register_t;
typedef	__int32_t	__segsz_t;
typedef	__uint32_t	__size_t;
typedef	__int32_t	__ssize_t;
typedef __uint32_t      __time_t;
typedef	__uint32_t	__uintfptr_t;
typedef	__uint64_t	__uintmax_t;
typedef	__uint32_t	__uintptr_t;
typedef	__uint32_t	__uint_fast8_t;
typedef	__uint32_t	__uint_fast16_t;
typedef	__uint32_t	__uint_fast32_t;
typedef	__uint64_t	__uint_fast64_t;
typedef	__uint8_t	__uint_least8_t;
typedef	__uint16_t	__uint_least16_t;
typedef	__uint32_t	__uint_least32_t;
typedef	__uint64_t	__uint_least64_t;
typedef	__uint32_t	__u_register_t;
typedef	__uint32_t	__vm_offset_t;
typedef	__uint32_t	__vm_paddr_t;
typedef	__uint32_t	__vm_size_t;
typedef	unsigned short ___wchar_t;
typedef long _off_t;
typedef struct __va_list_t {
    void * __ap;
} __va_list;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	__int32_t	__blksize_t;
typedef	__int64_t	__blkcnt_t;
typedef	__int32_t	__clockid_t;
typedef	__uint32_t	__fflags_t;
typedef	__uint64_t	__fsblkcnt_t;
typedef	__uint64_t	__fsfilcnt_t;
typedef	__uint32_t	__gid_t;
typedef	__int64_t	__id_t;
typedef	__uint64_t	__ino_t;
typedef	long		__key_t;
typedef	__int32_t	__lwpid_t;
typedef	__uint16_t	__mode_t;
typedef	int		__accmode_t;
typedef	int		__nl_item;
typedef	__uint64_t	__nlink_t;
typedef	_off_t	        __off_t;
typedef	__int64_t	__off64_t;
typedef	__int32_t	__pid_t;
typedef	__int64_t	__rlim_t;
typedef	__uint8_t	__sa_family_t;
typedef	__uint32_t	__socklen_t;
typedef	long		__suseconds_t;
typedef	struct __timer	*__timer_t;
typedef	struct __mq	*__mqd_t;
typedef	__uint32_t	__uid_t;
typedef	unsigned int	__useconds_t;
typedef	int		__cpuwhich_t;
typedef	int		__cpulevel_t;
typedef int		__cpusetid_t;
typedef	int		__ct_rune_t;
typedef	__ct_rune_t	__rune_t;
typedef	__ct_rune_t	__wint_t;
typedef	__uint_least16_t __char16_t;
typedef	__uint_least32_t __char32_t;
typedef struct {
	long long __max_align1 __attribute__((aligned(_Alignof(long long))));
	long double __max_align2 __attribute__((aligned(_Alignof(long double))));
} __max_align_t;
typedef	__uint64_t	__dev_t;
typedef	__uint32_t	__fixpt_t;
typedef int _Mbstatet;
typedef _Mbstatet __mbstate_t;
typedef __uintmax_t     __rman_res_t;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-19.13\")")
_Pragma("diag_pop")
typedef	__int8_t		int8_t;
typedef	__int16_t		int16_t;
typedef	__int32_t		int32_t;
typedef	__int64_t		int64_t;
typedef	__uint8_t		uint8_t;
typedef	__uint16_t		uint16_t;
typedef	__uint32_t		uint32_t;
typedef	__uint64_t		uint64_t;
typedef	__intptr_t		intptr_t;
typedef	__uintptr_t		uintptr_t;
typedef	__intmax_t		intmax_t;
typedef	__uintmax_t		uintmax_t;
typedef	__int_least8_t		int_least8_t;
typedef	__int_least16_t		int_least16_t;
typedef	__int_least32_t		int_least32_t;
typedef	__int_least64_t		int_least64_t;
typedef	__uint_least8_t		uint_least8_t;
typedef	__uint_least16_t	uint_least16_t;
typedef	__uint_least32_t	uint_least32_t;
typedef	__uint_least64_t	uint_least64_t;
typedef	__int_fast8_t		int_fast8_t;
typedef	__int_fast16_t		int_fast16_t;
typedef	__int_fast32_t		int_fast32_t;
typedef	__int_fast64_t		int_fast64_t;
typedef	__uint_fast8_t		uint_fast8_t;
typedef	__uint_fast16_t		uint_fast16_t;
typedef	__uint_fast32_t		uint_fast32_t;
typedef	__uint_fast64_t		uint_fast64_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-10.1\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.11\")")
_Pragma("diag_pop")
typedef uint64_t uint64;
typedef uint32_t uint32;
typedef uint16_t uint16;
typedef uint8_t uint8;
typedef _Bool boolean;
typedef int64_t sint64;
typedef int32_t sint32;
typedef int16_t sint16;
typedef int8_t sint8;
typedef float float32;
typedef double float64;
typedef uint8 Std_ReturnType;
typedef struct
{
    uint16 vendorID;
    uint16 moduleID;
    uint8  instanceID;
    uint8  sw_major_version;
    uint8  sw_minor_version;
    uint8  sw_patch_version;
} Std_VersionInfoType;
  typedef unsigned char StatusType;
typedef boolean tBoolean;
typedef enum loopBackType
{
    Digital_Lbk = 0U,
    Analog_Lbk = 1U
}loopBackType_t;
typedef enum config_value_type
{
	InitialValue,
	CurrentValue
}config_value_type_t;
typedef volatile struct gioBase
{
    uint32 GCR0;
    uint32   rsvd;
    uint32 INTDET;
    uint32 POL;
    uint32 ENASET;
    uint32 ENACLR;
    uint32 LVLSET;
    uint32 LVLCLR;
    uint32 FLG;
    uint32 OFF1;
    uint32 OFF2;
    uint32 EMU1;
	uint32 EMU2;
} gioBASE_t;
typedef volatile struct gioPort
{
    uint32 DIR;
    uint32 DIN;
    uint32 DOUT;
    uint32 DSET;
    uint32 DCLR;
    uint32 PDR;
    uint32 PULDIS;
    uint32 PSL;
} gioPORT_t;
typedef volatile struct i2cBase
{
    uint32 OAR;
    uint32 IMR;
    uint32 STR;
    uint32 CKL;
    uint32 CKH;
    uint32 CNT;
    uint32 DRR;
    uint32 SAR;
    uint32 DXR;
    uint32 MDR;
    uint32 IVR;
    uint32 EMDR;
    uint32 PSC;
    uint32 PID11;
    uint32 PID12;
    uint32 DMACR;
    uint32 rsvd7;
    uint32 rsvd8;
    uint32 PFNC;
    uint32 DIR;
    uint32 DIN;
    uint32 DOUT;
    uint32 SET;
    uint32 CLR;
    uint32 PDR;
    uint32 PDIS;
    uint32 PSEL;
    uint32 PSRS;
} i2cBASE_t;
enum i2cMode
{
    I2C_FD_FORMAT   = 0x0008U,
    I2C_START_BYTE  = 0x0010U,
    I2C_RESET_OUT   = 0x0020U,  I2C_RESET_IN   = 0x0000U,
    I2C_DLOOPBACK   = 0x0040U,
    I2C_REPEATMODE  = 0x0080U,
    I2C_10BIT_AMODE = 0x0100U,  I2C_7BIT_AMODE = 0x0000U,
    I2C_TRANSMITTER = 0x0200U,  I2C_RECEIVER   = 0x0000U,
    I2C_MASTER      = 0x0400U,  I2C_SLAVE      = 0x0000U,
    I2C_STOP_COND   = 0x0800U,
    I2C_START_COND  = 0x2000U,
    I2C_FREE_RUN    = 0x4000U,
    I2C_NACK_MODE   = 0x8000U
};
enum i2cBitCount
{
    I2C_2_BIT   = 0x2U,
    I2C_3_BIT   = 0x3U,
    I2C_4_BIT   = 0x4U,
    I2C_5_BIT   = 0x5U,
    I2C_6_BIT   = 0x6U,
    I2C_7_BIT   = 0x7U,
    I2C_8_BIT   = 0x0U
};
enum i2cIntFlags
{
    I2C_AL_INT     = 0x0001U,
    I2C_NACK_INT   = 0x0002U,
    I2C_ARDY_INT   = 0x0004U,
    I2C_RX_INT     = 0x0008U,
    I2C_TX_INT     = 0x0010U,
    I2C_SCD_INT    = 0x0020U,
    I2C_AAS_INT    = 0x0040U
};
enum i2cStatFlags
{
    I2C_AL         = 0x0001U,
    I2C_NACK       = 0x0002U,
    I2C_ARDY       = 0x0004U,
    I2C_RX         = 0x0008U,
    I2C_TX         = 0x0010U,
    I2C_SCD        = 0x0020U,
    I2C_AD0        = 0x0100U,
    I2C_AAS        = 0x0200U,
    I2C_XSMT       = 0x0400U,
    I2C_RXFULL     = 0x0800U,
    I2C_BUSBUSY    = 0x1000U,
    I2C_NACKSNT    = 0x2000U,
    I2C_SDIR       = 0x4000U
};
enum i2cDMA
{
    I2C_TXDMA   = 0x20U,
    I2C_RXDMA   = 0x10U
};
typedef struct i2c_config_reg
{
    uint32 CONFIG_OAR;
    uint32 CONFIG_IMR;
    uint32 CONFIG_CLKL;
    uint32 CONFIG_CLKH;
    uint32 CONFIG_CNT;
    uint32 CONFIG_SAR;
    uint32 CONFIG_MDR;
    uint32 CONFIG_EMDR;
    uint32 CONFIG_PSC;
    uint32 CONFIG_DMAC;
    uint32 CONFIG_FUN;
    uint32 CONFIG_DIR;
    uint32 CONFIG_ODR;
    uint32 CONFIG_PD;
    uint32 CONFIG_PSL;
} i2c_config_reg_t;
void i2cInit(void);
void i2cSetOwnAdd(i2cBASE_t *i2c, uint32 oadd);
void i2cSetSlaveAdd(i2cBASE_t *i2c, uint32 sadd);
void i2cSetBaudrate(i2cBASE_t *i2c, uint32 baud);
uint32  i2cIsTxReady(i2cBASE_t *i2c);
void i2cSendByte(i2cBASE_t *i2c, uint8 byte);
void i2cSend(i2cBASE_t *i2c, uint32 length, uint8 * data);
uint32  i2cIsRxReady(i2cBASE_t *i2c);
uint32  i2cIsStopDetected(i2cBASE_t *i2c);
void i2cClearSCD(i2cBASE_t *i2c);
uint32  i2cRxError(i2cBASE_t *i2c);
uint8   i2cReceiveByte(i2cBASE_t *i2c);
void i2cReceive(i2cBASE_t *i2c, uint32 length, uint8 * data);
void i2cEnableNotification(i2cBASE_t *i2c, uint32 flags);
void i2cDisableNotification(i2cBASE_t *i2c, uint32 flags);
void i2cSetStart(i2cBASE_t *i2c);
void i2cSetStop(i2cBASE_t *i2c);
void i2cSetCount(i2cBASE_t *i2c ,uint32 cnt);
void i2cEnableLoopback(i2cBASE_t *i2c);
void i2cDisableLoopback(i2cBASE_t *i2c);
void i2cSetMode(i2cBASE_t *i2c, uint32 mode);
void i2cSetDirection(i2cBASE_t *i2c, uint32 dir);
_Bool i2cIsMasterReady(i2cBASE_t *i2c);
_Bool i2cIsBusBusy(i2cBASE_t *i2c);
void i2c1GetConfigValue(i2c_config_reg_t *config_reg, config_value_type_t type);
void i2cNotification(i2cBASE_t *i2c, uint32 flags);
typedef enum {
    STD_OK,
    STD_NOT_OK,
} STD_RETURN_TYPE_e;
typedef enum {
    STD_PIN_LOW,
    STD_PIN_HIGH,
    STD_PIN_UNDEFINED,
} STD_PIN_STATE_e;
extern uint8_t i2c_rxLastByteInterface1;
extern uint8_t i2c_rxLastByteInterface2;
extern void I2C_Initialize(void);
extern STD_RETURN_TYPE_e I2C_Read(i2cBASE_t *pI2cInterface, uint32_t slaveAddress, uint32_t nrBytes, uint8_t *readData);
extern STD_RETURN_TYPE_e I2C_Write(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytes,
    uint8_t *writeData);
extern STD_RETURN_TYPE_e I2C_WriteRead(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytesWrite,
    uint8_t *writeData,
    uint32_t nrBytesRead,
    uint8_t *readData);
extern STD_RETURN_TYPE_e I2C_ReadDma(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytes,
    uint8_t *readData);
extern STD_RETURN_TYPE_e I2C_WriteDma(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytes,
    uint8_t *writeData);
extern STD_RETURN_TYPE_e I2C_WriteReadDma(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytesWrite,
    uint8_t *writeData,
    uint32_t nrBytesRead,
    uint8_t *readData);
extern uint8_t I2C_ReadLastRxByte(i2cBASE_t *pI2cInterface);
extern _Bool I2C_WaitReceive(i2cBASE_t *pI2cInterface, uint32_t timeout_us);
typedef volatile struct systemBase1
{
    uint32 SYSPC1;
    uint32 SYSPC2;
    uint32 SYSPC3;
    uint32 SYSPC4;
    uint32 SYSPC5;
    uint32 SYSPC6;
    uint32 SYSPC7;
    uint32 SYSPC8;
    uint32 SYSPC9;
    uint32 rsvd1;
    uint32 rsvd2;
    uint32 rsvd3;
    uint32 CSDIS;
    uint32 CSDISSET;
    uint32 CSDISCLR;
    uint32 CDDIS;
    uint32 CDDISSET;
    uint32 CDDISCLR;
    uint32 GHVSRC;
    uint32 VCLKASRC;
    uint32 RCLKSRC;
    uint32 CSVSTAT;
    uint32 MSTGCR;
    uint32 MINITGCR;
    uint32 MSINENA;
    uint32 MSTFAIL;
    uint32 MSTCGSTAT;
    uint32 MINISTAT;
    uint32 PLLCTL1;
    uint32 PLLCTL2;
    uint32 SYSPC10;
    uint32 DIEIDL;
    uint32 DIEIDH;
    uint32 rsvd4;
    uint32 LPOMONCTL;
    uint32 CLKTEST;
    uint32 DFTCTRLREG1;
    uint32 DFTCTRLREG2;
    uint32 rsvd5;
    uint32 rsvd6;
    uint32 GPREG1;
    uint32 rsvd7;
    uint32 rsvd8;
    uint32 rsvd9;
    uint32 SSIR1;
    uint32 SSIR2;
    uint32 SSIR3;
    uint32 SSIR4;
    uint32 RAMGCR;
    uint32 BMMCR1;
    uint32 rsvd10;
    uint32 CPURSTCR;
    uint32 CLKCNTL;
    uint32 ECPCNTL;
    uint32 rsvd11;
    uint32 DEVCR1;
    uint32 SYSECR;
    uint32 SYSESR;
    uint32 SYSTASR;
    uint32 GBLSTAT;
    uint32 DEVID;
    uint32 SSIVEC;
    uint32 SSIF;
} systemBASE1_t;
typedef volatile struct systemBase2
{
    uint32 PLLCTL3;
    uint32 rsvd1;
    uint32 STCCLKDIV;
    uint32 rsvd2[6U];
    uint32 ECPCNTL;
    uint32 ECPCNTL1;
    uint32 rsvd3[4U];
    uint32 CLK2CNTRL;
    uint32 VCLKACON1;
    uint32 rsvd4[4U];
    uint32 HCLKCNTL;
    uint32 rsvd5[6U];
    uint32 CLKSLIP;
    uint32 rsvd6;
	uint32 IP1ECCERREN;
	uint32 rsvd7[28U];
    uint32 EFC_CTLEN;
    uint32 DIEIDL_REG0;
    uint32 DIEIDH_REG1;
    uint32 DIEIDL_REG2;
    uint32 DIEIDH_REG3;
} systemBASE2_t;
typedef volatile struct flashWBase
{
    uint32 FRDCNTL;
    uint32 rsvd1;
    uint32 EE_FEDACCTRL1;
    uint32 rsvd2;
    uint32 rsvd3;
    uint32 FEDAC_PASTATUS;
    uint32 FEDAC_PBSTATUS;
    uint32 FEDAC_GBLSTATUS;
    uint32 rsvd4;
    uint32 FEDACSDIS;
    uint32 FPRIM_ADD_TAG;
    uint32 FDUP_ADD_TAG;
    uint32 FBPROT;
    uint32 FBSE;
    uint32 FBBUSY;
    uint32 FBAC;
    uint32 FBPWRMODE;
    uint32 FBPRDY;
    uint32 FPAC1;
    uint32 rsvd5;
    uint32 FMAC;
    uint32 FMSTAT;
    uint32 FEMU_DMSW;
    uint32 FEMU_DLSW;
    uint32 FEMU_ECC;
    uint32 FLOCK;
    uint32 rsvd6;
    uint32 FDIAGCTRL;
    uint32 rsvd7;
    uint32 FRAW_ADDR;
    uint32 rsvd8;
    uint32 FPAR_OVR;
    uint32 rsvd9[13U];
    uint32 RCR_VALID;
    uint32 ACC_THRESHOLD;
    uint32 rsvd10;
    uint32 FEDACSDIS2;
    uint32 rsvd11;
    uint32 rsvd12;
    uint32 rsvd13;
    uint32 RCR_VALUE0;
    uint32 RCR_VALUE1;
    uint32 rsvd14[108U];
    uint32 FSM_WR_ENA;
    uint32 rsvd15[11U];
    uint32 EEPROM_CONFIG;
    uint32 rsvd16;
    uint32 FSM_SECTOR1;
    uint32 FSM_SECTOR2;
    uint32 rsvd17[78U];
    uint32 FCFG_BANK;
} flashWBASE_t;
typedef volatile struct l2ramwBase
{
    uint32 RAMCTRL;
    uint32 rsvd1[3];
    uint32 RAMERRSTATUS;
    uint32 rsvd2[4];
    uint32 DIAGDATAVECTOR_H;
    uint32 DIAGDATAVECTOR_L;
    uint32 DIAG_ECC;
    uint32 RAMTEST;
    uint32 rsvd3;
    uint32 RAMADDRDECVECT;
    uint32 MEMINITDOMAIN;
    uint32 rsvd4;
    uint32 BANKDOMAINMAP0;
    uint32 BANKDOMAINMAP1;
} l2ramwBASE_t;
typedef volatile struct ccmr5Base
{
    uint32 CCMSR1;
    uint32 CCMKEYR1;
    uint32 CCMSR2;
    uint32 CCMKEYR2;
    uint32 CCMSR3;
    uint32 CCMKEYR3;
    uint32 CCMPOLCNTRL;
    uint32 CCMSR4;
    uint32 CCMKEYR4;
    uint32 CCMPDSTAT0;
} ccmr5BASE_t;
void _coreInitRegisters_(void);
void _coreInitStackPointer_(void);
uint32 _getCPSRValue_(void);
void _checkMemInitOn_(void);
void _gotoCPUIdle_(void);
void _coreEnableIrqVicOffset_(void);
void _coreEnableVfp_(void);
void _coreEnableEventBusExport_(void);
void _coreDisableEventBusExport_(void);
uint32 _coreGetDataFault_(void);
void _coreClearDataFault_(void);
uint32 _coreGetInstructionFault_(void);
void _coreClearInstructionFault_(void);
uint32 _coreGetDataFaultAddress_(void);
void _coreClearDataFaultAddress_(void);
uint32 _coreGetInstructionFaultAddress_(void);
void _coreClearInstructionFaultAddress_(void);
uint32 _coreGetAuxiliaryDataFault_(void);
void _coreClearAuxiliaryDataFault_(void);
uint32 _coreGetAuxiliaryInstructionFault_(void);
void _coreClearAuxiliaryInstructionFault_(void);
void _disable_IRQ_interrupt_(void);
void _enable_IRQ_interrupt_(void);
void _enable_interrupt_(void);
void _esmCcmErrorsClear_(void);
void _memInit_(void);
void _cacheEnable_(void);
void _cacheDisable_(void);
void _dCacheInvalidate_(void);
void _iCacheInvalidate_(void);
enum systemClockSource
{
    SYS_OSC             = 0x0U,
    SYS_PLL1            = 0x1U,
    SYS_EXTERNAL1       = 0x3U,
    SYS_LPO_LOW         = 0x4U,
    SYS_LPO_HIGH        = 0x5U,
    SYS_PLL2            = 0x6U,
    SYS_EXTERNAL2       = 0x7U,
    SYS_VCLK            = 0x9U,
    SYS_PLL2_ODCLK_8    = 0xEU,
    SYS_PLL2_ODCLK_16   = 0xFU
};
typedef enum
{
    POWERON_RESET       = 0x8000U,
    OSC_FAILURE_RESET   = 0x4000U,
    WATCHDOG_RESET      = 0x2000U,
    WATCHDOG2_RESET     = 0x1000U,
    DEBUG_RESET         = 0x0800U,
    INTERCONNECT_RESET  = 0x0080U,
    CPU0_RESET          = 0x0020U,
    SW_RESET            = 0x0010U,
    EXT_RESET           = 0x0008U,
    NO_RESET            = 0x0000U
}resetSource_t;
typedef struct system_config_reg
{
    uint32 CONFIG_SYSPC1;
    uint32 CONFIG_SYSPC2;
    uint32 CONFIG_SYSPC7;
    uint32 CONFIG_SYSPC8;
    uint32 CONFIG_SYSPC9;
    uint32 CONFIG_CSDIS;
    uint32 CONFIG_CDDIS;
    uint32 CONFIG_GHVSRC;
    uint32 CONFIG_VCLKASRC;
    uint32 CONFIG_RCLKSRC;
    uint32 CONFIG_MSTGCR;
    uint32 CONFIG_MINITGCR;
    uint32 CONFIG_MSINENA;
    uint32 CONFIG_PLLCTL1;
    uint32 CONFIG_PLLCTL2;
    uint32 CONFIG_SYSPC10;
    uint32 CONFIG_LPOMONCTL;
    uint32 CONFIG_CLKTEST;
    uint32 CONFIG_DFTCTRLREG1;
    uint32 CONFIG_DFTCTRLREG2;
    uint32 CONFIG_GPREG1;
    uint32 CONFIG_RAMGCR;
    uint32 CONFIG_BMMCR1;
    uint32 CONFIG_CLKCNTL;
    uint32 CONFIG_ECPCNTL;
    uint32 CONFIG_DEVCR1;
    uint32 CONFIG_SYSECR;
    uint32 CONFIG_PLLCTL3;
    uint32 CONFIG_STCCLKDIV;
	uint32 CONFIG_ECPCNTL1;
    uint32 CONFIG_CLK2CNTRL;
    uint32 CONFIG_VCLKACON1;
	uint32 CONFIG_HCLKCNTL;
    uint32 CONFIG_CLKSLIP;
    uint32 CONFIG_EFC_CTLEN;
} system_config_reg_t;
void systemGetConfigValue(system_config_reg_t *config_reg, config_value_type_t type);
enum flashWPowerModes
{
    SYS_SLEEP   = 0U,
    SYS_STANDBY = 1U,
    SYS_ACTIVE  = 3U
};
void setupPLL(void);
void trimLPO(void);
void customTrimLPO(void);
void setupFlash(void);
void periphInit(void);
void mapClocks(void);
void systemInit(void);
void systemPowerDown(uint32 mode);
resetSource_t getResetSource(void);
#pragma SWI_ALIAS(FAS_DisableInterrupts, 5)
extern void FAS_DisableInterrupts(void);
typedef struct {
    uint32_t *pc;
    uint32_t line;
} FAS_ASSERT_LOCATION_s;
extern void FAS_StoreAssertLocation(uint32_t *pc, uint32_t line);
static inline void FAS_InfiniteLoop(void) {
    FAS_DisableInterrupts();
    while (1) {
    }
}
_Static_assert(0 == 0, "false seems to have been modified.");
_Static_assert(1 != 0, "true seems to have been modified.");
_Static_assert(1 == 1, "true seems to have been modified.");
_Static_assert(STD_OK == 0, "STD_OK seems to have been modified.");
_Static_assert(STD_OK != STD_NOT_OK, "STD_OK or STD_NOT_OK seem to have been modified.");
_Static_assert(STD_NOT_OK == 1, "STD_NOT_OK seems to have been modified.");
typedef enum {
    BS_STRING_WITH_PRECHARGE,
    BS_STRING_WITHOUT_PRECHARGE,
} BS_STRING_PRECHARGE_PRESENT_e;
typedef enum {
    BS_STRING0    = 0u,
    BS_STRING1    = 1u,
    BS_STRING2    = 2u,
    BS_STRING_MAX = 3u,
} BS_STRING_ID_e;
_Static_assert(((1u) <= (uint8_t)0xff), "This code assumes BS_NR_OF_STRINGS fits into uint8_t");
extern BS_STRING_PRECHARGE_PRESENT_e bs_stringsWithPrecharge[(1u)];
extern void MCU_Delay_us(uint32_t delay_us);
extern uint32_t MCU_GetFreeRunningCount(void);
extern uint32_t MCU_ConvertFrcDifferenceToTimespan_us(uint32_t count);
extern _Bool MCU_IsTimeElapsed(uint32_t startCounter, uint32_t timeout_us);
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
_Pragma("CHECK_MISRA(\"-12.7\")")
_Pragma("CHECK_MISRA(\"-16.4\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-19.10\")")
_Pragma("CHECK_MISRA(\"-20.1\")")
_Pragma("CHECK_MISRA(\"-20.2\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
_Pragma("CHECK_MISRA(\"-8.1\")")
_Pragma("CHECK_MISRA(\"-8.5\")")
_Pragma("CHECK_MISRA(\"-8.11\")")
_Pragma("CHECK_MISRA(\"-10.1\")")
_Pragma("CHECK_MISRA(\"-10.3\")")
_Pragma("CHECK_MISRA(\"-12.1\")")
_Pragma("CHECK_MISRA(\"-12.2\")")
_Pragma("CHECK_MISRA(\"-12.4\")")
_Pragma("CHECK_MISRA(\"-12.7\")")
_Pragma("CHECK_MISRA(\"-14.7\")")
_Pragma("CHECK_MISRA(\"-14.9\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.6\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_suppress 1558")
_Pragma("diag_suppress 3195")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
 __inline int __isfinite(double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0; }
 __inline int __isfinitef(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) == 0; }
 __inline int __isfinitel(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0; }
 __inline int __isnan(double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) &&
        ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)) == 0); }
 __inline int __isnanf(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) &&
        (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)) == 0); }
 __inline int __isnanl(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) &&
        ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)) == 0); }
 __inline int __isnormal(double d)
{ return (((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0); }
 __inline int __isnormalf(float f)
{ return ((((((unsigned int)((_ftoi(f)) >> (24-1))) & ((128u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) == 0); }
 __inline int __isnormall(long double e)
{ return (((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0); }
 __inline int __signbit(double d)
{ return (((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & ((__uint64_t)(1) << (64-1))) == 0)) == 0; }
 __inline int __signbitf(float f)
{ return ((((_ftoi(f)) & ((__uint32_t)(1) << (32-1))) == 0)) == 0; }
 __inline int __signbitl(long double e)
{ return (((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & ((__uint64_t)(1) << (64-1))) == 0)) == 0; }
 __inline int __isinff(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) && ((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)); }
 __inline int __isinf (double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) && (((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)); }
 __inline int __isinfl(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) && (((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)); }
 __inline int __fpclassifyf(float f)
{
    if ((((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)))
    {
        if (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if ((((((unsigned int)((_ftoi(f)) >> (24-1))) & ((128u * 2) - 1)) == 0)))
    {
        if (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
 __inline int __fpclassify (double d)
{
    if ((((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)))
    {
        if ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if (((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)))
    {
        if ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
 __inline int __fpclassifyl(long double e)
{
    if ((((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)))
    {
        if ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if (((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)))
    {
        if ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
_Pragma("diag_pop")
typedef	double	double_t;
typedef	float	float_t;
 double      acos(double x);
 float       acosf(float x);
 long double acosl(long double x);
 double      asin(double x);
 float       asinf(float x);
 long double asinl(long double x);
 double      atan(double x);
 float       atanf(float x);
 long double atanl(long double x);
 double      atan2(double y, double x);
 float       atan2f(float y, float x);
 long double atan2l(long double y, long double x);
 double      cos(double x);
 float       cosf(float x);
 long double cosl(long double x);
 double      sin(double x);
 float       sinf(float x);
 long double sinl(long double x);
 double      tan(double x);
 float       tanf(float x);
 long double tanl(long double x);
 double      acosh(double x);
 float       acoshf(float x);
 long double acoshl(long double x);
 double      asinh(double x);
 float       asinhf(float x);
 long double asinhl(long double x);
 double      atanh(double x);
 float       atanhf(float x);
 long double atanhl(long double x);
 double      cosh(double x);
 float       coshf(float x);
 long double coshl(long double x);
 double      sinh(double x);
 float       sinhf(float x);
 long double sinhl(long double x);
 double      tanh(double x);
 float       tanhf(float x);
 long double tanhl(long double x);
 double      exp(double x);
 float       expf(float x);
 long double expl(long double x);
 double      exp2(double x);
 float       exp2f(float x);
 long double exp2l(long double x);
 double      expm1(double x);
 float       expm1f(float x);
 long double expm1l(long double x);
 double      frexp(double val, int *e);
 float       frexpf(float val, int *e);
 long double frexpl(long double val, int *e);
 int         ilogb(double x);
 int         ilogbf(float x);
 int         ilogbl(long double x);
 double      ldexp(double x, int e);
 float       ldexpf(float x, int e);
 long double ldexpl(long double x, int e);
 double      log(double x);
 float       logf(float x);
 long double logl(long double x);
 double      log10(double x);
 float       log10f(float x);
 long double log10l(long double x);
 double      log1p(double x);
 float       log1pf(float x);
 long double log1pl(long double x);
 double      log2(double x);
 float       log2f(float x);
 long double log2l(long double x);
 double      logb(double x);
 float       logbf(float x);
 long double logbl(long double x);
 double      modf(double val, double *iptr);
 float       modff(float val, float *iptr);
 long double modfl(long double val, long double *iptr);
 double      scalbn(double x, int n);
 float       scalbnf(float x, int n);
 long double scalbnl(long double x, int n);
 double      scalbln(double x, long n);
 float       scalblnf(float x, long n);
 long double scalblnl(long double x, long n);
 double      cbrt(double x);
 float       cbrtf(float x);
 long double cbrtl(long double x);
 double      fabs(double x);
 float       fabsf(float x);
 long double fabsl(long double x);
 double      hypot(double x, double y);
 float       hypotf(float x, float y);
 long double hypotl(long double x, long double y);
 double      pow(double x, double y);
 float       powf(float x, float y);
 long double powl(long double x, long double y);
 double      sqrt(double x);
 float       sqrtf(float x);
 long double sqrtl(long double x);
 double      erf(double x);
 float       erff(float x);
 long double erfl(long double x);
 double      erfc(double x);
 float       erfcf(float x);
 long double erfcl(long double x);
 double      lgamma(double x);
 float       lgammaf(float x);
 long double lgammal(long double x);
 double      tgamma(double x);
 float       tgammaf(float x);
 long double tgammal(long double x);
 double      ceil(double x);
 float       ceilf(float x);
 long double ceill(long double x);
 double      floor(double x);
 float       floorf(float x);
 long double floorl(long double x);
 double      nearbyint(double x);
 float       nearbyintf(float x);
 long double nearbyintl(long double x);
 double      rint(double x);
 float       rintf(float x);
 long double rintl(long double x);
 long        lrint(double x);
 long        lrintf(float x);
 long        lrintl(long double x);
 long long   llrint(double x);
 long long   llrintf(float x);
 long long   llrintl(long double x);
 double      round(double x);
 float       roundf(float x);
 long double roundl(long double x);
 long        lround(double x);
 long        lroundf(float x);
 long        lroundl(long double x);
 long long   llround(double x);
 long long   llroundf(float x);
 long long   llroundl(long double x);
 double      trunc(double x);
 float       truncf(float x);
 long double truncl(long double x);
 double      fmod(double x, double y);
 float       fmodf(float x, float y);
 long double fmodl(long double x, long double y);
 double      remainder(double x, double y);
 float       remainderf(float x, float y);
 long double remainderl(long double x, long double y);
 double      remquo(double x, double y, int *quo);
 float       remquof(float x, float y, int *quo);
 long double remquol(long double x, long double y, int *quo);
 double      copysign(double x, double y);
 float       copysignf(float x, float y);
 long double copysignl(long double x, long double y);
 double      nan(const char *tagp);
 float       nanf(const char *tagp);
 long double nanl(const char *tagp);
 double      nextafter(double x, double y);
 float       nextafterf(float x, float y);
 long double nextafterl(long double x, long double y);
 double      nexttoward(double x, long double y);
 float       nexttowardf(float x, long double y);
 long double nexttowardl(long double x, long double y);
 double      fdim(double x, double y);
 float       fdimf(float x, float y);
 long double fdiml(long double x, long double y);
 double      fmax(double x, double y);
 float       fmaxf(float x, float y);
 long double fmaxl(long double x, long double y);
 double      fmin(double x, double y);
 float       fminf(float x, float y);
 long double fminl(long double x, long double y);
 double      fma(double x, double y, double z);
 float       fmaf(float x, float y, float z);
 long double fmal(long double x, long double y, long double z);
_Pragma("diag_pop")
typedef struct {
    void *pDatabaseEntry;
    uint32_t dataLength;
} DATA_BASE_s;
typedef enum {
    DATA_BLOCK_ID_CELL_VOLTAGE,
    DATA_BLOCK_ID_CELL_TEMPERATURE,
    DATA_BLOCK_ID_MIN_MAX,
    DATA_BLOCK_ID_CURRENT_SENSOR,
    DATA_BLOCK_ID_BALANCING_CONTROL,
    DATA_BLOCK_ID_SLAVE_CONTROL,
    DATA_BLOCK_ID_BALANCING_FEEDBACK_BASE,
    DATA_BLOCK_ID_USER_MUX,
    DATA_BLOCK_ID_OPEN_WIRE_BASE,
    DATA_BLOCK_ID_ALL_GPIO_VOLTAGES_BASE,
    DATA_BLOCK_ID_ERROR_STATE,
    DATA_BLOCK_ID_CONTACTOR_FEEDBACK,
    DATA_BLOCK_ID_INTERLOCK_FEEDBACK,
    DATA_BLOCK_ID_SOF,
    DATA_BLOCK_ID_SYSTEM_STATE,
    DATA_BLOCK_ID_MSL_FLAG,
    DATA_BLOCK_ID_RSL_FLAG,
    DATA_BLOCK_ID_MOL_FLAG,
    DATA_BLOCK_ID_SOX,
    DATA_BLOCK_ID_STATE_REQUEST,
    DATA_BLOCK_ID_MOVING_AVERAGE,
    DATA_BLOCK_ID_CELL_VOLTAGE_BASE,
    DATA_BLOCK_ID_CELL_TEMPERATURE_BASE,
    DATA_BLOCK_ID_CELL_VOLTAGE_REDUNDANCY0,
    DATA_BLOCK_ID_CELL_TEMPERATURE_REDUNDANCY0,
    DATA_BLOCK_ID_BALANCING_FEEDBACK_REDUNDANCY0,
    DATA_BLOCK_ID_ALL_GPIO_VOLTAGES_REDUNDANCY0,
    DATA_BLOCK_ID_OPEN_WIRE_REDUNDANCY0,
    DATA_BLOCK_ID_INSULATION_MONITORING,
    DATA_BLOCK_ID_PACK_VALUES,
    DATA_BLOCK_ID_HTSEN,
    DATA_BLOCK_ID_ADC_VOLTAGE,
    DATA_BLOCK_ID_DUMMY_FOR_SELF_TEST,
    DATA_BLOCK_ID_MAX,
} DATA_BLOCK_ID_e;
_Static_assert((int16_t)DATA_BLOCK_ID_MAX < 0xff, "Maximum number of database entries exceeds UINT8_MAX; adapted length " "checking in DATA_Initialize and DATA_IterateOverDatabaseEntries");
typedef struct {
    DATA_BLOCK_ID_e uniqueId;
    uint32_t timestamp;
    uint32_t previousTimestamp;
} DATA_BLOCK_HEADER_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t state;
    int32_t packVoltage_mV[(1u)];
    int16_t cellVoltage_mV[(1u)][((3u) * (16u))];
    uint64_t
        invalidCellVoltage[(1u)]
                          [(3u)];
    uint16_t nrValidCellVoltages[(1u)];
    uint32_t moduleVoltage_mV[(1u)][(3u)];
    _Bool validModuleVoltage[(1u)][(3u)];
} DATA_BLOCK_CELL_VOLTAGE_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t state;
    int16_t cellTemperature_ddegC[(1u)][((3u) * (8u))];
    uint16_t invalidCellTemperature
        [(1u)][(3u)];
    uint16_t nrValidTemperatures[(1u)];
} DATA_BLOCK_CELL_TEMPERATURE_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    int16_t averageCellVoltage_mV[(1u)];
    int16_t minimumCellVoltage_mV[(1u)];
    int16_t previousMinimumCellVoltage_mV[(1u)];
    int16_t maximumCellVoltage_mV[(1u)];
    int16_t previousMaximumCellVoltage_mV[(1u)];
    uint16_t nrModuleMinimumCellVoltage[(1u)];
    uint16_t nrCellMinimumCellVoltage[(1u)];
    uint16_t nrModuleMaximumCellVoltage[(1u)];
    uint16_t nrCellMaximumCellVoltage[(1u)];
    uint16_t validMeasuredCellVoltages[(1u)];
    float_t averageTemperature_ddegC[(1u)];
    int16_t minimumTemperature_ddegC[(1u)];
    uint16_t nrModuleMinimumTemperature[(1u)];
    uint16_t nrSensorMinimumTemperature[(1u)];
    int16_t maximumTemperature_ddegC[(1u)];
    uint16_t nrModuleMaximumTemperature[(1u)];
    uint16_t nrSensorMaximumTemperature[(1u)];
    uint16_t validMeasuredCellTemperatures[(1u)];
    uint8_t state;
} DATA_BLOCK_MIN_MAX_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    int32_t packCurrent_mA;
    uint8_t invalidPackCurrent;
    int32_t batteryVoltage_mV;
    uint8_t invalidBatteryVoltage;
    int32_t
        highVoltageBusVoltage_mV;
    uint8_t invalidHvBusVoltage;
    int32_t packPower_W;
    uint8_t invalidPackPower;
    int32_t stringVoltage_mV[(1u)];
    uint8_t invalidStringVoltage[(1u)];
    int32_t stringCurrent_mA[(1u)];
    uint8_t invalidStringCurrent[(1u)];
    int32_t stringPower_W[(1u)];
    uint8_t invalidStringPower[(1u)];
} DATA_BLOCK_PACK_VALUES_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    int32_t current_mA[(1u)];
    uint8_t invalidCurrentMeasurement[(1u)];
    uint8_t newCurrent;
    uint32_t previousTimestampCurrent[(1u)];
    uint32_t timestampCurrent[(1u)];
    int32_t sensorTemperature_ddegC[(1u)];
    uint8_t invalidSensorTemperatureMeasurement[(1u)];
    int32_t power_W[(1u)];
    uint8_t invalidPowerMeasurement[(1u)];
    uint8_t newPower;
    uint32_t previousTimestampPower[(1u)];
    uint32_t timestampPower[(1u)];
    int32_t currentCounter_As[(1u)];
    uint8_t invalidCurrentCountingMeasurement[(1u)];
    uint32_t previousTimestampCurrentCounting[(1u)];
    uint32_t timestampCurrentCounting[(1u)];
    int32_t energyCounter_Wh[(1u)];
    uint8_t invalidEnergyCountingMeasurement[(1u)];
    uint32_t previousTimestampEnergyCounting[(1u)];
    uint32_t timestampEnergyCounting[(1u)];
    uint8_t invalidHighVoltageMeasurement
        [(1u)][(3u)];
    int32_t highVoltage_mV[(1u)][(3u)];
    uint32_t previousTimestampHighVoltage
        [(1u)]
        [(3u)];
    uint32_t timestampHighVoltage[(1u)]
                                 [(3u)];
} DATA_BLOCK_CURRENT_SENSOR_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t enableBalancing;
    uint8_t threshold_mV;
    uint8_t request;
    uint8_t balancingState[(1u)]
                          [((3u) * (16u))];
    uint32_t deltaCharge_mAs[(1u)]
                            [((3u) * (16u))];
    uint16_t nrBalancedCells[(1u)];
} DATA_BLOCK_BALANCING_CONTROL_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t state;
    uint32_t eepromReadAddressToUse;
    uint32_t eepromReadAddressLastUsed;
    uint32_t eepromWriteAddressToUse;
    uint32_t eepromWriteAddressLastUsed;
    uint8_t ioValueOut[(3u)];
    uint8_t ioValueIn[(3u)];
    uint8_t eepromValueWrite[(3u)];
    uint8_t eepromValueRead[(3u)];
    uint8_t
        externalTemperatureSensor[(3u)];
} DATA_BLOCK_SLAVE_CONTROL_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t state;
    uint16_t value[(1u)][(3u)];
} DATA_BLOCK_BALANCING_FEEDBACK_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t state;
    uint16_t value[(1u)][8u * 2u * (3u)];
} DATA_BLOCK_USER_MUX_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t state;
    uint16_t nrOpenWires[(1u)];
    uint8_t openWire[(1u)]
                    [(3u) *
                     ((16u) + 1u)];
} DATA_BLOCK_OPEN_WIRE_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t state;
    int16_t gpioVoltages_mV[(1u)][(3u) * (10u)];
    int16_t gpaVoltages_mV[(1u)][(3u) * (2u)];
    uint16_t
        invalidGpioVoltages[(1u)]
                           [(3u)];
} DATA_BLOCK_ALL_GPIO_VOLTAGES_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    _Bool afeCommunicationCrcError[(1u)];
    _Bool afeSlaveMultiplexerError[(1u)];
    _Bool afeCommunicationSpiError[(1u)];
    _Bool afeConfigurationError[(1u)];
    _Bool afeCellVoltageInvalidError[(1u)];
    _Bool afeCellTemperatureInvalidError[(1u)];
    _Bool baseCellVoltageMeasurementTimeoutError;
    _Bool redundancy0CellVoltageMeasurementTimeoutError;
    _Bool baseCellTemperatureMeasurementTimeoutError;
    _Bool redundancy0CellTemperatureMeasurementTimeoutError;
    _Bool currentMeasurementTimeoutError[(1u)];
    _Bool currentMeasurementInvalidError[(1u)];
    _Bool currentSensorVoltage1TimeoutError[(1u)];
    _Bool currentSensorVoltage2TimeoutError[(1u)];
    _Bool currentSensorVoltage3TimeoutError[(1u)];
    _Bool currentSensorPowerTimeoutError[(1u)];
    _Bool currentSensorCoulombCounterTimeoutError[(1u)];
    _Bool currentSensorEnergyCounterTimeoutError[(1u)];
    _Bool powerMeasurementInvalidError[(1u)];
    _Bool mainFuseError;
    _Bool stringFuseError[(1u)];
    _Bool openWireDetectedError[(1u)];
    _Bool stateRequestTimingViolationError;
    _Bool canRxQueueFullError;
    _Bool coinCellLowVoltageError;
    _Bool plausibilityCheckPackVoltageError[(1u)];
    _Bool plausibilityCheckCellVoltageError[(1u)];
    _Bool plausibilityCheckCellVoltageSpreadError[(1u)];
    _Bool plausibilityCheckCellTemperatureError[(1u)];
    _Bool plausibilityCheckCellTemperatureSpreadError[(1u)];
    _Bool currentSensorNotRespondingError[(1u)];
    _Bool contactorInNegativePathOfStringFeedbackError[(1u)];
    _Bool contactorInPositivePathOfStringFeedbackError[(1u)];
    _Bool prechargeContactorFeedbackError[(1u)];
    _Bool interlockOpenedError;
    _Bool insulationMeasurementInvalidError;
    _Bool criticalLowInsulationResistanceError;
    _Bool warnableLowInsulationResistanceError;
    _Bool
        insulationGroundFaultDetectedError;
    _Bool prechargeAbortedDueToVoltage[(1u)];
    _Bool prechargeAbortedDueToCurrent[(1u)];
    _Bool deepDischargeDetectedError[(1u)];
    _Bool currentOnOpenStringDetectedError[(1u)];
    _Bool mcuDieTemperatureViolationError;
    _Bool mcuSbcFinError;
    _Bool mcuSbcRstbError;
    _Bool pexI2cCommunicationError;
    _Bool i2cRtcError;
    _Bool framReadCrcError;
    _Bool rtcClockIntegrityError;
    _Bool rtcBatteryLowError;
    _Bool taskEngineTimingViolationError;
    _Bool task1msTimingViolationError;
    _Bool task10msTimingViolationError;
    _Bool task100msTimingViolationError;
    _Bool task100msAlgoTimingViolationError;
    _Bool alertFlagSetError;
} DATA_BLOCK_ERROR_STATE_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint32_t contactorFeedback;
} DATA_BLOCK_CONTACTOR_FEEDBACK_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t interlockFeedback_IL_STATE;
    float_t interlockVoltageFeedback_IL_HS_VS_mV;
    float_t interlockVoltageFeedback_IL_LS_VS_mV;
    float_t interlockCurrentFeedback_IL_HS_CS_mA;
    float_t interlockCurrentFeedback_IL_LS_CS_mA;
} DATA_BLOCK_INTERLOCK_FEEDBACK_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    float_t recommendedContinuousPackChargeCurrent_mA;
    float_t
        recommendedContinuousPackDischargeCurrent_mA;
    float_t recommendedPeakPackChargeCurrent_mA;
    float_t recommendedPeakPackDischargeCurrent_mA;
    float_t recommendedContinuousChargeCurrent_mA
        [(1u)];
    float_t recommendedContinuousDischargeCurrent_mA
        [(1u)];
    float_t recommendedPeakChargeCurrent_mA[(1u)];
    float_t recommendedPeakDischargeCurrent_mA[(1u)];
} DATA_BLOCK_SOF_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    int32_t bmsCanState;
} DATA_BLOCK_SYSTEM_STATE_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t packChargeOvercurrent;
    uint8_t packDischargeOvercurrent;
    uint8_t overVoltage[(1u)];
    uint8_t underVoltage[(1u)];
    uint8_t overtemperatureCharge[(1u)];
    uint8_t overtemperatureDischarge[(1u)];
    uint8_t undertemperatureCharge[(1u)];
    uint8_t undertemperatureDischarge[(1u)];
    uint8_t cellChargeOvercurrent[(1u)];
    uint8_t stringChargeOvercurrent[(1u)];
    uint8_t cellDischargeOvercurrent[(1u)];
    uint8_t stringDischargeOvercurrent[(1u)];
    uint8_t pcbOvertemperature[(1u)];
    uint8_t pcbUndertemperature[(1u)];
} DATA_BLOCK_MSL_FLAG_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t overVoltage[(1u)];
    uint8_t underVoltage[(1u)];
    uint8_t overtemperatureCharge[(1u)];
    uint8_t overtemperatureDischarge[(1u)];
    uint8_t undertemperatureCharge[(1u)];
    uint8_t undertemperatureDischarge[(1u)];
    uint8_t cellChargeOvercurrent[(1u)];
    uint8_t stringChargeOvercurrent[(1u)];
    uint8_t cellDischargeOvercurrent[(1u)];
    uint8_t stringDischargeOvercurrent[(1u)];
    uint8_t pcbOvertemperature[(1u)];
    uint8_t pcbUndertemperature[(1u)];
} DATA_BLOCK_RSL_FLAG_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t overVoltage[(1u)];
    uint8_t underVoltage[(1u)];
    uint8_t overtemperatureCharge[(1u)];
    uint8_t overtemperatureDischarge[(1u)];
    uint8_t undertemperatureCharge[(1u)];
    uint8_t undertemperatureDischarge[(1u)];
    uint8_t cellChargeOvercurrent[(1u)];
    uint8_t stringChargeOvercurrent[(1u)];
    uint8_t cellDischargeOvercurrent[(1u)];
    uint8_t stringDischargeOvercurrent[(1u)];
    uint8_t pcbOvertemperature[(1u)];
    uint8_t pcbUndertemperature[(1u)];
} DATA_BLOCK_MOL_FLAG_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    float_t averageSoc_perc[(1u)];
    float_t minimumSoc_perc[(1u)];
    float_t maximumSoc_perc[(1u)];
    float_t averageSoe_perc[(1u)];
    float_t minimumSoe_perc[(1u)];
    float_t maximumSoe_perc[(1u)];
    float_t averageSoh_perc[(1u)];
    float_t minimumSoh_perc[(1u)];
    float_t maximumSoh_perc[(1u)];
    uint32_t maximumSoe_Wh[(1u)];
    uint32_t averageSoe_Wh[(1u)];
    uint32_t minimumSoe_Wh[(1u)];
} DATA_BLOCK_SOX_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t stateRequestViaCan;
    uint8_t previousStateRequestViaCan;
    uint8_t stateRequestViaCanPending;
    uint8_t stateCounter;
} DATA_BLOCK_STATE_REQUEST_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    float_t movingAverageCurrent1sInterval_mA;
    float_t movingAverageCurrent5sInterval_mA;
    float_t movingAverageCurrent10sInterval_mA;
    float_t movingAverageCurrent30sInterval_mA;
    float_t movingAverageCurrent60sInterval_mA;
    float_t movingAverageCurrentConfigurableInterval_mA;
    float_t movingAveragePower1sInterval_mA;
    float_t movingAveragePower5sInterval_mA;
    float_t movingAveragePower10sInterval_mA;
    float_t movingAveragePower30sInterval_mA;
    float_t movingAveragePower60sInterval_mA;
    float_t movingAveragePowerConfigurableInterval_mA;
} DATA_BLOCK_MOVING_AVERAGE_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    _Bool isImdRunning;
    _Bool isInsulationMeasurementValid;
    uint32_t insulationResistance_kOhm;
    _Bool
        areDeviceFlagsValid;
    _Bool
        dfIsCriticalResistanceDetected;
    _Bool dfIsWarnableResistanceDetected;
    _Bool dfIsChassisFaultDetected;
    _Bool dfIsChassisShortToHvPlus;
    _Bool dfIsChassisShortToHvMinus;
    _Bool dfIsDeviceErrorDetected;
    _Bool dfIsMeasurementUpToDate;
} DATA_BLOCK_INSULATION_MONITORING_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    int16_t temperature_ddegC;
    uint8_t humidity_perc;
} DATA_BLOCK_HTSEN_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    float_t adc1ConvertedVoltages_mV[(32u)];
} DATA_BLOCK_ADC_VOLTAGE_s;
typedef struct {
    DATA_BLOCK_HEADER_s header;
    uint8_t member1;
    uint8_t member2;
} DATA_BLOCK_DUMMY_FOR_SELF_TEST_s;
extern DATA_BASE_s data_database[DATA_BLOCK_ID_MAX];
extern _Bool DATA_DatabaseEntryUpdatedAtLeastOnce(DATA_BLOCK_HEADER_s dataBlockHeader);
extern _Bool DATA_EntryUpdatedWithinInterval(DATA_BLOCK_HEADER_s dataBlockHeader, uint32_t timeInterval);
extern _Bool DATA_EntryUpdatedPeriodicallyWithinInterval(DATA_BLOCK_HEADER_s dataBlockHeader, uint32_t timeInterval);
extern uint8_t DATA_GetStringNumberFromVoltageIndex(uint16_t cellIndex);
extern uint8_t DATA_GetModuleNumberFromVoltageIndex(uint16_t cellIndex);
extern uint8_t DATA_GetCellNumberFromVoltageIndex(uint16_t cellIndex);
extern uint8_t DATA_GetStringNumberFromTemperatureIndex(uint16_t sensorIndex);
extern uint8_t DATA_GetModuleNumberFromTemperatureIndex(uint16_t sensorIndex);
extern uint8_t DATA_GetSensorNumberFromTemperatureIndex(uint16_t sensorIndex);
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-20.1\")")
_Pragma("CHECK_MISRA(\"-20.2\")")
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;
typedef long double max_align_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.10\")")
_Pragma("diag_pop")
_Pragma("diag_pop")
typedef void (* TaskFunction_t)( void * );
typedef uint32_t   StackType_t;
typedef long             BaseType_t;
typedef unsigned long    UBaseType_t;
    typedef uint32_t     TickType_t;
#pragma SWI_ALIAS(vPortEnterCritical, 2)
extern void vPortEnterCritical( void );
#pragma SWI_ALIAS(vPortExitCritical, 3)
extern void vPortExitCritical( void );
#pragma SWI_ALIAS(vPortDisableInterrupts, 5)
extern void vPortDisableInterrupts( void );
#pragma SWI_ALIAS(vPortEnableInterrupts, 6)
extern void vPortEnableInterrupts( void );
#pragma SWI_ALIAS( vPortYield, 0 )
extern void vPortYield( void );
#pragma SWI_ALIAS(vPortTaskUsesFPU, 4)
extern void vPortTaskUsesFPU( void );
    unsigned long ulPortCountLeadingZeros( unsigned long ulBitmap );
typedef struct MPU_REGION_REGISTERS
{
    unsigned ulRegionBaseAddress;
    unsigned ulRegionSize;
    unsigned ulRegionAttribute;
} xMPU_REGION_REGISTERS;
typedef struct MPU_SETTINGS
{
    xMPU_REGION_REGISTERS xRegion[ ( ( ( ( ( 16UL ) - 2 ) - ( 13UL - 1UL ) ) + 1 ) + 1 ) ];
} xMPU_SETTINGS;
        StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                             TaskFunction_t pxCode,
                                             void * pvParameters,
                                             BaseType_t xRunPrivileged ) ;
typedef struct HeapRegion
{
    uint8_t * pucStartAddress;
    size_t xSizeInBytes;
} HeapRegion_t;
typedef struct xHeapStats
{
    size_t xAvailableHeapSpaceInBytes;
    size_t xSizeOfLargestFreeBlockInBytes;
    size_t xSizeOfSmallestFreeBlockInBytes;
    size_t xNumberOfFreeBlocks;
    size_t xMinimumEverFreeBytesRemaining;
    size_t xNumberOfSuccessfulAllocations;
    size_t xNumberOfSuccessfulFrees;
} HeapStats_t;
void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) ;
void vPortGetHeapStats( HeapStats_t * pxHeapStats );
void * pvPortMalloc( size_t xSize ) ;
void vPortFree( void * pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;
size_t xPortGetMinimumEverFreeHeapSize( void ) ;
BaseType_t xPortStartScheduler( void ) ;
void vPortEndScheduler( void ) ;
    struct xMEMORY_REGION;
    void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                    const struct xMEMORY_REGION * const xRegions,
                                    StackType_t * pxBottomOfStack,
                                    uint32_t ulStackDepth ) ;
struct xSTATIC_LIST_ITEM
{
    TickType_t xDummy2;
    void * pvDummy3[ 4 ];
};
typedef struct xSTATIC_LIST_ITEM StaticListItem_t;
struct xSTATIC_MINI_LIST_ITEM
{
    TickType_t xDummy2;
    void * pvDummy3[ 2 ];
};
typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;
typedef struct xSTATIC_LIST
{
    UBaseType_t uxDummy2;
    void * pvDummy3;
    StaticMiniListItem_t xDummy4;
} StaticList_t;
typedef struct xSTATIC_TCB
{
    void * pxDummy1;
        xMPU_SETTINGS xDummy2;
    StaticListItem_t xDummy3[ 2 ];
    UBaseType_t uxDummy5;
    void * pxDummy6;
    uint8_t ucDummy7[ ( 40 ) ];
        void * pxDummy8;
        void * pvDummy15[ ( 1 ) ];
        uint32_t ulDummy18[ ( 3 ) ];
        uint8_t ucDummy19[ ( 3 ) ];
        uint8_t ucDummy21;
} StaticTask_t;
typedef struct xSTATIC_QUEUE
{
    void * pvDummy1[ 3 ];
    union
    {
        void * pvDummy2;
        UBaseType_t uxDummy2;
    } u;
    StaticList_t xDummy3[ 2 ];
    UBaseType_t uxDummy4[ 3 ];
    uint8_t ucDummy5[ 2 ];
} StaticQueue_t;
typedef StaticQueue_t StaticSemaphore_t;
typedef struct xSTATIC_EVENT_GROUP
{
    TickType_t xDummy1;
    StaticList_t xDummy2;
} StaticEventGroup_t;
typedef struct xSTATIC_TIMER
{
    void * pvDummy1;
    StaticListItem_t xDummy2;
    TickType_t xDummy3;
    void * pvDummy5;
    TaskFunction_t pvDummy6;
    uint8_t ucDummy8;
} StaticTimer_t;
typedef struct xSTATIC_STREAM_BUFFER
{
    size_t uxDummy1[ 4 ];
    void * pvDummy2[ 3 ];
    uint8_t ucDummy3;
} StaticStreamBuffer_t;
typedef StaticStreamBuffer_t StaticMessageBuffer_t;
struct xLIST;
struct xLIST_ITEM
{
     TickType_t xItemValue;
    struct xLIST_ITEM *  pxNext;
    struct xLIST_ITEM *  pxPrevious;
    void * pvOwner;
    struct xLIST *  pvContainer;
};
typedef struct xLIST_ITEM ListItem_t;
struct xMINI_LIST_ITEM
{
     TickType_t xItemValue;
    struct xLIST_ITEM *  pxNext;
    struct xLIST_ITEM *  pxPrevious;
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;
typedef struct xLIST
{
    volatile UBaseType_t uxNumberOfItems;
    ListItem_t *  pxIndex;
    MiniListItem_t xListEnd;
} List_t;
void vListInitialise( List_t * const pxList ) ;
void vListInitialiseItem( ListItem_t * const pxItem ) ;
void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem ) ;
void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem ) ;
UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) ;
struct tskTaskControlBlock;
typedef struct tskTaskControlBlock * TaskHandle_t;
typedef BaseType_t (* TaskHookFunction_t)( void * );
typedef enum
{
    eRunning = 0,
    eReady,
    eBlocked,
    eSuspended,
    eDeleted,
    eInvalid
} eTaskState;
typedef enum
{
    eNoAction = 0,
    eSetBits,
    eIncrement,
    eSetValueWithOverwrite,
    eSetValueWithoutOverwrite
} eNotifyAction;
typedef struct xTIME_OUT
{
    BaseType_t xOverflowCount;
    TickType_t xTimeOnEntering;
} TimeOut_t;
typedef struct xMEMORY_REGION
{
    void * pvBaseAddress;
    uint32_t ulLengthInBytes;
    uint32_t ulParameters;
} MemoryRegion_t;
typedef struct xTASK_PARAMETERS
{
    TaskFunction_t pvTaskCode;
    const char * pcName;
    uint16_t usStackDepth;
    void * pvParameters;
    UBaseType_t uxPriority;
    StackType_t * puxStackBuffer;
    MemoryRegion_t xRegions[ ( ( ( ( 16UL ) - 2 ) - ( 13UL - 1UL ) ) + 1 ) ];
        StaticTask_t * const pxTaskBuffer;
} TaskParameters_t;
typedef struct xTASK_STATUS
{
    TaskHandle_t xHandle;
    const char * pcTaskName;
    UBaseType_t xTaskNumber;
    eTaskState eCurrentState;
    UBaseType_t uxCurrentPriority;
    UBaseType_t uxBasePriority;
    uint32_t ulRunTimeCounter;
    StackType_t * pxStackBase;
    uint16_t usStackHighWaterMark;
} TaskStatus_t;
typedef enum
{
    eAbortSleep = 0,
    eStandardSleep,
    eNoTasksWaitingTimeout
} eSleepModeStatus;
    TaskHandle_t MPU_xTaskCreateStatic( TaskFunction_t pxTaskCode,
                                    const char * const pcName,
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer ) ;
    BaseType_t MPU_xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
                                      TaskHandle_t * pxCreatedTask ) ;
    BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
                                            TaskHandle_t * pxCreatedTask ) ;
void MPU_vTaskAllocateMPURegions( TaskHandle_t xTask,
                              const MemoryRegion_t * const pxRegions ) ;
void MPU_vTaskDelete( TaskHandle_t xTaskToDelete ) ;
void MPU_vTaskDelay( const TickType_t xTicksToDelay ) ;
BaseType_t MPU_xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                            const TickType_t xTimeIncrement ) ;
BaseType_t MPU_xTaskAbortDelay( TaskHandle_t xTask ) ;
UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t xTask ) ;
UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask ) ;
eTaskState MPU_eTaskGetState( TaskHandle_t xTask ) ;
void MPU_vTaskGetInfo( TaskHandle_t xTask,
                   TaskStatus_t * pxTaskStatus,
                   BaseType_t xGetFreeStackSpace,
                   eTaskState eState ) ;
void MPU_vTaskPrioritySet( TaskHandle_t xTask,
                       UBaseType_t uxNewPriority ) ;
void MPU_vTaskSuspend( TaskHandle_t xTaskToSuspend ) ;
void MPU_vTaskResume( TaskHandle_t xTaskToResume ) ;
BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) ;
void vTaskStartScheduler( void ) ;
void vTaskEndScheduler( void ) ;
void MPU_vTaskSuspendAll( void ) ;
BaseType_t MPU_xTaskResumeAll( void ) ;
TickType_t MPU_xTaskGetTickCount( void ) ;
TickType_t xTaskGetTickCountFromISR( void ) ;
UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) ;
char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) ;
TaskHandle_t MPU_xTaskGetHandle( const char * pcNameToQuery ) ;
UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) ;
uint16_t MPU_uxTaskGetStackHighWaterMark2( TaskHandle_t xTask ) ;
    void MPU_vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
                                            BaseType_t xIndex,
                                            void * pvValue ) ;
    void * MPU_pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
                                               BaseType_t xIndex ) ;
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        uint32_t * pulIdleTaskStackSize );
BaseType_t MPU_xTaskCallApplicationTaskHook( TaskHandle_t xTask,
                                         void * pvParameter ) ;
TaskHandle_t MPU_xTaskGetIdleTaskHandle( void ) ;
UBaseType_t MPU_uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                  const UBaseType_t uxArraySize,
                                  uint32_t * const pulTotalRunTime ) ;
void MPU_vTaskList( char * pcWriteBuffer ) ;
void MPU_vTaskGetRunTimeStats( char * pcWriteBuffer ) ;
uint32_t MPU_ulTaskGetIdleRunTimeCounter( void ) ;
uint32_t MPU_ulTaskGetIdleRunTimePercent( void ) ;
BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                               UBaseType_t uxIndexToNotify,
                               uint32_t ulValue,
                               eNotifyAction eAction,
                               uint32_t * pulPreviousNotificationValue ) ;
BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
                                      UBaseType_t uxIndexToNotify,
                                      uint32_t ulValue,
                                      eNotifyAction eAction,
                                      uint32_t * pulPreviousNotificationValue,
                                      BaseType_t * pxHigherPriorityTaskWoken ) ;
BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                   uint32_t ulBitsToClearOnEntry,
                                   uint32_t ulBitsToClearOnExit,
                                   uint32_t * pulNotificationValue,
                                   TickType_t xTicksToWait ) ;
void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                    UBaseType_t uxIndexToNotify,
                                    BaseType_t * pxHigherPriorityTaskWoken ) ;
uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                  BaseType_t xClearCountOnExit,
                                  TickType_t xTicksToWait ) ;
BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                         UBaseType_t uxIndexToClear ) ;
uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                        UBaseType_t uxIndexToClear,
                                        uint32_t ulBitsToClear ) ;
void MPU_vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) ;
BaseType_t MPU_xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait ) ;
BaseType_t MPU_xTaskCatchUpTicks( TickType_t xTicksToCatchUp ) ;
BaseType_t xTaskIncrementTick( void ) ;
void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait ) ;
void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait ) ;
void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                      TickType_t xTicksToWait,
                                      const BaseType_t xWaitIndefinitely ) ;
BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) ;
void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue ) ;
 void vTaskSwitchContext( void ) ;
TickType_t uxTaskResetEventItemValue( void ) ;
TaskHandle_t MPU_xTaskGetCurrentTaskHandle( void ) ;
void vTaskMissedYield( void ) ;
BaseType_t MPU_xTaskGetSchedulerState( void ) ;
BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) ;
BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) ;
void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                          UBaseType_t uxHighestPriorityWaitingTask ) ;
UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) ;
void vTaskSetTaskNumber( TaskHandle_t xTask,
                         const UBaseType_t uxHandle ) ;
void vTaskStepTick( const TickType_t xTicksToJump ) ;
eSleepModeStatus eTaskConfirmSleepModeStatus( void ) ;
TaskHandle_t pvTaskIncrementMutexHeldCount( void ) ;
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut ) ;
struct QueueDefinition;
typedef struct QueueDefinition   * QueueHandle_t;
typedef struct QueueDefinition   * QueueSetHandle_t;
typedef struct QueueDefinition   * QueueSetMemberHandle_t;
BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition ) ;
BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait ) ;
BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer ) ;
BaseType_t MPU_xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait ) ;
UBaseType_t MPU_uxQueueMessagesWaiting( const QueueHandle_t xQueue ) ;
UBaseType_t MPU_uxQueueSpacesAvailable( const QueueHandle_t xQueue ) ;
void MPU_vQueueDelete( QueueHandle_t xQueue ) ;
BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition ) ;
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken ) ;
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken ) ;
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue ) ;
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue ) ;
UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue ) ;
BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
                                const void * pvItemToQueue,
                                BaseType_t xCoRoutinePreviouslyWoken );
BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
                                   void * pvBuffer,
                                   BaseType_t * pxTaskWoken );
BaseType_t xQueueCRSend( QueueHandle_t xQueue,
                         const void * pvItemToQueue,
                         TickType_t xTicksToWait );
BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
                            void * pvBuffer,
                            TickType_t xTicksToWait );
QueueHandle_t MPU_xQueueCreateMutex( const uint8_t ucQueueType ) ;
QueueHandle_t MPU_xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                       StaticQueue_t * pxStaticQueue ) ;
QueueHandle_t MPU_xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                             const UBaseType_t uxInitialCount ) ;
QueueHandle_t MPU_xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                   const UBaseType_t uxInitialCount,
                                                   StaticQueue_t * pxStaticQueue ) ;
BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait ) ;
TaskHandle_t MPU_xQueueGetMutexHolder( QueueHandle_t xSemaphore ) ;
TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore ) ;
BaseType_t MPU_xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                     TickType_t xTicksToWait ) ;
BaseType_t MPU_xQueueGiveMutexRecursive( QueueHandle_t xMutex ) ;
    QueueHandle_t MPU_xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType ) ;
QueueSetHandle_t MPU_xQueueCreateSet( const UBaseType_t uxEventQueueLength ) ;
BaseType_t MPU_xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                           QueueSetHandle_t xQueueSet ) ;
BaseType_t MPU_xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                                QueueSetHandle_t xQueueSet ) ;
QueueSetMemberHandle_t MPU_xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                            const TickType_t xTicksToWait ) ;
QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet ) ;
void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                     TickType_t xTicksToWait,
                                     const BaseType_t xWaitIndefinitely ) ;
BaseType_t MPU_xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue ) ;
void vQueueSetQueueNumber( QueueHandle_t xQueue,
                           UBaseType_t uxQueueNumber ) ;
UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue ) ;
uint8_t ucQueueGetQueueType( QueueHandle_t xQueue ) ;
typedef enum {
    OS_SUCCESS,
    OS_FAIL,
} OS_STD_RETURN_e;
typedef enum {
    OS_PRIORITY_IDLE,
    OS_PRIORITY_LOW,
    OS_PRIORITY_BELOW_NORMAL,
    OS_PRIORITY_NORMAL,
    OS_PRIORITY_ABOVE_NORMAL,
    OS_PRIORITY_HIGH,
    OS_PRIORITY_ABOVE_HIGH,
    OS_PRIORITY_VERY_HIGH,
    OS_PRIORITY_BELOW_REALTIME,
    OS_PRIORITY_REAL_TIME,
} OS_PRIORITY_e;
typedef enum {
    OS_OFF,
    OS_INITIALIZE_SCHEDULER,
    OS_CREATE_QUEUES,
    OS_CREATE_TASKS,
    OS_INIT_PRE_OS,
    OS_SCHEDULER_RUNNING,
    OS_ENGINE_RUNNING,
    OS_PRE_CYCLIC_INITIALIZATION_HAS_FINISHED,
    OS_SYSTEM_RUNNING,
    OS_INIT_OS_FATALERROR_SCHEDULER,
    OS_INIT_OS_FATALERROR,
    OS_BOOT_STATE_MAX,
} OS_BOOT_STATE_e;
typedef struct {
    uint8_t timer_1ms;
    uint8_t timer_10ms;
    uint8_t timer_100ms;
    uint8_t timer_sec;
    uint8_t timer_min;
    uint8_t timer_h;
    uint16_t timer_d;
} OS_TIMER_s;
typedef struct {
    OS_PRIORITY_e priority;
    uint32_t phase;
    uint32_t cycleTime;
    uint32_t stackSize_B;
    void *pvParameters;
} OS_TASK_DEFINITION_s;
extern volatile OS_BOOT_STATE_e os_boot;
extern uint32_t os_schedulerStartTime;
extern void OS_InitializeScheduler(void);
extern void OS_StartScheduler(void);
extern void OS_InitializeOperatingSystem(void);
extern void vApplicationIdleHook(void);
extern void OS_EnterTaskCritical(void);
extern void OS_ExitTaskCritical(void);
extern void OS_IncrementTimer(void);
extern uint32_t OS_GetTickCount(void);
extern void OS_DelayTaskUntil(uint32_t *pPreviousWakeTime, uint32_t milliseconds);
extern void OS_MarkTaskAsRequiringFpuContext(void);
extern OS_STD_RETURN_e OS_WaitForNotification(uint32_t *pNotifiedValue, uint32_t timeout);
extern OS_STD_RETURN_e OS_NotifyFromIsr(TaskHandle_t taskToNotify, uint32_t notifiedValue);
extern OS_STD_RETURN_e OS_WaitForNotificationIndexed(
    uint32_t indexToWaitOn,
    uint32_t *pNotifiedValue,
    uint32_t timeout);
extern OS_STD_RETURN_e OS_NotifyIndexedFromIsr(
    TaskHandle_t taskToNotify,
    uint32_t indexToNotify,
    uint32_t notifiedValue);
extern OS_STD_RETURN_e OS_ClearNotificationIndexed(uint32_t indexToClear);
extern OS_STD_RETURN_e OS_ReceiveFromQueue(QueueHandle_t xQueue, void *const pvBuffer, uint32_t ticksToWait);
extern OS_STD_RETURN_e OS_SendToBackOfQueue(QueueHandle_t xQueue, const void *const pvItemToQueue, uint32_t ticksToWait);
extern OS_STD_RETURN_e OS_SendToBackOfQueueFromIsr(
    QueueHandle_t xQueue,
    const void *const pvItemToQueue,
    long *const pxHigherPriorityTaskWoken);
extern uint32_t OS_GetNumberOfStoredMessagesInQueue(QueueHandle_t xQueue);
extern _Bool OS_CheckTimeHasPassed(uint32_t oldTimeStamp_ms, uint32_t timeToPass_ms);
extern _Bool OS_CheckTimeHasPassedWithTimestamp(
    uint32_t oldTimeStamp_ms,
    uint32_t currentTimeStamp_ms,
    uint32_t timeToPass_ms);
extern STD_RETURN_TYPE_e OS_CheckTimeHasPassedSelfTest(void);
typedef enum {
    DATA_WRITE_ACCESS,
    DATA_READ_ACCESS,
} DATA_BLOCK_ACCESS_TYPE_e;
typedef struct {
    DATA_BLOCK_ACCESS_TYPE_e accessType;
    void *pDatabaseEntry[(4u)];
} DATA_QUEUE_MESSAGE_s;
extern void DATA_DummyFunction(void);
extern STD_RETURN_TYPE_e DATA_Initialize(void);
extern void DATA_Task(void);
extern STD_RETURN_TYPE_e DATA_Write1DataBlock(void *pDataFromSender0);
extern STD_RETURN_TYPE_e DATA_Write2DataBlocks(void *pDataFromSender0, void *pDataFromSender1);
extern STD_RETURN_TYPE_e DATA_Write3DataBlocks(void *pDataFromSender0, void *pDataFromSender1, void *pDataFromSender2);
extern STD_RETURN_TYPE_e DATA_Write4DataBlocks(
    void *pDataFromSender0,
    void *pDataFromSender1,
    void *pDataFromSender2,
    void *pDataFromSender3);
extern STD_RETURN_TYPE_e DATA_Read1DataBlock(void *pDataToReceiver0);
extern STD_RETURN_TYPE_e DATA_Read2DataBlocks(void *pDataToReceiver0, void *pDataToReceiver1);
extern STD_RETURN_TYPE_e DATA_Read3DataBlocks(void *pDataToReceiver0, void *pDataToReceiver1, void *pDataToReceiver2);
extern STD_RETURN_TYPE_e DATA_Read4DataBlocks(
    void *pDataToReceiver0,
    void *pDataToReceiver1,
    void *pDataToReceiver2,
    void *pDataToReceiver3);
extern void DATA_ExecuteDataBist(void);
typedef struct {
    DATA_BLOCK_ERROR_STATE_s *pTableError;
    DATA_BLOCK_MOL_FLAG_s *pTableMol;
    DATA_BLOCK_RSL_FLAG_s *pTableRsl;
    DATA_BLOCK_MSL_FLAG_s *pTableMsl;
} DIAG_DATABASE_SHIM_s;
extern const DIAG_DATABASE_SHIM_s diag_kDatabaseShim;
typedef enum {
    DIAG_ID_FLASHCHECKSUM,
    DIAG_ID_SYSTEM_MONITORING,
    DIAG_ID_CONFIGASSERT,
    DIAG_ID_AFE_SPI,
    DIAG_ID_AFE_COM_INTEGRITY,
    DIAG_ID_AFE_MUX,
    DIAG_ID_AFE_CONFIG,
    DIAG_ID_CAN_TIMING,
    DIAG_ID_CAN_RX_QUEUE_FULL,
    DIAG_ID_CAN_CC_RESPONDING,
    DIAG_ID_CAN_EC_RESPONDING,
    DIAG_ID_CURRENT_SENSOR_RESPONDING,
    DIAG_ID_PLAUSIBILITY_CELL_VOLTAGE,
    DIAG_ID_AFE_CELL_VOLTAGE_MEAS_ERROR,
    DIAG_ID_AFE_CELL_TEMPERATURE_MEAS_ERROR,
    DIAG_ID_PLAUSIBILITY_CELL_TEMP,
    DIAG_ID_PLAUSIBILITY_CELL_VOLTAGE_SPREAD,
    DIAG_ID_PLAUSIBILITY_CELL_TEMPERATURE_SPREAD,
    DIAG_ID_CELL_VOLTAGE_OVERVOLTAGE_MSL,
    DIAG_ID_CELL_VOLTAGE_OVERVOLTAGE_RSL,
    DIAG_ID_CELL_VOLTAGE_OVERVOLTAGE_MOL,
    DIAG_ID_CELL_VOLTAGE_UNDERVOLTAGE_MSL,
    DIAG_ID_CELL_VOLTAGE_UNDERVOLTAGE_RSL,
    DIAG_ID_CELL_VOLTAGE_UNDERVOLTAGE_MOL,
    DIAG_ID_TEMP_OVERTEMPERATURE_CHARGE_MSL,
    DIAG_ID_TEMP_OVERTEMPERATURE_CHARGE_RSL,
    DIAG_ID_TEMP_OVERTEMPERATURE_CHARGE_MOL,
    DIAG_ID_TEMP_OVERTEMPERATURE_DISCHARGE_MSL,
    DIAG_ID_TEMP_OVERTEMPERATURE_DISCHARGE_RSL,
    DIAG_ID_TEMP_OVERTEMPERATURE_DISCHARGE_MOL,
    DIAG_ID_TEMP_UNDERTEMPERATURE_CHARGE_MSL,
    DIAG_ID_TEMP_UNDERTEMPERATURE_CHARGE_RSL,
    DIAG_ID_TEMP_UNDERTEMPERATURE_CHARGE_MOL,
    DIAG_ID_TEMP_UNDERTEMPERATURE_DISCHARGE_MSL,
    DIAG_ID_TEMP_UNDERTEMPERATURE_DISCHARGE_RSL,
    DIAG_ID_TEMP_UNDERTEMPERATURE_DISCHARGE_MOL,
    DIAG_ID_OVERCURRENT_CHARGE_CELL_MSL,
    DIAG_ID_OVERCURRENT_CHARGE_CELL_RSL,
    DIAG_ID_OVERCURRENT_CHARGE_CELL_MOL,
    DIAG_ID_OVERCURRENT_DISCHARGE_CELL_MSL,
    DIAG_ID_OVERCURRENT_DISCHARGE_CELL_RSL,
    DIAG_ID_OVERCURRENT_DISCHARGE_CELL_MOL,
    DIAG_ID_STRING_OVERCURRENT_CHARGE_MSL,
    DIAG_ID_STRING_OVERCURRENT_CHARGE_RSL,
    DIAG_ID_STRING_OVERCURRENT_CHARGE_MOL,
    DIAG_ID_STRING_OVERCURRENT_DISCHARGE_MSL,
    DIAG_ID_STRING_OVERCURRENT_DISCHARGE_RSL,
    DIAG_ID_STRING_OVERCURRENT_DISCHARGE_MOL,
    DIAG_ID_PACK_OVERCURRENT_CHARGE_MSL,
    DIAG_ID_PACK_OVERCURRENT_DISCHARGE_MSL,
    DIAG_ID_CURRENT_ON_OPEN_STRING,
    DIAG_ID_DEEP_DISCHARGE_DETECTED,
    DIAG_ID_AFE_OPEN_WIRE,
    DIAG_ID_PLAUSIBILITY_PACK_VOLTAGE,
    DIAG_ID_INTERLOCK_FEEDBACK,
    DIAG_ID_STRING_MINUS_CONTACTOR_FEEDBACK,
    DIAG_ID_STRING_PLUS_CONTACTOR_FEEDBACK,
    DIAG_ID_PRECHARGE_CONTACTOR_FEEDBACK,
    DIAG_ID_SBC_FIN_STATE,
    DIAG_ID_SBC_RSTB_STATE,
    DIAG_ID_BASE_CELL_VOLTAGE_MEASUREMENT_TIMEOUT,
    DIAG_ID_REDUNDANCY0_CELL_VOLTAGE_MEASUREMENT_TIMEOUT,
    DIAG_ID_BASE_CELL_TEMPERATURE_MEASUREMENT_TIMEOUT,
    DIAG_ID_REDUNDANCY0_CELL_TEMPERATURE_MEASUREMENT_TIMEOUT,
    DIAG_ID_PRECHARGE_ABORT_REASON_VOLTAGE,
    DIAG_ID_PRECHARGE_ABORT_REASON_CURRENT,
    DIAG_ID_CURRENT_MEASUREMENT_TIMEOUT,
    DIAG_ID_CURRENT_MEASUREMENT_ERROR,
    DIAG_ID_CURRENT_SENSOR_V1_MEASUREMENT_TIMEOUT,
    DIAG_ID_CURRENT_SENSOR_V2_MEASUREMENT_TIMEOUT,
    DIAG_ID_CURRENT_SENSOR_V3_MEASUREMENT_TIMEOUT,
    DIAG_ID_CURRENT_SENSOR_POWER_MEASUREMENT_TIMEOUT,
    DIAG_ID_POWER_MEASUREMENT_ERROR,
    DIAG_ID_INSULATION_MEASUREMENT_VALID,
    DIAG_ID_LOW_INSULATION_RESISTANCE_ERROR,
    DIAG_ID_LOW_INSULATION_RESISTANCE_WARNING,
    DIAG_ID_INSULATION_GROUND_ERROR,
    DIAG_ID_I2C_PEX_ERROR,
    DIAG_ID_I2C_RTC_ERROR,
    DIAG_ID_RTC_CLOCK_INTEGRITY_ERROR,
    DIAG_ID_RTC_BATTERY_LOW_ERROR,
    DIAG_ID_FRAM_READ_CRC_ERROR,
    DIAG_ID_ALERT_MODE,
    DIAG_ID_MAX,
} DIAG_ID_e;
typedef enum {
    DIAG_EVENT_OK,
    DIAG_EVENT_NOT_OK,
    DIAG_EVENT_RESET,
} DIAG_EVENT_e;
typedef enum {
    DIAG_EVALUATION_ENABLED,
    DIAG_EVALUATION_DISABLED,
} DIAG_EVALUATE_e;
typedef enum {
    DIAG_SYSTEM,
    DIAG_STRING,
} DIAG_IMPACT_LEVEL_e;
typedef enum {
    DIAG_FATAL_ERROR,
    DIAG_WARNING,
    DIAG_INFO,
} DIAG_SEVERITY_LEVEL_e;
typedef enum {
    DIAG_RECORDING_ENABLED,
    DIAG_RECORDING_DISABLED,
} DIAG_RECORDING_e;
typedef void DIAG_CALLBACK_FUNCTION_f(
    DIAG_ID_e diagId,
    DIAG_EVENT_e event,
    const DIAG_DATABASE_SHIM_s *const kpkDiagShim,
    uint32_t data);
typedef struct {
    DIAG_ID_e id;
    uint16_t threshold;
    DIAG_SEVERITY_LEVEL_e
        severity;
    uint32_t
        delay_ms;
    DIAG_RECORDING_e enable_recording;
    DIAG_EVALUATE_e enable_evaluate;
    DIAG_CALLBACK_FUNCTION_f *fpCallback;
} DIAG_ID_CFG_s;
typedef struct {
    uint8_t nrOfConfiguredDiagnosisEntries;
    DIAG_ID_CFG_s *pConfigurationOfDiagnosisEntries;
    uint16_t numberOfFatalErrors;
    DIAG_ID_CFG_s *pFatalErrorLinkTable
        [DIAG_ID_MAX];
} DIAG_DEV_s;
extern DIAG_DEV_s diag_device;
extern DIAG_ID_CFG_s diag_diagnosisIdConfiguration[DIAG_ID_MAX];
extern void DIAG_UpdateFlags(void);
typedef enum {
    DIAG_HANDLER_RETURN_OK,
    DIAG_HANDLER_RETURN_ERR_OCCURRED,
    DIAG_HANDLER_RETURN_WARNING_OCCURRED,
    DIAG_HANDLER_RETURN_WRONG_ID,
    DIAG_HANDLER_RETURN_UNKNOWN,
    DIAG_HANDLER_INVALID_TYPE,
    DIAG_HANDLER_INVALID_DATA,
    DIAG_HANDLER_INVALID_ERR_IMPACT,
    DIAG_HANDLER_RETURN_NOT_READY,
} DIAG_RETURNTYPE_e;
typedef enum {
    DIAG_STATE_UNINITIALIZED,
    DIAG_STATE_INITIALIZED,
} DIAG_MODULE_STATE_e;
typedef struct {
    DIAG_MODULE_STATE_e state;
    uint16_t errcnttotal;
    uint16_t errcntreported;
    uint32_t entry_event[DIAG_ID_MAX];
    uint8_t entry_cnt[DIAG_ID_MAX];
    uint16_t occurrenceCounter[(1u)][DIAG_ID_MAX];
    uint8_t id2ch[DIAG_ID_MAX];
    uint8_t nrOfConfiguredDiagnosisEntries;
    uint32_t errflag[(DIAG_ID_MAX + 31) / 32];
    uint32_t warnflag[(DIAG_ID_MAX + 31) / 32];
    uint32_t err_enableflag[(DIAG_ID_MAX + 31) / 32];
} DIAG_DIAGNOSIS_STATE_s;
extern DIAG_RETURNTYPE_e DIAG_Handler(DIAG_ID_e diagId, DIAG_EVENT_e event, DIAG_IMPACT_LEVEL_e impact, uint32_t data);
extern STD_RETURN_TYPE_e DIAG_CheckEvent(
    STD_RETURN_TYPE_e cond,
    DIAG_ID_e diagId,
    DIAG_IMPACT_LEVEL_e impact,
    uint32_t data);
extern STD_RETURN_TYPE_e DIAG_Initialize(DIAG_DEV_s *diag_dev_pointer);
extern STD_RETURN_TYPE_e DIAG_GetDiagnosisEntryState(DIAG_ID_e diagnosisEntry);
extern void DIAG_PrintErrors(void);
extern uint32_t DIAG_GetDelay(DIAG_ID_e diagnosisEntry);
extern _Bool DIAG_IsAnyFatalErrorSet(void);
typedef volatile struct spiBase
{
    uint32  GCR0;
    uint32  GCR1;
    uint32  INT0;
    uint32  LVL;
    uint32  FLG;
    uint32  PC0;
    uint32  PC1;
    uint32  PC2;
    uint32  PC3;
    uint32  PC4;
    uint32  PC5;
    uint32  PC6;
    uint32  PC7;
    uint32  PC8;
    uint32  DAT0;
    uint32  DAT1;
    uint32  BUF;
    uint32  EMU;
    uint32  DELAY;
    uint32  DEF;
    uint32  FMT0;
    uint32  FMT1;
    uint32  FMT2;
    uint32  FMT3;
    uint32  INTVECT0;
    uint32  INTVECT1;
    uint32  RESERVED[51U];
    uint32  IOLPKTSTCR;
} spiBASE_t;
enum spiChipSelect
{
    SPI_CS_NONE = 0xFFU,
    SPI_CS_0    = 0xFEU,
    SPI_CS_1    = 0xFDU,
    SPI_CS_2    = 0xFBU,
    SPI_CS_3    = 0xF7U,
    SPI_CS_4    = 0xEFU,
    SPI_CS_5    = 0xDFU,
    SPI_CS_6    = 0xBFU,
    SPI_CS_7    = 0x7FU
};
enum spiPinSelect
{
    SPI_PIN_CS0    = 0U,
    SPI_PIN_CS1    = 1U,
    SPI_PIN_CS2    = 2U,
    SPI_PIN_CS3    = 3U,
    SPI_PIN_CS4    = 4U,
    SPI_PIN_CS5    = 5U,
    SPI_PIN_CS6    = 6U,
    SPI_PIN_CS7    = 7U,
    SPI_PIN_ENA    = 8U,
    SPI_PIN_CLK    = 9U,
    SPI_PIN_SIMO   = 10U,
    SPI_PIN_SOMI   = 11U,
    SPI_PIN_SIMO_1 = 17U,
    SPI_PIN_SIMO_2 = 18U,
    SPI_PIN_SIMO_3 = 19U,
    SPI_PIN_SIMO_4 = 20U,
    SPI_PIN_SIMO_5 = 21U,
    SPI_PIN_SIMO_6 = 22U,
    SPI_PIN_SIMO_7 = 23U,
    SPI_PIN_SOMI_1 = 25U,
    SPI_PIN_SOMI_2 = 26U,
    SPI_PIN_SOMI_3 = 27U,
    SPI_PIN_SOMI_4 = 28U,
    SPI_PIN_SOMI_5 = 29U,
    SPI_PIN_SOMI_6 = 30U,
    SPI_PIN_SOMI_7 = 31U
};
typedef enum dataformat
{
    SPI_FMT_0 = 0U,
    SPI_FMT_1 = 1U,
    SPI_FMT_2 = 2U,
    SPI_FMT_3 = 3U
}SPIDATAFMT_t;
typedef struct spiDAT1RegConfig
{
    boolean CS_HOLD;
    boolean WDEL;
    SPIDATAFMT_t DFSEL;
    uint8 CSNR;
}spiDAT1_t;
typedef enum SpiTxRxDataStatus
{
    SPI_READY = 0U,
    SPI_PENDING = 1U,
    SPI_COMPLETED = 2U
}SpiDataStatus_t;
typedef struct spi_config_reg
{
    uint32 CONFIG_GCR1;
    uint32 CONFIG_INT0;
    uint32 CONFIG_LVL;
    uint32 CONFIG_PC0;
    uint32 CONFIG_PC1;
    uint32 CONFIG_PC6;
    uint32 CONFIG_PC7;
    uint32 CONFIG_PC8;
    uint32 CONFIG_DELAY;
    uint32 CONFIG_FMT0;
    uint32 CONFIG_FMT1;
    uint32 CONFIG_FMT2;
    uint32 CONFIG_FMT3;
}spi_config_reg_t;
void spiInit(void);
void spiSetFunctional(spiBASE_t *spi, uint32 port);
void spiEnableNotification(spiBASE_t *spi, uint32 flags);
void spiDisableNotification(spiBASE_t *spi, uint32 flags);
uint32 spiTransmitData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * srcbuff);
void spiSendData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * srcbuff);
uint32 spiReceiveData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * destbuff);
void spiGetData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * destbuff);
uint32 spiTransmitAndReceiveData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * srcbuff, uint16 * destbuff);
void spiSendAndGetData(spiBASE_t *spi, spiDAT1_t *dataconfig_t, uint32 blocksize, uint16 * srcbuff, uint16 * destbuff);
void spiEnableLoopback(spiBASE_t *spi, loopBackType_t Loopbacktype);
void spiDisableLoopback(spiBASE_t *spi);
SpiDataStatus_t SpiTxStatus(spiBASE_t *spi);
SpiDataStatus_t SpiRxStatus(spiBASE_t *spi);
void spi1GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spi2GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spi3GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spi4GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spi5GetConfigValue(spi_config_reg_t *config_reg, config_value_type_t type);
void spiNotification(spiBASE_t *spi, uint32 flags);
void spiEndNotification(spiBASE_t *spi);
typedef volatile struct dmaBase
{
    uint32 GCTRL;
    uint32 PEND;
    uint32 FBREG;
    uint32 DMASTAT;
    uint32   rsvd1;
    uint32 HWCHENAS;
    uint32   rsvd2;
    uint32 HWCHENAR;
    uint32   rsvd3;
    uint32 SWCHENAS;
    uint32   rsvd4;
    uint32 SWCHENAR;
    uint32   rsvd5;
    uint32 CHPRIOS;
    uint32   rsvd6;
    uint32 CHPRIOR;
    uint32   rsvd7;
    uint32 GCHIENAS;
    uint32   rsvd8;
    uint32 GCHIENAR;
    uint32   rsvd9;
    uint32 DREQASI[8U];
    uint32   rsvd10[8U];
    uint32 PAR[4U];
    uint32   rsvd11[4U];
    uint32 FTCMAP;
    uint32   rsvd12;
    uint32 LFSMAP;
    uint32   rsvd13;
    uint32 HBCMAP;
    uint32   rsvd14;
    uint32 BTCMAP;
    uint32   rsvd15;
    uint32 BERMAP;
    uint32   rsvd16;
    uint32 FTCINTENAS;
    uint32   rsvd17;
    uint32 FTCINTENAR;
    uint32   rsvd18;
    uint32 LFSINTENAS;
    uint32   rsvd19;
    uint32 LFSINTENAR;
    uint32   rsvd20;
    uint32 HBCINTENAS;
    uint32   rsvd21;
    uint32 HBCINTENAR;
    uint32   rsvd22;
    uint32 BTCINTENAS;
    uint32   rsvd23;
    uint32 BTCINTENAR;
    uint32   rsvd24;
    uint32 GINTFLAG;
    uint32   rsvd25;
    uint32 FTCFLAG;
    uint32   rsvd26;
    uint32 LFSFLAG;
    uint32   rsvd27;
    uint32 HBCFLAG;
    uint32   rsvd28;
    uint32 BTCFLAG;
    uint32   rsvd29;
    uint32 BERFLAG;
    uint32   rsvd30;
    uint32 FTCAOFFSET;
    uint32 LFSAOFFSET;
    uint32 HBCAOFFSET;
    uint32 BTCAOFFSET;
    uint32 BERAOFFSET;
    uint32 FTCBOFFSET;
    uint32 LFSBOFFSET;
    uint32 HBCBOFFSET;
    uint32 BTCBOFFSET;
    uint32 BERBOFFSET;
    uint32   rsvd31;
    uint32 PTCRL;
    uint32 RTCTRL;
    uint32 DCTRL;
    uint32 WPR;
    uint32 WMR;
    uint32 FAACSADDR;
    uint32 FAACDADDR;
    uint32 FAACTC;
    uint32 FBACSADDR;
    uint32 FBACDADDR;
    uint32 FBACTC;
    uint32   rsvd32;
    uint32 DMAPCR;
    uint32 DMAPAR;
    uint32 DMAMPCTRL1;
    uint32 DMAMPST1;
    struct
    {
    	uint32 STARTADD;
    	uint32 ENDADD;
    }DMAMPR_L[4U];
    uint32 DMAMPCTRL2;
    uint32 DMAPST2;
    struct
    {
    	uint32 STARTADD;
    	uint32 ENDADD;
    }DMAMPR_H[4U];
    uint32   rsvd33[10U];
    uint32 DMASECCCTRL;
	uint32   rsvd34;
    uint32 DMAECCSBE;
	uint32   rsvd35[3U];
    uint32 FIFOASTATREG;
    uint32 FIFOBSTATREG;
	uint32   rsvd37[58U];
    uint32 DMAREQPS1;
    uint32 DMAREQPS0;
	uint32   rsvd38[32];
    uint32 TERECTRL;
    uint32 TERFLAG;
    uint32 TERROFFSET;
} dmaBASE_t;
typedef volatile struct
{
     struct
     {
      uint32 ISADDR;
      uint32 IDADDR;
      uint32 ITCOUNT;
      uint32  rsvd1;
      uint32 CHCTRL;
      uint32 EIOFF;
      uint32 FIOFF;
      uint32  rsvd2;
     }PCP[32U];
     struct
     {
       uint32 res[256U];
     } RESERVED;
     struct
     {
      uint32 CSADDR;
      uint32 CDADDR;
      uint32 CTCOUNT;
      uint32  rsvd3;
     }WCP[32U];
} dmaRAMBASE_t;
typedef enum dmaChannel
{
	DMA_CH0 = 0U,	DMA_CH1,	DMA_CH2,	DMA_CH3,
	DMA_CH4,	    DMA_CH5,	DMA_CH6,	DMA_CH7,
	DMA_CH8,	    DMA_CH9,	DMA_CH10,	DMA_CH11,
	DMA_CH12,	    DMA_CH13,	DMA_CH14,	DMA_CH15,
	DMA_CH16,	    DMA_CH17,	DMA_CH18,	DMA_CH19,
	DMA_CH20,	    DMA_CH21,	DMA_CH22,	DMA_CH23,
	DMA_CH24,	    DMA_CH25,	DMA_CH26,	DMA_CH27,
	DMA_CH28,	    DMA_CH29,	DMA_CH30,	DMA_CH31
}dmaChannel_t;
typedef enum dmaRequest
{
	DMA_REQ0 = 0U,	DMA_REQ1,	DMA_REQ2,	DMA_REQ3,
	DMA_REQ4,	    DMA_REQ5,	DMA_REQ6,	DMA_REQ7,
	DMA_REQ8,	    DMA_REQ9,	DMA_REQ10,	DMA_REQ11,
	DMA_REQ12,	    DMA_REQ13,	DMA_REQ14,	DMA_REQ15,
	DMA_REQ16,	    DMA_REQ17,	DMA_REQ18,	DMA_REQ19,
	DMA_REQ20,	    DMA_REQ21,	DMA_REQ22,	DMA_REQ23,
	DMA_REQ24,	    DMA_REQ25,	DMA_REQ26,	DMA_REQ27,
	DMA_REQ28,	    DMA_REQ29,	DMA_REQ30,	DMA_REQ31,
	DMA_REQ32,	    DMA_REQ33,	DMA_REQ34,	DMA_REQ35,
	DMA_REQ36,	    DMA_REQ37,	DMA_REQ38,	DMA_REQ39,
	DMA_REQ40,	    DMA_REQ41,	DMA_REQ42,	DMA_REQ43,
	DMA_REQ44,	    DMA_REQ45,	DMA_REQ46,	DMA_REQ47
}dmaRequest_t;
typedef enum dmaTriggerType
{
	DMA_HW,
	DMA_SW
}dmaTriggerType_t;
typedef enum dmaPriorityQueue
{
	LOWPRIORITY,
	HIGHPRIORITY
}dmaPriorityQueue_t;
typedef enum dmaInterrupt
{
	FTC,
	LFS,
	HBC,
	BTC
}dmaInterrupt_t;
typedef enum dmaIntGroup
{
   DMA_INTA = 0U,
   DMA_INTB = 1U
}dmaIntGroup_t;
typedef enum dmaMPURegion
{
	DMA_REGION0 = 0U,
	DMA_REGION1 = 1U,
	DMA_REGION2 = 2U,
	DMA_REGION3 = 3U,
	DMA_REGION4 = 4U,
	DMA_REGION5 = 5U,
	DMA_REGION6 = 6U,
	DMA_REGION7 = 7U
}dmaMPURegion_t;
typedef enum dmaRegionAccess
{
	FULLACCESS = 0U,
	READONLY   = 1U,
	WRITEONLY  = 2U,
	NOACCESS   = 3U
}dmaRegionAccess_t;
typedef enum dmaMPUInt
{
	INTERRUPT_DISABLE = 0U,
	INTERRUPTA_ENABLE = 1U,
	INTERRUPTB_ENABLE = 3U
}dmaMPUInt_t;
enum dmaPort
{
	PORTB_READ_PORTB_WRITE = 0x3U,
	PORTA_READ_PORTA_WRITE = 0x2U,
	PORTA_READ_PORTB_WRITE = 0x1U,
	PORTB_READ_PORTA_WRITE = 0x0U
};
enum dmaElementSize
{
	ACCESS_8_BIT  = 0U,
	ACCESS_16_BIT = 1U,
	ACCESS_32_BIT = 2U,
	ACCESS_64_BIT = 3U
};
enum dmaTransferType
{
	FRAME_TRANSFER = 0U,
	BLOCK_TRANSFER = 1U
};
enum dmaAddressMode
{
	ADDR_FIXED  = 0U,
	ADDR_INC1   = 1U,
	ADDR_OFFSET = 3U
};
enum dmaAutoInitMode
{
	AUTOINIT_OFF = 0U,
	AUTOINIT_ON  = 1U
};
typedef struct  dmaCTRLPKT
{
    uint32 SADD;
    uint32 DADD;
    uint32 CHCTRL;
    uint32 FRCNT;
    uint32 ELCNT;
    uint32 ELDOFFSET;
    uint32 ELSOFFSET;
    uint32 FRDOFFSET;
    uint32 FRSOFFSET;
    uint32 PORTASGN;
    uint32 RDSIZE;
    uint32 WRSIZE;
    uint32 TTYPE;
    uint32 ADDMODERD;
    uint32 ADDMODEWR;
    uint32 AUTOINIT;
} g_dmaCTRL;
void dmaEnable(void);
void dmaDisable(void);
void dmaSetCtrlPacket(dmaChannel_t channel, g_dmaCTRL g_dmaCTRLPKT);
void dmaSetChEnable(dmaChannel_t channel, dmaTriggerType_t type);
void dmaReqAssign(dmaChannel_t channel, dmaRequest_t reqline);
void dmaSetPriority(dmaChannel_t channel, dmaPriorityQueue_t priority);
void dmaEnableInterrupt(dmaChannel_t channel, dmaInterrupt_t inttype, dmaIntGroup_t group);
void dmaDisableInterrupt(dmaChannel_t channel, dmaInterrupt_t inttype);
void dmaDefineRegion(dmaMPURegion_t region, uint32 start_add, uint32 end_add);
void dmaEnableRegion(dmaMPURegion_t region, dmaRegionAccess_t access, dmaMPUInt_t intenable);
void dmaDisableRegion(dmaMPURegion_t region);
void dmaEnableECC(void);
void dmaDisableECC(void);
uint32  dmaGetReq(dmaChannel_t channel);
boolean dmaIsBusy(void);
boolean dmaIsChannelActive(dmaChannel_t channel);
boolean dmaGetInterruptStatus(dmaChannel_t channel, dmaInterrupt_t inttype);
void dmaGroupANotification(dmaInterrupt_t inttype, uint32 channel);
typedef struct {
    dmaChannel_t txChannel;
    dmaChannel_t rxChannel;
} DMA_CHANNEL_CONFIG_s;
typedef struct {
    dmaRequest_t txRequest;
    dmaRequest_t rxRequest;
} DMA_REQUEST_CONFIG_s;
extern DMA_CHANNEL_CONFIG_s dma_spiDmaChannels[(5u)];
extern DMA_REQUEST_CONFIG_s dma_spiDmaRequests[(5u)];
extern spiBASE_t *dma_spiInterfaces[(5u)];
extern void DMA_Initialize(void);
extern _Bool DMA_IsTransmitOngoing(void);
extern void DMA_SetTransmitOngoing(void);
extern _Bool DMA_IsTxTransmitOngoingN775(void);
extern _Bool DMA_IsRxTransmitOngoingN775(void);
extern void DMA_SetTxTransmitOngoingN775(void);
extern void DMA_SetRxTransmitOngoingN775(void);
#pragma SWI_ALIAS(FSYS_RaisePrivilege, 1);
extern long FSYS_RaisePrivilege(void);
#pragma FUNC_ALWAYS_INLINE(FSYS_SwitchToUserMode)
static inline void FSYS_SwitchToUserMode(void) {
    __asm(" CPS #0x10");
}
uint8_t i2c_rxLastByteInterface1 = 0u;
uint8_t i2c_rxLastByteInterface2 = 0u;
static uint32_t I2C_GetWordTransmitTime(i2cBASE_t *pI2cInterface);
static _Bool I2C_WaitTransmit(i2cBASE_t *pI2cInterface, uint32_t timeout_us);
static _Bool I2C_WaitStop(i2cBASE_t *pI2cInterface, uint32_t timeout_us);
static uint32_t I2C_WaitForTxCompletedNotification(void);
static uint32_t I2C_WaitForRxCompletedNotification(void);
static void I2C_ClearNotifications(void);
static uint32_t I2C_GetWordTransmitTime(i2cBASE_t *pI2cInterface) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 138); } while (0); FAS_InfiniteLoop(); } } while (0);
    uint32_t i2cClock_khz        = 0;
    uint32_t prescaler           = 0;
    uint32_t wordTransmitTime_us = 0u;
    uint8_t dFactor              = 0u;
    prescaler = pI2cInterface->PSC & (0xFFu);
    if (prescaler == 0u) {
        dFactor = (7u);
    } else if (prescaler == 1u) {
        dFactor = (6u);
    } else {
        dFactor = (5u);
    }
    i2cClock_khz = (uint32_t)(100.000F * (1000000u)) /
                   (2u * (prescaler + 1u) * (pI2cInterface->CKH + dFactor));
    wordTransmitTime_us = ((9u) * (1000000u)) / i2cClock_khz;
    return wordTransmitTime_us;
}
static _Bool I2C_WaitTransmit(i2cBASE_t *pI2cInterface, uint32_t timeout_us) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 162); } while (0); FAS_InfiniteLoop(); } } while (0);
    _Bool success          = 1;
    _Bool timeElapsed      = 0;
    uint32_t startCounter = MCU_GetFreeRunningCount();
    while (((pI2cInterface->STR & (uint32_t)I2C_NACK_INT) == 0u) &&
           ((pI2cInterface->STR & (uint32_t)I2C_TX_INT) == 0u) && (timeElapsed == 0)) {
        timeElapsed = MCU_IsTimeElapsed(startCounter, timeout_us);
    }
    if (timeElapsed == 1) {
        success = 0;
    }
    return success;
}
static _Bool I2C_WaitStop(i2cBASE_t *pI2cInterface, uint32_t timeout_us) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 180); } while (0); FAS_InfiniteLoop(); } } while (0);
    _Bool success          = 1;
    _Bool timeElapsed      = 0;
    uint32_t startCounter = MCU_GetFreeRunningCount();
    while ((i2cIsStopDetected(pI2cInterface) == 0u) && (timeElapsed == 0)) {
        timeElapsed = MCU_IsTimeElapsed(startCounter, timeout_us);
    }
    if (timeElapsed == 1) {
        success = 0;
    }
    return success;
}
static uint32_t I2C_WaitForTxCompletedNotification(void) {
    uint32_t notifiedValueTx = (0x0u);
    OS_WaitForNotificationIndexed((1u), &notifiedValueTx, (2u));
    return notifiedValueTx;
}
static uint32_t I2C_WaitForRxCompletedNotification(void) {
    uint32_t notifiedValueRx = (0x0u);
    OS_WaitForNotificationIndexed((2u), &notifiedValueRx, (2u));
    return notifiedValueRx;
}
static void I2C_ClearNotifications(void) {
    OS_ClearNotificationIndexed((1u));
    OS_ClearNotificationIndexed((2u));
}
extern void I2C_Initialize(void) {
    i2cInit();
}
extern STD_RETURN_TYPE_e I2C_Read(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytes,
    uint8_t *readData) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 231); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(readData != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 232); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(nrBytes > 0u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 233); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(slaveAddress < 128u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 234); } while (0); FAS_InfiniteLoop(); } } while (0);
    STD_RETURN_TYPE_e retVal = STD_OK;
    if ((pI2cInterface->STR & (uint32_t)I2C_BUSBUSY) == 0u) {
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_REPEATMODE);
        pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
        pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
        pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
        i2cSetMode(pI2cInterface, (uint32_t)I2C_MASTER);
        i2cSetDirection(pI2cInterface, (uint32_t)I2C_RECEIVER);
        i2cSetSlaveAdd(pI2cInterface, slaveAddress);
        i2cSetStart(pI2cInterface);
        if (nrBytes == 1u) {
            i2cSetStop(pI2cInterface);
        }
        for (uint16_t i = 0u; i < nrBytes; i++) {
            _Bool success = I2C_WaitReceive(pI2cInterface, (1000u));
            if (((pI2cInterface->STR & (uint32_t)I2C_NACK_INT) == (uint32_t)I2C_NACK_INT) || (success == 0)) {
                pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
                i2cSetStop(pI2cInterface);
                retVal = STD_NOT_OK;
                break;
            }
            readData[i] = (uint8)(pI2cInterface->DRR & (0xFFu));
            if (i == (nrBytes - 2u)) {
                i2cSetStop(pI2cInterface);
            }
        }
        _Bool success = I2C_WaitStop(pI2cInterface, (1000u));
        if (success == 0) {
            pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
            i2cSetStop(pI2cInterface);
            retVal = STD_NOT_OK;
        }
    } else {
        retVal = STD_NOT_OK;
    }
    return retVal;
}
extern STD_RETURN_TYPE_e I2C_Write(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytes,
    uint8_t *writeData) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 288); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(writeData != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 289); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(nrBytes > 0u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 290); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(slaveAddress < 128u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 291); } while (0); FAS_InfiniteLoop(); } } while (0);
    STD_RETURN_TYPE_e retVal = STD_OK;
    if ((pI2cInterface->STR & (uint32_t)I2C_BUSBUSY) == 0u) {
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_REPEATMODE);
        pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
        pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
        i2cSetMode(pI2cInterface, (uint32_t)I2C_MASTER);
        i2cSetDirection(pI2cInterface, (uint32_t)I2C_TRANSMITTER);
        i2cSetSlaveAdd(pI2cInterface, slaveAddress);
        i2cSetStop(pI2cInterface);
        i2cSetCount(pI2cInterface, nrBytes);
        i2cSetStart(pI2cInterface);
        for (uint16_t i = 0u; i < nrBytes; i++) {
            pI2cInterface->DXR = (uint32_t)writeData[i];
            _Bool success       = I2C_WaitTransmit(pI2cInterface, (1000u));
            if (((pI2cInterface->STR & (uint32_t)I2C_NACK_INT) == (uint32_t)I2C_NACK_INT) || (success == 0)) {
                pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
                i2cSetStop(pI2cInterface);
                retVal = STD_NOT_OK;
                break;
            }
        }
        _Bool success = I2C_WaitStop(pI2cInterface, (1000u));
        if (success == 0) {
            pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
            i2cSetStop(pI2cInterface);
            retVal = STD_NOT_OK;
        }
    } else {
        retVal = STD_NOT_OK;
    }
    return retVal;
}
extern STD_RETURN_TYPE_e I2C_WriteRead(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytesWrite,
    uint8_t *writeData,
    uint32_t nrBytesRead,
    uint8_t *readData) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 342); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(writeData != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 343); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(nrBytesWrite > 0u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 344); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(readData != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 345); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(nrBytesRead > 0u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 346); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(slaveAddress < 128u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 347); } while (0); FAS_InfiniteLoop(); } } while (0);
    STD_RETURN_TYPE_e retVal = STD_OK;
    if ((pI2cInterface->STR & (uint32_t)I2C_BUSBUSY) == 0u) {
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_REPEATMODE);
        pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
        pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
        i2cSetMode(pI2cInterface, (uint32_t)I2C_MASTER);
        i2cSetDirection(pI2cInterface, (uint32_t)I2C_TRANSMITTER);
        i2cSetSlaveAdd(pI2cInterface, slaveAddress);
        i2cSetStart(pI2cInterface);
        _Bool success = 1;
        for (uint16_t i = 0u; i < nrBytesWrite; i++) {
            pI2cInterface->DXR = (uint32_t)writeData[i];
            success            = I2C_WaitTransmit(pI2cInterface, (1000u));
            if (((pI2cInterface->STR & (uint32_t)I2C_NACK_INT) == (uint32_t)I2C_NACK_INT) || (success == 0)) {
                pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
                i2cSetStop(pI2cInterface);
                retVal = STD_NOT_OK;
                break;
            }
        }
        if (!(((pI2cInterface->STR & (uint32_t)I2C_NACK_INT) == (uint32_t)I2C_NACK_INT) || (success == 0))) {
            pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
            i2cSetMode(pI2cInterface, (uint32_t)I2C_MASTER);
            i2cSetDirection(pI2cInterface, (uint32_t)I2C_RECEIVER);
            i2cSetStart(pI2cInterface);
            if (nrBytesRead == 1u) {
                i2cSetStop(pI2cInterface);
            }
            for (uint16_t i = 0u; i < nrBytesRead; i++) {
                success = I2C_WaitReceive(pI2cInterface, (1000u));
                if (((pI2cInterface->STR & (uint32_t)I2C_NACK_INT) == (uint32_t)I2C_NACK_INT) || (success == 0)) {
                    pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
                    i2cSetStop(pI2cInterface);
                    retVal = STD_NOT_OK;
                    break;
                }
                readData[i] = (uint8)(pI2cInterface->DRR & (0xFFu));
                if (i == (nrBytesRead - 2u)) {
                    i2cSetStop(pI2cInterface);
                }
            }
        }
        success = I2C_WaitStop(pI2cInterface, (1000u));
        if (success == 0) {
            pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
            i2cSetStop(pI2cInterface);
            retVal = STD_NOT_OK;
        }
    } else {
        retVal = STD_NOT_OK;
    }
    return retVal;
}
extern STD_RETURN_TYPE_e I2C_ReadDma(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytes,
    uint8_t *readData) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 420); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(readData != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 421); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(nrBytes > 1u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 422); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(slaveAddress < 128u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 423); } while (0); FAS_InfiniteLoop(); } } while (0);
    STD_RETURN_TYPE_e retVal = STD_OK;
    I2C_ClearNotifications();
    if ((pI2cInterface->STR & (uint32_t)I2C_BUSBUSY) == 0u) {
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_REPEATMODE);
        pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
        pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
        dmaChannel_t channelRx = DMA_CH0;
        if (pI2cInterface == ((i2cBASE_t *)0xFFF7D400U)) {
            channelRx = (DMA_CH11);
        } else if (pI2cInterface == ((i2cBASE_t *)0xFFF7D500U)) {
            channelRx = (DMA_CH13);
        } else {
            do { if (!((0u == 1u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 444); } while (0); FAS_InfiniteLoop(); } } while (0);
        }
        OS_EnterTaskCritical();
        const int32_t raisePrivilegeResult = FSYS_RaisePrivilege();
        do { if (!(raisePrivilegeResult == 0)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 451); } while (0); FAS_InfiniteLoop(); } } while (0);
        ((dmaRAMBASE_t *)0xFFF80000U)->PCP[(dmaChannel_t)channelRx].IDADDR = (uint32_t)readData;
        ((dmaRAMBASE_t *)0xFFF80000U)->PCP[(dmaChannel_t)channelRx].ITCOUNT = ((nrBytes - 1u) << (16u)) | 1u;
        dmaSetChEnable((dmaChannel_t)channelRx, (dmaTriggerType_t)DMA_HW);
        FSYS_SwitchToUserMode();
        OS_ExitTaskCritical();
        pI2cInterface->DMACR |= (uint32_t)(0x1u);
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
        i2cSetMode(pI2cInterface, (uint32_t)I2C_MASTER);
        i2cSetDirection(pI2cInterface, (uint32_t)I2C_RECEIVER);
        i2cSetSlaveAdd(pI2cInterface, slaveAddress);
        i2cSetStart(pI2cInterface);
        uint32_t notificationRx = I2C_WaitForRxCompletedNotification();
        if (notificationRx != (0x61u)) {
            pI2cInterface->DMACR &= ~((uint32_t)(0x1u));
            pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
            i2cSetStop(pI2cInterface);
            retVal = STD_NOT_OK;
        } else {
            if (pI2cInterface == ((i2cBASE_t *)0xFFF7D400U)) {
                readData[nrBytes - 1u] = i2c_rxLastByteInterface1;
            } else if (pI2cInterface == ((i2cBASE_t *)0xFFF7D500U)) {
                readData[nrBytes - 1u] = i2c_rxLastByteInterface2;
            } else {
                do { if (!((0u == 1u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 493); } while (0); FAS_InfiniteLoop(); } } while (0);
            }
            _Bool success = I2C_WaitStop(pI2cInterface, (1000u));
            if (success == 0) {
                pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
                i2cSetStop(pI2cInterface);
                retVal = STD_NOT_OK;
            }
        }
    } else {
        retVal = STD_NOT_OK;
    }
    return retVal;
}
extern STD_RETURN_TYPE_e I2C_WriteDma(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytes,
    uint8_t *writeData) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 515); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(writeData != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 516); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(nrBytes > 0u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 517); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(slaveAddress < 128u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 518); } while (0); FAS_InfiniteLoop(); } } while (0);
    STD_RETURN_TYPE_e retVal = STD_OK;
    I2C_ClearNotifications();
    if ((pI2cInterface->STR & (uint32_t)I2C_BUSBUSY) == 0u) {
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_REPEATMODE);
        pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
        pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
        dmaChannel_t channelTx = DMA_CH0;
        if (pI2cInterface == ((i2cBASE_t *)0xFFF7D400U)) {
            channelTx = (DMA_CH10);
        } else if (pI2cInterface == ((i2cBASE_t *)0xFFF7D500U)) {
            channelTx = (DMA_CH12);
        } else {
            do { if (!((0u == 1u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 538); } while (0); FAS_InfiniteLoop(); } } while (0);
        }
        OS_EnterTaskCritical();
        const int32_t raisePrivilegeResult = FSYS_RaisePrivilege();
        do { if (!(raisePrivilegeResult == 0)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 545); } while (0); FAS_InfiniteLoop(); } } while (0);
        ((dmaRAMBASE_t *)0xFFF80000U)->PCP[(dmaChannel_t)channelTx].ISADDR = (uint32_t)writeData;
        ((dmaRAMBASE_t *)0xFFF80000U)->PCP[(dmaChannel_t)channelTx].ITCOUNT = (nrBytes << (16u)) | 1u;
        dmaSetChEnable((dmaChannel_t)channelTx, (dmaTriggerType_t)DMA_HW);
        FSYS_SwitchToUserMode();
        OS_ExitTaskCritical();
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_REPEATMODE);
        pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
        pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
        i2cSetMode(pI2cInterface, (uint32_t)I2C_MASTER);
        i2cSetDirection(pI2cInterface, (uint32_t)I2C_TRANSMITTER);
        i2cSetSlaveAdd(pI2cInterface, slaveAddress);
        i2cSetStop(pI2cInterface);
        i2cSetCount(pI2cInterface, nrBytes);
        pI2cInterface->DMACR |= (uint32_t)(0x2u);
        i2cSetStart(pI2cInterface);
        uint32_t notificationTx = I2C_WaitForTxCompletedNotification();
        if (notificationTx != (0x51u)) {
            pI2cInterface->DMACR &= ~((uint32_t)(0x2u));
            pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
            i2cSetStop(pI2cInterface);
            retVal = STD_NOT_OK;
        } else {
            _Bool success = I2C_WaitStop(pI2cInterface, (1000u));
            if (success == 0) {
                pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
                i2cSetStop(pI2cInterface);
                retVal = STD_NOT_OK;
            }
        }
    } else {
        retVal = STD_NOT_OK;
    }
    return retVal;
}
extern STD_RETURN_TYPE_e I2C_WriteReadDma(
    i2cBASE_t *pI2cInterface,
    uint32_t slaveAddress,
    uint32_t nrBytesWrite,
    uint8_t *writeData,
    uint32_t nrBytesRead,
    uint8_t *readData) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 606); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(writeData != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 607); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(nrBytesWrite > 0u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 608); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(readData != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 609); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(nrBytesRead > 1u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 610); } while (0); FAS_InfiniteLoop(); } } while (0);
    do { if (!(slaveAddress < 128u)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 611); } while (0); FAS_InfiniteLoop(); } } while (0);
    STD_RETURN_TYPE_e retVal = STD_OK;
    dmaChannel_t channelRx   = DMA_CH0;
    dmaChannel_t channelTx   = DMA_CH0;
    I2C_ClearNotifications();
    if ((pI2cInterface->STR & (uint32_t)I2C_BUSBUSY) == 0u) {
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_REPEATMODE);
        pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
        pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
        if (pI2cInterface == ((i2cBASE_t *)0xFFF7D400U)) {
            channelTx = (DMA_CH10);
        } else if (pI2cInterface == ((i2cBASE_t *)0xFFF7D500U)) {
            channelTx = (DMA_CH12);
        } else {
            do { if (!((0u == 1u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 635); } while (0); FAS_InfiniteLoop(); } } while (0);
        }
        OS_EnterTaskCritical();
        const int32_t raisePrivilegeResultWrite = FSYS_RaisePrivilege();
        do { if (!(raisePrivilegeResultWrite == 0)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 642); } while (0); FAS_InfiniteLoop(); } } while (0);
        ((dmaRAMBASE_t *)0xFFF80000U)->PCP[(dmaChannel_t)channelTx].ISADDR = (uint32_t)writeData;
        ((dmaRAMBASE_t *)0xFFF80000U)->PCP[(dmaChannel_t)channelTx].ITCOUNT = (nrBytesWrite << (16u)) | 1u;
        dmaSetChEnable((dmaChannel_t)channelTx, (dmaTriggerType_t)DMA_HW);
        FSYS_SwitchToUserMode();
        OS_ExitTaskCritical();
        pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
        pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
        pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
        pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
        pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
        i2cSetMode(pI2cInterface, (uint32_t)I2C_MASTER);
        i2cSetDirection(pI2cInterface, (uint32_t)I2C_TRANSMITTER);
        i2cSetSlaveAdd(pI2cInterface, slaveAddress);
        pI2cInterface->DMACR |= (uint32_t)(0x2u);
        i2cSetStart(pI2cInterface);
        uint32_t notificationTx = I2C_WaitForTxCompletedNotification();
        if (notificationTx != (0x51u)) {
            pI2cInterface->DMACR &= ~((uint32_t)(0x2u));
            pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
            i2cSetStop(pI2cInterface);
            retVal = STD_NOT_OK;
        } else {
            if (pI2cInterface == ((i2cBASE_t *)0xFFF7D400U)) {
                channelRx = (DMA_CH11);
            } else if (pI2cInterface == ((i2cBASE_t *)0xFFF7D500U)) {
                channelRx = (DMA_CH13);
            } else {
                do { if (!((0u == 1u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 688); } while (0); FAS_InfiniteLoop(); } } while (0);
            }
            OS_EnterTaskCritical();
            const int32_t raisePrivilegeResultRead = FSYS_RaisePrivilege();
            do { if (!(raisePrivilegeResultRead == 0)) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 695); } while (0); FAS_InfiniteLoop(); } } while (0);
            ((dmaRAMBASE_t *)0xFFF80000U)->PCP[(dmaChannel_t)channelRx].IDADDR = (uint32_t)readData;
            ((dmaRAMBASE_t *)0xFFF80000U)->PCP[(dmaChannel_t)channelRx].ITCOUNT =
                ((nrBytesRead - 1u) << (16u)) | 1u;
            dmaSetChEnable((dmaChannel_t)channelRx, (dmaTriggerType_t)DMA_HW);
            FSYS_SwitchToUserMode();
            OS_ExitTaskCritical();
            uint32_t wordTransmitTime_us = I2C_GetWordTransmitTime(pI2cInterface) + (5u);
            MCU_Delay_us(wordTransmitTime_us);
            pI2cInterface->MDR &= ~((uint32_t)I2C_STOP_COND);
            pI2cInterface->MDR &= ~((uint32_t)I2C_START_COND);
            pI2cInterface->MDR &= ~((uint32_t)I2C_REPEATMODE);
            pI2cInterface->STR |= (uint32_t)I2C_TX_INT;
            pI2cInterface->STR |= (uint32_t)I2C_RX_INT;
            pI2cInterface->DMACR |= (uint32_t)(0x1u);
            pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
            i2cSetMode(pI2cInterface, (uint32_t)I2C_MASTER);
            i2cSetDirection(pI2cInterface, (uint32_t)I2C_RECEIVER);
            i2cSetStart(pI2cInterface);
            uint32_t notificationRx = I2C_WaitForRxCompletedNotification();
            if (notificationRx != (0x61u)) {
                pI2cInterface->DMACR &= ~((uint32_t)(0x1u));
                pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
                i2cSetStop(pI2cInterface);
                retVal = STD_NOT_OK;
            } else {
                if (pI2cInterface == ((i2cBASE_t *)0xFFF7D400U)) {
                    readData[nrBytesRead - 1u] = i2c_rxLastByteInterface1;
                } else if (pI2cInterface == ((i2cBASE_t *)0xFFF7D500U)) {
                    readData[nrBytesRead - 1u] = i2c_rxLastByteInterface2;
                } else {
                    do { if (!((0u == 1u))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 748); } while (0); FAS_InfiniteLoop(); } } while (0);
                }
                _Bool success = I2C_WaitStop(pI2cInterface, (1000u));
                if (success == 0) {
                    pI2cInterface->MDR |= (uint32_t)I2C_REPEATMODE;
                    i2cSetStop(pI2cInterface);
                    retVal = STD_NOT_OK;
                }
            }
        }
    } else {
        retVal = STD_NOT_OK;
    }
    return retVal;
}
extern uint8_t I2C_ReadLastRxByte(i2cBASE_t *pI2cInterface) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 767); } while (0); FAS_InfiniteLoop(); } } while (0);
    uint8_t lastReadByte = (uint8)(pI2cInterface->DRR & (0xFFu));
    return lastReadByte;
}
extern _Bool I2C_WaitReceive(i2cBASE_t *pI2cInterface, uint32_t timeout_us) {
    do { if (!(pI2cInterface != ((void *)0x0U))) { do { uint32_t *pc = (uint32_t *)__curpc(); FAS_StoreAssertLocation(pc, 773); } while (0); FAS_InfiniteLoop(); } } while (0);
    _Bool success          = 1;
    _Bool timeElapsed      = 0;
    uint32_t startCounter = MCU_GetFreeRunningCount();
    while (((pI2cInterface->STR & (uint32_t)I2C_RX_INT) == 0u) && (timeElapsed == 0)) {
        timeElapsed = MCU_IsTimeElapsed(startCounter, timeout_us);
    }
    if (timeElapsed == 1) {
        success = 0;
    }
    return success;
}
