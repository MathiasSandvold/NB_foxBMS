# pragma diag_push
# pragma CHECK_MISRA("-19.7")
# pragma CHECK_MISRA("-19.4")
# pragma CHECK_MISRA("-19.1")
# pragma CHECK_MISRA("-19.15")
# pragma diag_pop
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.6\")")
#pragma diag_push
#pragma CHECK_MISRA("-19.4")
#pragma diag_pop
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"none\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	signed char		__int8_t;
typedef	unsigned char		__uint8_t;
typedef	short			__int16_t;
typedef	unsigned short		__uint16_t;
typedef	int			__int32_t;
typedef	unsigned int		__uint32_t;
typedef	long long		__int64_t;
typedef	unsigned long long	__uint64_t;
typedef	__uint32_t	__clock_t;
typedef	__int32_t	__critical_t;
typedef	double		__double_t;
typedef	float		__float_t;
typedef	__int32_t	__intfptr_t;
typedef	__int64_t	__intmax_t;
typedef	__int32_t	__intptr_t;
typedef	__int32_t	__int_fast8_t;
typedef	__int32_t	__int_fast16_t;
typedef	__int32_t	__int_fast32_t;
typedef	__int64_t	__int_fast64_t;
typedef	__int8_t	__int_least8_t;
typedef	__int16_t	__int_least16_t;
typedef	__int32_t	__int_least32_t;
typedef	__int64_t	__int_least64_t;
typedef	__int32_t	__ptrdiff_t;
typedef	__int32_t	__register_t;
typedef	__int32_t	__segsz_t;
typedef	__uint32_t	__size_t;
typedef	__int32_t	__ssize_t;
typedef __uint32_t      __time_t;
typedef	__uint32_t	__uintfptr_t;
typedef	__uint64_t	__uintmax_t;
typedef	__uint32_t	__uintptr_t;
typedef	__uint32_t	__uint_fast8_t;
typedef	__uint32_t	__uint_fast16_t;
typedef	__uint32_t	__uint_fast32_t;
typedef	__uint64_t	__uint_fast64_t;
typedef	__uint8_t	__uint_least8_t;
typedef	__uint16_t	__uint_least16_t;
typedef	__uint32_t	__uint_least32_t;
typedef	__uint64_t	__uint_least64_t;
typedef	__uint32_t	__u_register_t;
typedef	__uint32_t	__vm_offset_t;
typedef	__uint32_t	__vm_paddr_t;
typedef	__uint32_t	__vm_size_t;
typedef	unsigned short ___wchar_t;
typedef long _off_t;
typedef struct __va_list_t {
    void * __ap;
} __va_list;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	__int32_t	__blksize_t;
typedef	__int64_t	__blkcnt_t;
typedef	__int32_t	__clockid_t;
typedef	__uint32_t	__fflags_t;
typedef	__uint64_t	__fsblkcnt_t;
typedef	__uint64_t	__fsfilcnt_t;
typedef	__uint32_t	__gid_t;
typedef	__int64_t	__id_t;
typedef	__uint64_t	__ino_t;
typedef	long		__key_t;
typedef	__int32_t	__lwpid_t;
typedef	__uint16_t	__mode_t;
typedef	int		__accmode_t;
typedef	int		__nl_item;
typedef	__uint64_t	__nlink_t;
typedef	_off_t	        __off_t;
typedef	__int64_t	__off64_t;
typedef	__int32_t	__pid_t;
typedef	__int64_t	__rlim_t;
typedef	__uint8_t	__sa_family_t;
typedef	__uint32_t	__socklen_t;
typedef	long		__suseconds_t;
typedef	struct __timer	*__timer_t;
typedef	struct __mq	*__mqd_t;
typedef	__uint32_t	__uid_t;
typedef	unsigned int	__useconds_t;
typedef	int		__cpuwhich_t;
typedef	int		__cpulevel_t;
typedef int		__cpusetid_t;
typedef	int		__ct_rune_t;
typedef	__ct_rune_t	__rune_t;
typedef	__ct_rune_t	__wint_t;
typedef	__uint_least16_t __char16_t;
typedef	__uint_least32_t __char32_t;
typedef struct {
	long long __max_align1 __attribute__((aligned(_Alignof(long long))));
	long double __max_align2 __attribute__((aligned(_Alignof(long double))));
} __max_align_t;
typedef	__uint64_t	__dev_t;
typedef	__uint32_t	__fixpt_t;
typedef int _Mbstatet;
typedef _Mbstatet __mbstate_t;
typedef __uintmax_t     __rman_res_t;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-19.13\")")
_Pragma("diag_pop")
typedef	__int8_t		int8_t;
typedef	__int16_t		int16_t;
typedef	__int32_t		int32_t;
typedef	__int64_t		int64_t;
typedef	__uint8_t		uint8_t;
typedef	__uint16_t		uint16_t;
typedef	__uint32_t		uint32_t;
typedef	__uint64_t		uint64_t;
typedef	__intptr_t		intptr_t;
typedef	__uintptr_t		uintptr_t;
typedef	__intmax_t		intmax_t;
typedef	__uintmax_t		uintmax_t;
typedef	__int_least8_t		int_least8_t;
typedef	__int_least16_t		int_least16_t;
typedef	__int_least32_t		int_least32_t;
typedef	__int_least64_t		int_least64_t;
typedef	__uint_least8_t		uint_least8_t;
typedef	__uint_least16_t	uint_least16_t;
typedef	__uint_least32_t	uint_least32_t;
typedef	__uint_least64_t	uint_least64_t;
typedef	__int_fast8_t		int_fast8_t;
typedef	__int_fast16_t		int_fast16_t;
typedef	__int_fast32_t		int_fast32_t;
typedef	__int_fast64_t		int_fast64_t;
typedef	__uint_fast8_t		uint_fast8_t;
typedef	__uint_fast16_t		uint_fast16_t;
typedef	__uint_fast32_t		uint_fast32_t;
typedef	__uint_fast64_t		uint_fast64_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-10.1\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.11\")")
_Pragma("diag_pop")
typedef uint64_t uint64;
typedef uint32_t uint32;
typedef uint16_t uint16;
typedef uint8_t uint8;
typedef _Bool boolean;
typedef int64_t sint64;
typedef int32_t sint32;
typedef int16_t sint16;
typedef int8_t sint8;
typedef float float32;
typedef double float64;
typedef uint8 Std_ReturnType;
typedef struct
{
    uint16 vendorID;
    uint16 moduleID;
    uint8  instanceID;
    uint8  sw_major_version;
    uint8  sw_minor_version;
    uint8  sw_patch_version;
} Std_VersionInfoType;
  typedef unsigned char StatusType;
typedef boolean tBoolean;
typedef enum loopBackType
{
    Digital_Lbk = 0U,
    Analog_Lbk = 1U
}loopBackType_t;
typedef enum config_value_type
{
	InitialValue,
	CurrentValue
}config_value_type_t;
typedef volatile struct epcBase
{
    uint32 EPCREVID;
    uint32 EPCCNTRL;
    uint32 UERRSTAT;
    uint32 EPCERRSTAT;
    uint32 FIFOFULLSTAT;
    uint32 OVRFLWSTAT;
    uint32 CAMAVAILSTAT;
    uint32 rsvd1;
    uint32 UERRADDR[2];
    uint32 rsvd2[30];
    uint32 CAM_CONTENT[32];
    uint32 rsvd3[56];
	uint32 CAM_INDEX[8];
} epcBASE_t;
enum CAMIndex
{
	CAMIndex_0	= 0U,
	CAMIndex_1	= 1U,
	CAMIndex_2	= 2U,
	CAMIndex_3	= 3U,
	CAMIndex_4	= 4U,
	CAMIndex_5	= 5U,
	CAMIndex_6	= 6U,
	CAMIndex_7	= 7U,
	CAMIndex_8	= 8U,
	CAMIndex_9	= 9U,
	CAMIndex_10	= 10U,
	CAMIndex_11	= 11U,
	CAMIndex_12	= 12U,
	CAMIndex_13	= 13U,
	CAMIndex_14	= 14U,
	CAMIndex_15	= 15U,
	CAMIndex_16	= 16U,
	CAMIndex_17	= 17U,
	CAMIndex_18	= 18U,
	CAMIndex_19	= 19U,
	CAMIndex_20	= 20U,
	CAMIndex_21	= 21U,
	CAMIndex_22	= 22U,
	CAMIndex_23	= 23U,
	CAMIndex_24	= 24U,
	CAMIndex_25	= 25U,
	CAMIndex_26	= 26U,
	CAMIndex_27	= 27U,
	CAMIndex_28	= 28U,
	CAMIndex_29	= 29U,
	CAMIndex_30	= 30U,
	CAMIndex_31	= 31U
};
void epcEnableIP1ErrorGen(void);
void epcDisableIP1ErrorGen(void);
void epcEnableIP2ErrorGen(void);
void epcDisableIP2ErrorGen(void);
void epcEnableSERREvent(void);
void epcDisableSERREvent(void);
void epcEnableInterrupt(void);
void epcDisableInterrupt(void);
void epcCAMInit(void);
boolean epcDiagnosticTest(void);
boolean epcAddCAMEEntry(uint32 address);
boolean epcCheckCAMEntry(uint32 index);
void epcCAMFullNotification(void);
void epcFIFOFullNotification(uint32 epcFIFOStatus);
typedef volatile struct vimBase
{
    uint32      rsvd1[59U];
    uint32      ECCSTAT;
    uint32      ECCCTL;
    uint32      UERRADDR;
    uint32      FBVECADDR;
    uint32      SBERRADDR;
    uint32      IRQINDEX;
    uint32      FIQINDEX;
    uint32      rsvd2;
    uint32      rsvd3;
    uint32      FIRQPR0;
    uint32      FIRQPR1;
    uint32      FIRQPR2;
    uint32      FIRQPR3;
    uint32      INTREQ0;
    uint32      INTREQ1;
    uint32      INTREQ2;
    uint32      INTREQ3;
    uint32      REQMASKSET0;
    uint32      REQMASKSET1;
    uint32      REQMASKSET2;
    uint32      REQMASKSET3;
    uint32      REQMASKCLR0;
    uint32      REQMASKCLR1;
    uint32      REQMASKCLR2;
    uint32      REQMASKCLR3;
    uint32      WAKEMASKSET0;
    uint32      WAKEMASKSET1;
    uint32      WAKEMASKSET2;
    uint32      WAKEMASKSET3;
    uint32      WAKEMASKCLR0;
    uint32      WAKEMASKCLR1;
    uint32      WAKEMASKCLR2;
    uint32      WAKEMASKCLR3;
    uint32      IRQVECREG;
    uint32      FIQVECREG;
    uint32      CAPEVT;
    uint32      rsvd4;
    uint32      CHANCTRL[32U];
} vimBASE_t;
typedef void (*t_isrFuncPTR)(void);
typedef enum systemInterrupt
{
    SYS_IRQ = 0U,
    SYS_FIQ = 1U
}systemInterrupt_t;
extern void esmHighInterrupt(void);
extern void phantomInterrupt(void);
extern void vPortPreemptiveTick(void);
extern void can1HighLevelInterrupt(void);
extern void vPortYieldWithinAPI(void);
extern void can1LowLevelInterrupt(void);
extern void dmaLFSAInterrupt(void);
extern void can2HighLevelInterrupt(void);
extern void dmaBTCAInterrupt(void);
extern void can2LowLevelInterrupt(void);
extern void phantomInterrupt(void);
extern void phantomInterrupt(void);
extern void i2cInterrupt(void);
extern void ecap1Interrupt(void);
typedef struct vim_config_reg
{
    uint32 CONFIG_FIRQPR0;
    uint32 CONFIG_FIRQPR1;
    uint32 CONFIG_FIRQPR2;
    uint32 CONFIG_FIRQPR3;
    uint32 CONFIG_REQMASKSET0;
    uint32 CONFIG_REQMASKSET1;
    uint32 CONFIG_REQMASKSET2;
    uint32 CONFIG_REQMASKSET3;
    uint32 CONFIG_WAKEMASKSET0;
    uint32 CONFIG_WAKEMASKSET1;
    uint32 CONFIG_WAKEMASKSET2;
    uint32 CONFIG_WAKEMASKSET3;
    uint32 CONFIG_CAPEVT;
    uint32 CONFIG_CHANCTRL[24U];
} vim_config_reg_t;
void vimInit(void);
void vimChannelMap(uint32 request, uint32 channel, t_isrFuncPTR handler);
void vimEnableInterrupt(uint32 channel, systemInterrupt_t inttype);
void vimDisableInterrupt(uint32 channel);
void vimGetConfigValue(vim_config_reg_t *config_reg, config_value_type_t type);
typedef volatile struct gioBase
{
    uint32 GCR0;
    uint32   rsvd;
    uint32 INTDET;
    uint32 POL;
    uint32 ENASET;
    uint32 ENACLR;
    uint32 LVLSET;
    uint32 LVLCLR;
    uint32 FLG;
    uint32 OFF1;
    uint32 OFF2;
    uint32 EMU1;
	uint32 EMU2;
} gioBASE_t;
typedef volatile struct gioPort
{
    uint32 DIR;
    uint32 DIN;
    uint32 DOUT;
    uint32 DSET;
    uint32 DCLR;
    uint32 PDR;
    uint32 PULDIS;
    uint32 PSL;
} gioPORT_t;
typedef volatile struct systemBase1
{
    uint32 SYSPC1;
    uint32 SYSPC2;
    uint32 SYSPC3;
    uint32 SYSPC4;
    uint32 SYSPC5;
    uint32 SYSPC6;
    uint32 SYSPC7;
    uint32 SYSPC8;
    uint32 SYSPC9;
    uint32 rsvd1;
    uint32 rsvd2;
    uint32 rsvd3;
    uint32 CSDIS;
    uint32 CSDISSET;
    uint32 CSDISCLR;
    uint32 CDDIS;
    uint32 CDDISSET;
    uint32 CDDISCLR;
    uint32 GHVSRC;
    uint32 VCLKASRC;
    uint32 RCLKSRC;
    uint32 CSVSTAT;
    uint32 MSTGCR;
    uint32 MINITGCR;
    uint32 MSINENA;
    uint32 MSTFAIL;
    uint32 MSTCGSTAT;
    uint32 MINISTAT;
    uint32 PLLCTL1;
    uint32 PLLCTL2;
    uint32 SYSPC10;
    uint32 DIEIDL;
    uint32 DIEIDH;
    uint32 rsvd4;
    uint32 LPOMONCTL;
    uint32 CLKTEST;
    uint32 DFTCTRLREG1;
    uint32 DFTCTRLREG2;
    uint32 rsvd5;
    uint32 rsvd6;
    uint32 GPREG1;
    uint32 rsvd7;
    uint32 rsvd8;
    uint32 rsvd9;
    uint32 SSIR1;
    uint32 SSIR2;
    uint32 SSIR3;
    uint32 SSIR4;
    uint32 RAMGCR;
    uint32 BMMCR1;
    uint32 rsvd10;
    uint32 CPURSTCR;
    uint32 CLKCNTL;
    uint32 ECPCNTL;
    uint32 rsvd11;
    uint32 DEVCR1;
    uint32 SYSECR;
    uint32 SYSESR;
    uint32 SYSTASR;
    uint32 GBLSTAT;
    uint32 DEVID;
    uint32 SSIVEC;
    uint32 SSIF;
} systemBASE1_t;
typedef volatile struct systemBase2
{
    uint32 PLLCTL3;
    uint32 rsvd1;
    uint32 STCCLKDIV;
    uint32 rsvd2[6U];
    uint32 ECPCNTL;
    uint32 ECPCNTL1;
    uint32 rsvd3[4U];
    uint32 CLK2CNTRL;
    uint32 VCLKACON1;
    uint32 rsvd4[4U];
    uint32 HCLKCNTL;
    uint32 rsvd5[6U];
    uint32 CLKSLIP;
    uint32 rsvd6;
	uint32 IP1ECCERREN;
	uint32 rsvd7[28U];
    uint32 EFC_CTLEN;
    uint32 DIEIDL_REG0;
    uint32 DIEIDH_REG1;
    uint32 DIEIDL_REG2;
    uint32 DIEIDH_REG3;
} systemBASE2_t;
typedef volatile struct flashWBase
{
    uint32 FRDCNTL;
    uint32 rsvd1;
    uint32 EE_FEDACCTRL1;
    uint32 rsvd2;
    uint32 rsvd3;
    uint32 FEDAC_PASTATUS;
    uint32 FEDAC_PBSTATUS;
    uint32 FEDAC_GBLSTATUS;
    uint32 rsvd4;
    uint32 FEDACSDIS;
    uint32 FPRIM_ADD_TAG;
    uint32 FDUP_ADD_TAG;
    uint32 FBPROT;
    uint32 FBSE;
    uint32 FBBUSY;
    uint32 FBAC;
    uint32 FBPWRMODE;
    uint32 FBPRDY;
    uint32 FPAC1;
    uint32 rsvd5;
    uint32 FMAC;
    uint32 FMSTAT;
    uint32 FEMU_DMSW;
    uint32 FEMU_DLSW;
    uint32 FEMU_ECC;
    uint32 FLOCK;
    uint32 rsvd6;
    uint32 FDIAGCTRL;
    uint32 rsvd7;
    uint32 FRAW_ADDR;
    uint32 rsvd8;
    uint32 FPAR_OVR;
    uint32 rsvd9[13U];
    uint32 RCR_VALID;
    uint32 ACC_THRESHOLD;
    uint32 rsvd10;
    uint32 FEDACSDIS2;
    uint32 rsvd11;
    uint32 rsvd12;
    uint32 rsvd13;
    uint32 RCR_VALUE0;
    uint32 RCR_VALUE1;
    uint32 rsvd14[108U];
    uint32 FSM_WR_ENA;
    uint32 rsvd15[11U];
    uint32 EEPROM_CONFIG;
    uint32 rsvd16;
    uint32 FSM_SECTOR1;
    uint32 FSM_SECTOR2;
    uint32 rsvd17[78U];
    uint32 FCFG_BANK;
} flashWBASE_t;
typedef volatile struct l2ramwBase
{
    uint32 RAMCTRL;
    uint32 rsvd1[3];
    uint32 RAMERRSTATUS;
    uint32 rsvd2[4];
    uint32 DIAGDATAVECTOR_H;
    uint32 DIAGDATAVECTOR_L;
    uint32 DIAG_ECC;
    uint32 RAMTEST;
    uint32 rsvd3;
    uint32 RAMADDRDECVECT;
    uint32 MEMINITDOMAIN;
    uint32 rsvd4;
    uint32 BANKDOMAINMAP0;
    uint32 BANKDOMAINMAP1;
} l2ramwBASE_t;
typedef volatile struct ccmr5Base
{
    uint32 CCMSR1;
    uint32 CCMKEYR1;
    uint32 CCMSR2;
    uint32 CCMKEYR2;
    uint32 CCMSR3;
    uint32 CCMKEYR3;
    uint32 CCMPOLCNTRL;
    uint32 CCMSR4;
    uint32 CCMKEYR4;
    uint32 CCMPDSTAT0;
} ccmr5BASE_t;
void _coreInitRegisters_(void);
void _coreInitStackPointer_(void);
uint32 _getCPSRValue_(void);
void _checkMemInitOn_(void);
void _gotoCPUIdle_(void);
void _coreEnableIrqVicOffset_(void);
void _coreEnableVfp_(void);
void _coreEnableEventBusExport_(void);
void _coreDisableEventBusExport_(void);
uint32 _coreGetDataFault_(void);
void _coreClearDataFault_(void);
uint32 _coreGetInstructionFault_(void);
void _coreClearInstructionFault_(void);
uint32 _coreGetDataFaultAddress_(void);
void _coreClearDataFaultAddress_(void);
uint32 _coreGetInstructionFaultAddress_(void);
void _coreClearInstructionFaultAddress_(void);
uint32 _coreGetAuxiliaryDataFault_(void);
void _coreClearAuxiliaryDataFault_(void);
uint32 _coreGetAuxiliaryInstructionFault_(void);
void _coreClearAuxiliaryInstructionFault_(void);
void _disable_IRQ_interrupt_(void);
void _enable_IRQ_interrupt_(void);
void _enable_interrupt_(void);
void _esmCcmErrorsClear_(void);
void _memInit_(void);
void _cacheEnable_(void);
void _cacheDisable_(void);
void _dCacheInvalidate_(void);
void _iCacheInvalidate_(void);
enum systemClockSource
{
    SYS_OSC             = 0x0U,
    SYS_PLL1            = 0x1U,
    SYS_EXTERNAL1       = 0x3U,
    SYS_LPO_LOW         = 0x4U,
    SYS_LPO_HIGH        = 0x5U,
    SYS_PLL2            = 0x6U,
    SYS_EXTERNAL2       = 0x7U,
    SYS_VCLK            = 0x9U,
    SYS_PLL2_ODCLK_8    = 0xEU,
    SYS_PLL2_ODCLK_16   = 0xFU
};
typedef enum
{
    POWERON_RESET       = 0x8000U,
    OSC_FAILURE_RESET   = 0x4000U,
    WATCHDOG_RESET      = 0x2000U,
    WATCHDOG2_RESET     = 0x1000U,
    DEBUG_RESET         = 0x0800U,
    INTERCONNECT_RESET  = 0x0080U,
    CPU0_RESET          = 0x0020U,
    SW_RESET            = 0x0010U,
    EXT_RESET           = 0x0008U,
    NO_RESET            = 0x0000U
}resetSource_t;
typedef struct system_config_reg
{
    uint32 CONFIG_SYSPC1;
    uint32 CONFIG_SYSPC2;
    uint32 CONFIG_SYSPC7;
    uint32 CONFIG_SYSPC8;
    uint32 CONFIG_SYSPC9;
    uint32 CONFIG_CSDIS;
    uint32 CONFIG_CDDIS;
    uint32 CONFIG_GHVSRC;
    uint32 CONFIG_VCLKASRC;
    uint32 CONFIG_RCLKSRC;
    uint32 CONFIG_MSTGCR;
    uint32 CONFIG_MINITGCR;
    uint32 CONFIG_MSINENA;
    uint32 CONFIG_PLLCTL1;
    uint32 CONFIG_PLLCTL2;
    uint32 CONFIG_SYSPC10;
    uint32 CONFIG_LPOMONCTL;
    uint32 CONFIG_CLKTEST;
    uint32 CONFIG_DFTCTRLREG1;
    uint32 CONFIG_DFTCTRLREG2;
    uint32 CONFIG_GPREG1;
    uint32 CONFIG_RAMGCR;
    uint32 CONFIG_BMMCR1;
    uint32 CONFIG_CLKCNTL;
    uint32 CONFIG_ECPCNTL;
    uint32 CONFIG_DEVCR1;
    uint32 CONFIG_SYSECR;
    uint32 CONFIG_PLLCTL3;
    uint32 CONFIG_STCCLKDIV;
	uint32 CONFIG_ECPCNTL1;
    uint32 CONFIG_CLK2CNTRL;
    uint32 CONFIG_VCLKACON1;
	uint32 CONFIG_HCLKCNTL;
    uint32 CONFIG_CLKSLIP;
    uint32 CONFIG_EFC_CTLEN;
} system_config_reg_t;
void systemGetConfigValue(system_config_reg_t *config_reg, config_value_type_t type);
enum flashWPowerModes
{
    SYS_SLEEP   = 0U,
    SYS_STANDBY = 1U,
    SYS_ACTIVE  = 3U
};
void setupPLL(void);
void trimLPO(void);
void customTrimLPO(void);
void setupFlash(void);
void periphInit(void);
void mapClocks(void);
void systemInit(void);
void systemPowerDown(uint32 mode);
resetSource_t getResetSource(void);
typedef volatile struct esmBase
{
    uint32 EEPAPR1;
    uint32 DEPAPR1;
    uint32 IESR1;
    uint32 IECR1;
    uint32 ILSR1;
    uint32 ILCR1;
    uint32 SR1[3U];
    uint32 EPSR;
    uint32 IOFFHR;
    uint32 IOFFLR;
    uint32 LTCR;
    uint32 LTCPR;
    uint32 EKR;
    uint32 SSR2;
    uint32 IEPSR4;
    uint32 IEPCR4;
    uint32 IESR4;
    uint32 IECR4;
    uint32 ILSR4;
    uint32 ILCR4;
    uint32 SR4[3U];
    uint32 rsvd1[7U];
    uint32 IEPSR7;
    uint32 IEPCR7;
    uint32 IESR7;
    uint32 IECR7;
    uint32 ILSR7;
    uint32 ILCR7;
    uint32 SR7[3U];
} esmBASE_t;
void epcEnableIP1ErrorGen(void)
{
    ((systemBASE2_t *)0xFFFFE100U)->IP1ECCERREN = (((systemBASE2_t *)0xFFFFE100U)->IP1ECCERREN & 0xFFFFFFF0U) | 0xAU;
}
void epcDisableIP1ErrorGen(void)
{
    ((systemBASE2_t *)0xFFFFE100U)->IP1ECCERREN = (((systemBASE2_t *)0xFFFFE100U)->IP1ECCERREN & 0xFFFFFFF0U) | 0x5U;
}
void epcEnableIP2ErrorGen(void)
{
    ((systemBASE2_t *)0xFFFFE100U)->IP1ECCERREN = (((systemBASE2_t *)0xFFFFE100U)->IP1ECCERREN & 0xFFFFF0FFU) | 0xA00U;
}
void epcDisableIP2ErrorGen(void)
{
    ((systemBASE2_t *)0xFFFFE100U)->IP1ECCERREN = (((systemBASE2_t *)0xFFFFE100U)->IP1ECCERREN & 0xFFFFF0FFU) | 0x500U;
}
void epcEnableSERREvent(void)
{
    ((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL = (((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL & 0xFFFFFFF0U) | 0xAU;
}
void epcDisableSERREvent(void)
{
    ((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL = (((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL & 0xFFFFFFF0U) | 0x5U;
}
void epcEnableInterrupt(void)
{
    ((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL |= (uint32)((uint32)1U<<24U);
}
void epcDisableInterrupt(void)
{
    ((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL &= ~(uint32)((uint32)1U<<24U);
}
void epcCAMInit(void)
{
    uint8 i;
    for(i=0U; i<8U; i++)
    {
        ((epcBASE_t *)0xFFFF0C00U)->CAM_INDEX[i] = 0x05050505U;
    }
}
boolean epcDiagnosticTest(void)
{
    uint32 epccntrl_bk, camCont_bk, camIndex_bk;
    uint32 camAvailable;
    boolean status = 1;
    epccntrl_bk = ((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL;
    camCont_bk = ((epcBASE_t *)0xFFFF0C00U)->CAM_CONTENT[0U];
    camIndex_bk = ((epcBASE_t *)0xFFFF0C00U)->CAM_INDEX[0U];
    ((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL = (((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL & 0xFFFFF0F0U) | 0x0A0AU;
    ((epcBASE_t *)0xFFFF0C00U)->CAM_INDEX[0U] = (((epcBASE_t *)0xFFFF0C00U)->CAM_INDEX[0U] & 0xFFFFFFF0U) | 0x5U;
    camAvailable = ((epcBASE_t *)0xFFFF0C00U)->CAMAVAILSTAT;
    ((epcBASE_t *)0xFFFF0C00U)->CAM_CONTENT[0U] = 0x1000U;
    if(((((esmBASE_t *)0xFFFFF500U)->SR1[0U] & 0x10U) != 0x10U) || (((epcBASE_t *)0xFFFF0C00U)->CAMAVAILSTAT != (camAvailable - 1U)) || (epcCheckCAMEntry(0U) == 1))
    {
        status = 0;
    }
    ((epcBASE_t *)0xFFFF0C00U)->CAM_CONTENT[0U] = camCont_bk;
    ((epcBASE_t *)0xFFFF0C00U)->CAM_INDEX[0U] = camIndex_bk;
    ((epcBASE_t *)0xFFFF0C00U)->EPCCNTRL = epccntrl_bk;
    return status;
}
boolean epcAddCAMEEntry(uint32 address)
{
    uint8 i = 0U;
    boolean status = 0;
    if(((epcBASE_t *)0xFFFF0C00U)->CAMAVAILSTAT !=0U)
    {
        for(i=0U; i<32U; i++)
        {
            if(epcCheckCAMEntry(i) == 1)
            {
                ((epcBASE_t *)0xFFFF0C00U)->CAM_CONTENT[i] = address;
                status = 1;
                break;
            }
        }
    }
    else
    {
        status = 0;
    }
    return status;
}
boolean epcCheckCAMEntry(uint32 index)
{
    uint32 i,j;
    boolean status = 0;
    i = index / 4U;
    j = (index % 4U) * 8U;
    if((((epcBASE_t *)0xFFFF0C00U)->CAM_INDEX[i] & (uint32)((uint32)0xFU<<j)) == (uint32)((uint32)0x5U<<j))
    {
        status = 1;
    }
    else
    {
        status= 0;
    }
    return status;
}
