# pragma diag_push
# pragma CHECK_MISRA("-19.7")
# pragma CHECK_MISRA("-19.4")
# pragma CHECK_MISRA("-19.1")
# pragma CHECK_MISRA("-19.15")
# pragma diag_pop
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.6\")")
#pragma diag_push
#pragma CHECK_MISRA("-19.4")
#pragma diag_pop
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
_Pragma("CHECK_MISRA(\"-8.5\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-20.1\")")
_Pragma("CHECK_MISRA(\"-20.2\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-5.7\")")
typedef struct { int quot, rem; } div_t;
typedef struct { int quot, rem; } ldiv_t;
typedef struct { long long quot, rem; } lldiv_t;
_Pragma("diag_pop")
typedef unsigned size_t;
typedef unsigned short wchar_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-16.4\")")
      int       abs(int _val);
      long      labs(long _val);
      long long llabs(long long _val);
_Pragma("diag_pop")
     int       atoi(const char *_st);
     long      atol(const char *_st);
     long long atoll(const char *_st);
     char     *ltoa(long val, char * buffer, int radix);
          static __inline double    atof(const char *_st);
     long      strtol(const char * __restrict _st,
                                  char ** __restrict _endptr, int _base);
     unsigned long strtoul(const char * __restrict _st,
                                       char ** __restrict _endptr, int _base);
     long long strtoll(const char * __restrict _st,
                                   char ** __restrict _endptr, int _base);
     unsigned long long strtoull(const char * __restrict _st,
                                             char ** __restrict _endptr,
					     int _base);
     float     strtof(const char * __restrict _st,
                                  char ** __restrict _endptr);
     double    strtod(const char * __restrict _st,
                                  char ** __restrict _endptr);
     long double strtold(const char * __restrict _st,
                                     char ** __restrict _endptr);
     int    rand(void);
     void   srand(unsigned _seed);
     void  *calloc(size_t _num, size_t _size)
               ;
     void  *malloc(size_t _size)
               ;
     void  *realloc(void *_ptr, size_t _size);
     void   free(void *_ptr);
     void  *memalign(size_t _aln, size_t _size)
               ;
     void  *aligned_alloc(size_t _aln, size_t _size)
               ;
     void   __TI_heap_stats(void);
     void  *__TI_heap_check(void);
     size_t __TI_heap_total_available(void);
     size_t __TI_heap_largest_available(void);
    _Noreturn  void abort(void) ;
    typedef void (*__TI_atexit_fn)(void);
     int    atexit(__TI_atexit_fn _func) ;
    typedef int (*__TI_compar_fn)(const void *_a,const void *_b);
     void  *bsearch(const void *_key, const void *_base,
                                size_t _nmemb, size_t _size,
                                __TI_compar_fn compar);
     void   qsort(void *_base, size_t _nmemb, size_t _size,
                              __TI_compar_fn compar);
    _Noreturn  void exit(int _status);
    _Noreturn  void _Exit(int _status);
    _Noreturn  void quick_exit(int _status);
     int at_quick_exit(__TI_atexit_fn _func) ;
     div_t  div(int _numer, int _denom);
     ldiv_t ldiv(long _numer, long _denom);
     lldiv_t lldiv(long long _numer, long long _denom);
     char  *getenv(const char *_string);
     int    system(const char *_name);
     int    mblen(const char *_s, size_t _n);
     size_t mbstowcs(wchar_t * __restrict _dest,
                                 const char * __restrict _src, size_t _n);
     int    mbtowc(wchar_t * __restrict _dest,
                               const char * __restrict _src, size_t _n);
     size_t wcstombs(char * __restrict _dest,
                                 const wchar_t * __restrict _src, size_t _n);
     int    wctomb(char *_s, wchar_t _wc);
static __inline double atof(const char *_st)
{
  return strtod(_st, (char **)0);
}
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.15\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"none\")")
_Pragma("diag_pop")
#pragma diag_pop
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-20.1\")")
_Pragma("CHECK_MISRA(\"-20.2\")")
typedef int ptrdiff_t;
typedef long double max_align_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.10\")")
_Pragma("diag_pop")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	signed char		__int8_t;
typedef	unsigned char		__uint8_t;
typedef	short			__int16_t;
typedef	unsigned short		__uint16_t;
typedef	int			__int32_t;
typedef	unsigned int		__uint32_t;
typedef	long long		__int64_t;
typedef	unsigned long long	__uint64_t;
typedef	__uint32_t	__clock_t;
typedef	__int32_t	__critical_t;
typedef	double		__double_t;
typedef	float		__float_t;
typedef	__int32_t	__intfptr_t;
typedef	__int64_t	__intmax_t;
typedef	__int32_t	__intptr_t;
typedef	__int32_t	__int_fast8_t;
typedef	__int32_t	__int_fast16_t;
typedef	__int32_t	__int_fast32_t;
typedef	__int64_t	__int_fast64_t;
typedef	__int8_t	__int_least8_t;
typedef	__int16_t	__int_least16_t;
typedef	__int32_t	__int_least32_t;
typedef	__int64_t	__int_least64_t;
typedef	__int32_t	__ptrdiff_t;
typedef	__int32_t	__register_t;
typedef	__int32_t	__segsz_t;
typedef	__uint32_t	__size_t;
typedef	__int32_t	__ssize_t;
typedef __uint32_t      __time_t;
typedef	__uint32_t	__uintfptr_t;
typedef	__uint64_t	__uintmax_t;
typedef	__uint32_t	__uintptr_t;
typedef	__uint32_t	__uint_fast8_t;
typedef	__uint32_t	__uint_fast16_t;
typedef	__uint32_t	__uint_fast32_t;
typedef	__uint64_t	__uint_fast64_t;
typedef	__uint8_t	__uint_least8_t;
typedef	__uint16_t	__uint_least16_t;
typedef	__uint32_t	__uint_least32_t;
typedef	__uint64_t	__uint_least64_t;
typedef	__uint32_t	__u_register_t;
typedef	__uint32_t	__vm_offset_t;
typedef	__uint32_t	__vm_paddr_t;
typedef	__uint32_t	__vm_size_t;
typedef	unsigned short ___wchar_t;
typedef long _off_t;
typedef struct __va_list_t {
    void * __ap;
} __va_list;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	__int32_t	__blksize_t;
typedef	__int64_t	__blkcnt_t;
typedef	__int32_t	__clockid_t;
typedef	__uint32_t	__fflags_t;
typedef	__uint64_t	__fsblkcnt_t;
typedef	__uint64_t	__fsfilcnt_t;
typedef	__uint32_t	__gid_t;
typedef	__int64_t	__id_t;
typedef	__uint64_t	__ino_t;
typedef	long		__key_t;
typedef	__int32_t	__lwpid_t;
typedef	__uint16_t	__mode_t;
typedef	int		__accmode_t;
typedef	int		__nl_item;
typedef	__uint64_t	__nlink_t;
typedef	_off_t	        __off_t;
typedef	__int64_t	__off64_t;
typedef	__int32_t	__pid_t;
typedef	__int64_t	__rlim_t;
typedef	__uint8_t	__sa_family_t;
typedef	__uint32_t	__socklen_t;
typedef	long		__suseconds_t;
typedef	struct __timer	*__timer_t;
typedef	struct __mq	*__mqd_t;
typedef	__uint32_t	__uid_t;
typedef	unsigned int	__useconds_t;
typedef	int		__cpuwhich_t;
typedef	int		__cpulevel_t;
typedef int		__cpusetid_t;
typedef	int		__ct_rune_t;
typedef	__ct_rune_t	__rune_t;
typedef	__ct_rune_t	__wint_t;
typedef	__uint_least16_t __char16_t;
typedef	__uint_least32_t __char32_t;
typedef struct {
	long long __max_align1 __attribute__((aligned(_Alignof(long long))));
	long double __max_align2 __attribute__((aligned(_Alignof(long double))));
} __max_align_t;
typedef	__uint64_t	__dev_t;
typedef	__uint32_t	__fixpt_t;
typedef int _Mbstatet;
typedef _Mbstatet __mbstate_t;
typedef __uintmax_t     __rman_res_t;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-19.13\")")
_Pragma("diag_pop")
typedef	__int8_t		int8_t;
typedef	__int16_t		int16_t;
typedef	__int32_t		int32_t;
typedef	__int64_t		int64_t;
typedef	__uint8_t		uint8_t;
typedef	__uint16_t		uint16_t;
typedef	__uint32_t		uint32_t;
typedef	__uint64_t		uint64_t;
typedef	__intptr_t		intptr_t;
typedef	__uintptr_t		uintptr_t;
typedef	__intmax_t		intmax_t;
typedef	__uintmax_t		uintmax_t;
typedef	__int_least8_t		int_least8_t;
typedef	__int_least16_t		int_least16_t;
typedef	__int_least32_t		int_least32_t;
typedef	__int_least64_t		int_least64_t;
typedef	__uint_least8_t		uint_least8_t;
typedef	__uint_least16_t	uint_least16_t;
typedef	__uint_least32_t	uint_least32_t;
typedef	__uint_least64_t	uint_least64_t;
typedef	__int_fast8_t		int_fast8_t;
typedef	__int_fast16_t		int_fast16_t;
typedef	__int_fast32_t		int_fast32_t;
typedef	__int_fast64_t		int_fast64_t;
typedef	__uint_fast8_t		uint_fast8_t;
typedef	__uint_fast16_t		uint_fast16_t;
typedef	__uint_fast32_t		uint_fast32_t;
typedef	__uint_fast64_t		uint_fast64_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-10.1\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
_Pragma("diag_pop")
typedef void (* TaskFunction_t)( void * );
typedef uint32_t   StackType_t;
typedef long             BaseType_t;
typedef unsigned long    UBaseType_t;
    typedef uint32_t     TickType_t;
#pragma SWI_ALIAS(vPortEnterCritical, 2)
extern void vPortEnterCritical( void );
#pragma SWI_ALIAS(vPortExitCritical, 3)
extern void vPortExitCritical( void );
#pragma SWI_ALIAS(vPortDisableInterrupts, 5)
extern void vPortDisableInterrupts( void );
#pragma SWI_ALIAS(vPortEnableInterrupts, 6)
extern void vPortEnableInterrupts( void );
#pragma SWI_ALIAS( vPortYield, 0 )
extern void vPortYield( void );
#pragma SWI_ALIAS(vPortTaskUsesFPU, 4)
extern void vPortTaskUsesFPU( void );
    unsigned long ulPortCountLeadingZeros( unsigned long ulBitmap );
typedef struct MPU_REGION_REGISTERS
{
    unsigned ulRegionBaseAddress;
    unsigned ulRegionSize;
    unsigned ulRegionAttribute;
} xMPU_REGION_REGISTERS;
typedef struct MPU_SETTINGS
{
    xMPU_REGION_REGISTERS xRegion[ ( ( ( ( ( 16UL ) - 2 ) - ( 13UL - 1UL ) ) + 1 ) + 1 ) ];
} xMPU_SETTINGS;
        StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                             TaskFunction_t pxCode,
                                             void * pvParameters,
                                             BaseType_t xRunPrivileged ) __attribute__( ( section( ".kernelTEXT" ) ) );
typedef struct HeapRegion
{
    uint8_t * pucStartAddress;
    size_t xSizeInBytes;
} HeapRegion_t;
typedef struct xHeapStats
{
    size_t xAvailableHeapSpaceInBytes;
    size_t xSizeOfLargestFreeBlockInBytes;
    size_t xSizeOfSmallestFreeBlockInBytes;
    size_t xNumberOfFreeBlocks;
    size_t xMinimumEverFreeBytesRemaining;
    size_t xNumberOfSuccessfulAllocations;
    size_t xNumberOfSuccessfulFrees;
} HeapStats_t;
void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vPortGetHeapStats( HeapStats_t * pxHeapStats );
void * pvPortMalloc( size_t xSize ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vPortFree( void * pv ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vPortInitialiseBlocks( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
size_t xPortGetFreeHeapSize( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
size_t xPortGetMinimumEverFreeHeapSize( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xPortStartScheduler( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vPortEndScheduler( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
    struct xMEMORY_REGION;
    void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                    const struct xMEMORY_REGION * const xRegions,
                                    StackType_t * pxBottomOfStack,
                                    uint32_t ulStackDepth ) __attribute__( ( section( ".kernelTEXT" ) ) );
struct xSTATIC_LIST_ITEM
{
    TickType_t xDummy2;
    void * pvDummy3[ 4 ];
};
typedef struct xSTATIC_LIST_ITEM StaticListItem_t;
struct xSTATIC_MINI_LIST_ITEM
{
    TickType_t xDummy2;
    void * pvDummy3[ 2 ];
};
typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;
typedef struct xSTATIC_LIST
{
    UBaseType_t uxDummy2;
    void * pvDummy3;
    StaticMiniListItem_t xDummy4;
} StaticList_t;
typedef struct xSTATIC_TCB
{
    void * pxDummy1;
        xMPU_SETTINGS xDummy2;
    StaticListItem_t xDummy3[ 2 ];
    UBaseType_t uxDummy5;
    void * pxDummy6;
    uint8_t ucDummy7[ ( 40 ) ];
        void * pxDummy8;
        void * pvDummy15[ ( 1 ) ];
        uint32_t ulDummy18[ ( 3 ) ];
        uint8_t ucDummy19[ ( 3 ) ];
        uint8_t ucDummy21;
} StaticTask_t;
typedef struct xSTATIC_QUEUE
{
    void * pvDummy1[ 3 ];
    union
    {
        void * pvDummy2;
        UBaseType_t uxDummy2;
    } u;
    StaticList_t xDummy3[ 2 ];
    UBaseType_t uxDummy4[ 3 ];
    uint8_t ucDummy5[ 2 ];
} StaticQueue_t;
typedef StaticQueue_t StaticSemaphore_t;
typedef struct xSTATIC_EVENT_GROUP
{
    TickType_t xDummy1;
    StaticList_t xDummy2;
} StaticEventGroup_t;
typedef struct xSTATIC_TIMER
{
    void * pvDummy1;
    StaticListItem_t xDummy2;
    TickType_t xDummy3;
    void * pvDummy5;
    TaskFunction_t pvDummy6;
    uint8_t ucDummy8;
} StaticTimer_t;
typedef struct xSTATIC_STREAM_BUFFER
{
    size_t uxDummy1[ 4 ];
    void * pvDummy2[ 3 ];
    uint8_t ucDummy3;
} StaticStreamBuffer_t;
typedef StaticStreamBuffer_t StaticMessageBuffer_t;
struct xLIST;
struct xLIST_ITEM
{
     TickType_t xItemValue;
    struct xLIST_ITEM *  pxNext;
    struct xLIST_ITEM *  pxPrevious;
    void * pvOwner;
    struct xLIST *  pvContainer;
};
typedef struct xLIST_ITEM ListItem_t;
struct xMINI_LIST_ITEM
{
     TickType_t xItemValue;
    struct xLIST_ITEM *  pxNext;
    struct xLIST_ITEM *  pxPrevious;
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;
typedef struct xLIST
{
    volatile UBaseType_t uxNumberOfItems;
    ListItem_t *  pxIndex;
    MiniListItem_t xListEnd;
} List_t;
void vListInitialise( List_t * const pxList ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vListInitialiseItem( ListItem_t * const pxItem ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) __attribute__( ( section( ".kernelTEXT" ) ) );
struct tskTaskControlBlock;
typedef struct tskTaskControlBlock * TaskHandle_t;
typedef BaseType_t (* TaskHookFunction_t)( void * );
typedef enum
{
    eRunning = 0,
    eReady,
    eBlocked,
    eSuspended,
    eDeleted,
    eInvalid
} eTaskState;
typedef enum
{
    eNoAction = 0,
    eSetBits,
    eIncrement,
    eSetValueWithOverwrite,
    eSetValueWithoutOverwrite
} eNotifyAction;
typedef struct xTIME_OUT
{
    BaseType_t xOverflowCount;
    TickType_t xTimeOnEntering;
} TimeOut_t;
typedef struct xMEMORY_REGION
{
    void * pvBaseAddress;
    uint32_t ulLengthInBytes;
    uint32_t ulParameters;
} MemoryRegion_t;
typedef struct xTASK_PARAMETERS
{
    TaskFunction_t pvTaskCode;
    const char * pcName;
    uint16_t usStackDepth;
    void * pvParameters;
    UBaseType_t uxPriority;
    StackType_t * puxStackBuffer;
    MemoryRegion_t xRegions[ ( ( ( ( 16UL ) - 2 ) - ( 13UL - 1UL ) ) + 1 ) ];
        StaticTask_t * const pxTaskBuffer;
} TaskParameters_t;
typedef struct xTASK_STATUS
{
    TaskHandle_t xHandle;
    const char * pcTaskName;
    UBaseType_t xTaskNumber;
    eTaskState eCurrentState;
    UBaseType_t uxCurrentPriority;
    UBaseType_t uxBasePriority;
    uint32_t ulRunTimeCounter;
    StackType_t * pxStackBase;
    uint16_t usStackHighWaterMark;
} TaskStatus_t;
typedef enum
{
    eAbortSleep = 0,
    eStandardSleep,
    eNoTasksWaitingTimeout
} eSleepModeStatus;
    TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
                                    const char * const pcName,
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer ) __attribute__( ( section( ".kernelTEXT" ) ) );
    BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
                                      TaskHandle_t * pxCreatedTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
    BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
                                            TaskHandle_t * pxCreatedTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskAllocateMPURegions( TaskHandle_t xTask,
                              const MemoryRegion_t * const pxRegions ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskDelete( TaskHandle_t xTaskToDelete ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskDelay( const TickType_t xTicksToDelay ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                            const TickType_t xTimeIncrement ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskAbortDelay( TaskHandle_t xTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
eTaskState eTaskGetState( TaskHandle_t xTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskGetInfo( TaskHandle_t xTask,
                   TaskStatus_t * pxTaskStatus,
                   BaseType_t xGetFreeStackSpace,
                   eTaskState eState ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskPrioritySet( TaskHandle_t xTask,
                       UBaseType_t uxNewPriority ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskSuspend( TaskHandle_t xTaskToSuspend ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskResume( TaskHandle_t xTaskToResume ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskStartScheduler( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskEndScheduler( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskSuspendAll( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskResumeAll( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
TickType_t xTaskGetTickCount( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
TickType_t xTaskGetTickCountFromISR( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxTaskGetNumberOfTasks( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
char * pcTaskGetName( TaskHandle_t xTaskToQuery ) __attribute__( ( section( ".kernelTEXT" ) ) );
TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
uint16_t uxTaskGetStackHighWaterMark2( TaskHandle_t xTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
    void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
                                            BaseType_t xIndex,
                                            void * pvValue ) __attribute__( ( section( ".kernelTEXT" ) ) );
    void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
                                               BaseType_t xIndex ) __attribute__( ( section( ".kernelTEXT" ) ) );
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        uint32_t * pulIdleTaskStackSize );
BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
                                         void * pvParameter ) __attribute__( ( section( ".kernelTEXT" ) ) );
TaskHandle_t xTaskGetIdleTaskHandle( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                  const UBaseType_t uxArraySize,
                                  uint32_t * const pulTotalRunTime ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskList( char * pcWriteBuffer ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskGetRunTimeStats( char * pcWriteBuffer ) __attribute__( ( section( ".kernelTEXT" ) ) );
uint32_t ulTaskGetIdleRunTimeCounter( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
uint32_t ulTaskGetIdleRunTimePercent( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                               UBaseType_t uxIndexToNotify,
                               uint32_t ulValue,
                               eNotifyAction eAction,
                               uint32_t * pulPreviousNotificationValue ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
                                      UBaseType_t uxIndexToNotify,
                                      uint32_t ulValue,
                                      eNotifyAction eAction,
                                      uint32_t * pulPreviousNotificationValue,
                                      BaseType_t * pxHigherPriorityTaskWoken ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                   uint32_t ulBitsToClearOnEntry,
                                   uint32_t ulBitsToClearOnExit,
                                   uint32_t * pulNotificationValue,
                                   TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                    UBaseType_t uxIndexToNotify,
                                    BaseType_t * pxHigherPriorityTaskWoken ) __attribute__( ( section( ".kernelTEXT" ) ) );
uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                  BaseType_t xClearCountOnExit,
                                  TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                         UBaseType_t uxIndexToClear ) __attribute__( ( section( ".kernelTEXT" ) ) );
uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                        UBaseType_t uxIndexToClear,
                                        uint32_t ulBitsToClear ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskIncrementTick( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                      TickType_t xTicksToWait,
                                      const BaseType_t xWaitIndefinitely ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue ) __attribute__( ( section( ".kernelTEXT" ) ) );
 void vTaskSwitchContext( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
TickType_t uxTaskResetEventItemValue( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
TaskHandle_t xTaskGetCurrentTaskHandle( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskMissedYield( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskGetSchedulerState( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                          UBaseType_t uxHighestPriorityWaitingTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskSetTaskNumber( TaskHandle_t xTask,
                         const UBaseType_t uxHandle ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskStepTick( const TickType_t xTicksToJump ) __attribute__( ( section( ".kernelTEXT" ) ) );
eSleepModeStatus eTaskConfirmSleepModeStatus( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
TaskHandle_t pvTaskIncrementMutexHeldCount( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut ) __attribute__( ( section( ".kernelTEXT" ) ) );
struct QueueDefinition;
typedef struct QueueDefinition   * QueueHandle_t;
typedef struct QueueDefinition   * QueueSetHandle_t;
typedef struct QueueDefinition   * QueueSetMemberHandle_t;
BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vQueueDelete( QueueHandle_t xQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
                                const void * pvItemToQueue,
                                BaseType_t xCoRoutinePreviouslyWoken );
BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
                                   void * pvBuffer,
                                   BaseType_t * pxTaskWoken );
BaseType_t xQueueCRSend( QueueHandle_t xQueue,
                         const void * pvItemToQueue,
                         TickType_t xTicksToWait );
BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
                            void * pvBuffer,
                            TickType_t xTicksToWait );
QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType ) __attribute__( ( section( ".kernelTEXT" ) ) );
QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                       StaticQueue_t * pxStaticQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                             const UBaseType_t uxInitialCount ) __attribute__( ( section( ".kernelTEXT" ) ) );
QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                   const UBaseType_t uxInitialCount,
                                                   StaticQueue_t * pxStaticQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore ) __attribute__( ( section( ".kernelTEXT" ) ) );
TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                     TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex ) __attribute__( ( section( ".kernelTEXT" ) ) );
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType ) __attribute__( ( section( ".kernelTEXT" ) ) );
QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                           QueueSetHandle_t xQueueSet ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                                QueueSetHandle_t xQueueSet ) __attribute__( ( section( ".kernelTEXT" ) ) );
QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                            const TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                     TickType_t xTicksToWait,
                                     const BaseType_t xWaitIndefinitely ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vQueueSetQueueNumber( QueueHandle_t xQueue,
                           UBaseType_t uxQueueNumber ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
uint8_t ucQueueGetQueueType( QueueHandle_t xQueue ) __attribute__( ( section( ".kernelTEXT" ) ) );
struct tmrTimerControl;
typedef struct tmrTimerControl * TimerHandle_t;
typedef void (* TimerCallbackFunction_t)( TimerHandle_t xTimer );
typedef void (* PendedFunction_t)( void *,
                                   uint32_t );
    TimerHandle_t xTimerCreateStatic( const char * const pcTimerName,
                                      const TickType_t xTimerPeriodInTicks,
                                      const UBaseType_t uxAutoReload,
                                      void * const pvTimerID,
                                      TimerCallbackFunction_t pxCallbackFunction,
                                      StaticTimer_t * pxTimerBuffer ) __attribute__( ( section( ".kernelTEXT" ) ) );
void * pvTimerGetTimerID( const TimerHandle_t xTimer ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTimerSetTimerID( TimerHandle_t xTimer,
                       void * pvNewID ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer ) __attribute__( ( section( ".kernelTEXT" ) ) );
TaskHandle_t xTimerGetTimerDaemonTaskHandle( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                          void * pvParameter1,
                                          uint32_t ulParameter2,
                                          BaseType_t * pxHigherPriorityTaskWoken ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                   void * pvParameter1,
                                   uint32_t ulParameter2,
                                   TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
const char * pcTimerGetName( TimerHandle_t xTimer ) __attribute__( ( section( ".kernelTEXT" ) ) );
void vTimerSetReloadMode( TimerHandle_t xTimer,
                          const UBaseType_t uxAutoReload ) __attribute__( ( section( ".kernelTEXT" ) ) );
UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer ) __attribute__( ( section( ".kernelTEXT" ) ) );
TickType_t xTimerGetPeriod( TimerHandle_t xTimer ) __attribute__( ( section( ".kernelTEXT" ) ) );
TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTimerCreateTimerTask( void ) __attribute__( ( section( ".kernelTEXT" ) ) );
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                 const BaseType_t xCommandID,
                                 const TickType_t xOptionalValue,
                                 BaseType_t * const pxHigherPriorityTaskWoken,
                                 const TickType_t xTicksToWait ) __attribute__( ( section( ".kernelTEXT" ) ) );
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         uint32_t * pulTimerTaskStackSize );
