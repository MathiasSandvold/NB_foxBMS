# pragma diag_push
# pragma CHECK_MISRA("-19.7")
# pragma CHECK_MISRA("-19.4")
# pragma CHECK_MISRA("-19.1")
# pragma CHECK_MISRA("-19.15")
# pragma diag_pop
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.6\")")
#pragma diag_push
#pragma CHECK_MISRA("-19.4")
#pragma diag_pop
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.11\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"none\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	signed char		__int8_t;
typedef	unsigned char		__uint8_t;
typedef	short			__int16_t;
typedef	unsigned short		__uint16_t;
typedef	int			__int32_t;
typedef	unsigned int		__uint32_t;
typedef	long long		__int64_t;
typedef	unsigned long long	__uint64_t;
typedef	__uint32_t	__clock_t;
typedef	__int32_t	__critical_t;
typedef	double		__double_t;
typedef	float		__float_t;
typedef	__int32_t	__intfptr_t;
typedef	__int64_t	__intmax_t;
typedef	__int32_t	__intptr_t;
typedef	__int32_t	__int_fast8_t;
typedef	__int32_t	__int_fast16_t;
typedef	__int32_t	__int_fast32_t;
typedef	__int64_t	__int_fast64_t;
typedef	__int8_t	__int_least8_t;
typedef	__int16_t	__int_least16_t;
typedef	__int32_t	__int_least32_t;
typedef	__int64_t	__int_least64_t;
typedef	__int32_t	__ptrdiff_t;
typedef	__int32_t	__register_t;
typedef	__int32_t	__segsz_t;
typedef	__uint32_t	__size_t;
typedef	__int32_t	__ssize_t;
typedef __uint32_t      __time_t;
typedef	__uint32_t	__uintfptr_t;
typedef	__uint64_t	__uintmax_t;
typedef	__uint32_t	__uintptr_t;
typedef	__uint32_t	__uint_fast8_t;
typedef	__uint32_t	__uint_fast16_t;
typedef	__uint32_t	__uint_fast32_t;
typedef	__uint64_t	__uint_fast64_t;
typedef	__uint8_t	__uint_least8_t;
typedef	__uint16_t	__uint_least16_t;
typedef	__uint32_t	__uint_least32_t;
typedef	__uint64_t	__uint_least64_t;
typedef	__uint32_t	__u_register_t;
typedef	__uint32_t	__vm_offset_t;
typedef	__uint32_t	__vm_paddr_t;
typedef	__uint32_t	__vm_size_t;
typedef	unsigned short ___wchar_t;
typedef long _off_t;
typedef struct __va_list_t {
    void * __ap;
} __va_list;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
typedef	__int32_t	__blksize_t;
typedef	__int64_t	__blkcnt_t;
typedef	__int32_t	__clockid_t;
typedef	__uint32_t	__fflags_t;
typedef	__uint64_t	__fsblkcnt_t;
typedef	__uint64_t	__fsfilcnt_t;
typedef	__uint32_t	__gid_t;
typedef	__int64_t	__id_t;
typedef	__uint64_t	__ino_t;
typedef	long		__key_t;
typedef	__int32_t	__lwpid_t;
typedef	__uint16_t	__mode_t;
typedef	int		__accmode_t;
typedef	int		__nl_item;
typedef	__uint64_t	__nlink_t;
typedef	_off_t	        __off_t;
typedef	__int64_t	__off64_t;
typedef	__int32_t	__pid_t;
typedef	__int64_t	__rlim_t;
typedef	__uint8_t	__sa_family_t;
typedef	__uint32_t	__socklen_t;
typedef	long		__suseconds_t;
typedef	struct __timer	*__timer_t;
typedef	struct __mq	*__mqd_t;
typedef	__uint32_t	__uid_t;
typedef	unsigned int	__useconds_t;
typedef	int		__cpuwhich_t;
typedef	int		__cpulevel_t;
typedef int		__cpusetid_t;
typedef	int		__ct_rune_t;
typedef	__ct_rune_t	__rune_t;
typedef	__ct_rune_t	__wint_t;
typedef	__uint_least16_t __char16_t;
typedef	__uint_least32_t __char32_t;
typedef struct {
	long long __max_align1 __attribute__((aligned(_Alignof(long long))));
	long double __max_align2 __attribute__((aligned(_Alignof(long double))));
} __max_align_t;
typedef	__uint64_t	__dev_t;
typedef	__uint32_t	__fixpt_t;
typedef int _Mbstatet;
typedef _Mbstatet __mbstate_t;
typedef __uintmax_t     __rman_res_t;
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-19.13\")")
_Pragma("diag_pop")
typedef	__int8_t		int8_t;
typedef	__int16_t		int16_t;
typedef	__int32_t		int32_t;
typedef	__int64_t		int64_t;
typedef	__uint8_t		uint8_t;
typedef	__uint16_t		uint16_t;
typedef	__uint32_t		uint32_t;
typedef	__uint64_t		uint64_t;
typedef	__intptr_t		intptr_t;
typedef	__uintptr_t		uintptr_t;
typedef	__intmax_t		intmax_t;
typedef	__uintmax_t		uintmax_t;
typedef	__int_least8_t		int_least8_t;
typedef	__int_least16_t		int_least16_t;
typedef	__int_least32_t		int_least32_t;
typedef	__int_least64_t		int_least64_t;
typedef	__uint_least8_t		uint_least8_t;
typedef	__uint_least16_t	uint_least16_t;
typedef	__uint_least32_t	uint_least32_t;
typedef	__uint_least64_t	uint_least64_t;
typedef	__int_fast8_t		int_fast8_t;
typedef	__int_fast16_t		int_fast16_t;
typedef	__int_fast32_t		int_fast32_t;
typedef	__int_fast64_t		int_fast64_t;
typedef	__uint_fast8_t		uint_fast8_t;
typedef	__uint_fast16_t		uint_fast16_t;
typedef	__uint_fast32_t		uint_fast32_t;
typedef	__uint_fast64_t		uint_fast64_t;
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-10.1\")")
_Pragma("diag_pop")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
_Pragma("diag_pop")
extern void MCU_Delay_us(uint32_t delay_us);
extern uint32_t MCU_GetFreeRunningCount(void);
extern uint32_t MCU_ConvertFrcDifferenceToTimespan_us(uint32_t count);
extern _Bool MCU_IsTimeElapsed(uint32_t startCounter, uint32_t timeout_us);
typedef uint64_t uint64;
typedef uint32_t uint32;
typedef uint16_t uint16;
typedef uint8_t uint8;
typedef _Bool boolean;
typedef int64_t sint64;
typedef int32_t sint32;
typedef int16_t sint16;
typedef int8_t sint8;
typedef float float32;
typedef double float64;
typedef uint8 Std_ReturnType;
typedef struct
{
    uint16 vendorID;
    uint16 moduleID;
    uint8  instanceID;
    uint8  sw_major_version;
    uint8  sw_minor_version;
    uint8  sw_patch_version;
} Std_VersionInfoType;
  typedef unsigned char StatusType;
typedef boolean tBoolean;
typedef enum loopBackType
{
    Digital_Lbk = 0U,
    Analog_Lbk = 1U
}loopBackType_t;
typedef enum config_value_type
{
	InitialValue,
	CurrentValue
}config_value_type_t;
typedef volatile struct gioBase
{
    uint32 GCR0;
    uint32   rsvd;
    uint32 INTDET;
    uint32 POL;
    uint32 ENASET;
    uint32 ENACLR;
    uint32 LVLSET;
    uint32 LVLCLR;
    uint32 FLG;
    uint32 OFF1;
    uint32 OFF2;
    uint32 EMU1;
	uint32 EMU2;
} gioBASE_t;
typedef volatile struct gioPort
{
    uint32 DIR;
    uint32 DIN;
    uint32 DOUT;
    uint32 DSET;
    uint32 DCLR;
    uint32 PDR;
    uint32 PULDIS;
    uint32 PSL;
} gioPORT_t;
typedef volatile struct systemBase1
{
    uint32 SYSPC1;
    uint32 SYSPC2;
    uint32 SYSPC3;
    uint32 SYSPC4;
    uint32 SYSPC5;
    uint32 SYSPC6;
    uint32 SYSPC7;
    uint32 SYSPC8;
    uint32 SYSPC9;
    uint32 rsvd1;
    uint32 rsvd2;
    uint32 rsvd3;
    uint32 CSDIS;
    uint32 CSDISSET;
    uint32 CSDISCLR;
    uint32 CDDIS;
    uint32 CDDISSET;
    uint32 CDDISCLR;
    uint32 GHVSRC;
    uint32 VCLKASRC;
    uint32 RCLKSRC;
    uint32 CSVSTAT;
    uint32 MSTGCR;
    uint32 MINITGCR;
    uint32 MSINENA;
    uint32 MSTFAIL;
    uint32 MSTCGSTAT;
    uint32 MINISTAT;
    uint32 PLLCTL1;
    uint32 PLLCTL2;
    uint32 SYSPC10;
    uint32 DIEIDL;
    uint32 DIEIDH;
    uint32 rsvd4;
    uint32 LPOMONCTL;
    uint32 CLKTEST;
    uint32 DFTCTRLREG1;
    uint32 DFTCTRLREG2;
    uint32 rsvd5;
    uint32 rsvd6;
    uint32 GPREG1;
    uint32 rsvd7;
    uint32 rsvd8;
    uint32 rsvd9;
    uint32 SSIR1;
    uint32 SSIR2;
    uint32 SSIR3;
    uint32 SSIR4;
    uint32 RAMGCR;
    uint32 BMMCR1;
    uint32 rsvd10;
    uint32 CPURSTCR;
    uint32 CLKCNTL;
    uint32 ECPCNTL;
    uint32 rsvd11;
    uint32 DEVCR1;
    uint32 SYSECR;
    uint32 SYSESR;
    uint32 SYSTASR;
    uint32 GBLSTAT;
    uint32 DEVID;
    uint32 SSIVEC;
    uint32 SSIF;
} systemBASE1_t;
typedef volatile struct systemBase2
{
    uint32 PLLCTL3;
    uint32 rsvd1;
    uint32 STCCLKDIV;
    uint32 rsvd2[6U];
    uint32 ECPCNTL;
    uint32 ECPCNTL1;
    uint32 rsvd3[4U];
    uint32 CLK2CNTRL;
    uint32 VCLKACON1;
    uint32 rsvd4[4U];
    uint32 HCLKCNTL;
    uint32 rsvd5[6U];
    uint32 CLKSLIP;
    uint32 rsvd6;
	uint32 IP1ECCERREN;
	uint32 rsvd7[28U];
    uint32 EFC_CTLEN;
    uint32 DIEIDL_REG0;
    uint32 DIEIDH_REG1;
    uint32 DIEIDL_REG2;
    uint32 DIEIDH_REG3;
} systemBASE2_t;
typedef volatile struct flashWBase
{
    uint32 FRDCNTL;
    uint32 rsvd1;
    uint32 EE_FEDACCTRL1;
    uint32 rsvd2;
    uint32 rsvd3;
    uint32 FEDAC_PASTATUS;
    uint32 FEDAC_PBSTATUS;
    uint32 FEDAC_GBLSTATUS;
    uint32 rsvd4;
    uint32 FEDACSDIS;
    uint32 FPRIM_ADD_TAG;
    uint32 FDUP_ADD_TAG;
    uint32 FBPROT;
    uint32 FBSE;
    uint32 FBBUSY;
    uint32 FBAC;
    uint32 FBPWRMODE;
    uint32 FBPRDY;
    uint32 FPAC1;
    uint32 rsvd5;
    uint32 FMAC;
    uint32 FMSTAT;
    uint32 FEMU_DMSW;
    uint32 FEMU_DLSW;
    uint32 FEMU_ECC;
    uint32 FLOCK;
    uint32 rsvd6;
    uint32 FDIAGCTRL;
    uint32 rsvd7;
    uint32 FRAW_ADDR;
    uint32 rsvd8;
    uint32 FPAR_OVR;
    uint32 rsvd9[13U];
    uint32 RCR_VALID;
    uint32 ACC_THRESHOLD;
    uint32 rsvd10;
    uint32 FEDACSDIS2;
    uint32 rsvd11;
    uint32 rsvd12;
    uint32 rsvd13;
    uint32 RCR_VALUE0;
    uint32 RCR_VALUE1;
    uint32 rsvd14[108U];
    uint32 FSM_WR_ENA;
    uint32 rsvd15[11U];
    uint32 EEPROM_CONFIG;
    uint32 rsvd16;
    uint32 FSM_SECTOR1;
    uint32 FSM_SECTOR2;
    uint32 rsvd17[78U];
    uint32 FCFG_BANK;
} flashWBASE_t;
typedef volatile struct l2ramwBase
{
    uint32 RAMCTRL;
    uint32 rsvd1[3];
    uint32 RAMERRSTATUS;
    uint32 rsvd2[4];
    uint32 DIAGDATAVECTOR_H;
    uint32 DIAGDATAVECTOR_L;
    uint32 DIAG_ECC;
    uint32 RAMTEST;
    uint32 rsvd3;
    uint32 RAMADDRDECVECT;
    uint32 MEMINITDOMAIN;
    uint32 rsvd4;
    uint32 BANKDOMAINMAP0;
    uint32 BANKDOMAINMAP1;
} l2ramwBASE_t;
typedef volatile struct ccmr5Base
{
    uint32 CCMSR1;
    uint32 CCMKEYR1;
    uint32 CCMSR2;
    uint32 CCMKEYR2;
    uint32 CCMSR3;
    uint32 CCMKEYR3;
    uint32 CCMPOLCNTRL;
    uint32 CCMSR4;
    uint32 CCMKEYR4;
    uint32 CCMPDSTAT0;
} ccmr5BASE_t;
void _coreInitRegisters_(void);
void _coreInitStackPointer_(void);
uint32 _getCPSRValue_(void);
void _checkMemInitOn_(void);
void _gotoCPUIdle_(void);
void _coreEnableIrqVicOffset_(void);
void _coreEnableVfp_(void);
void _coreEnableEventBusExport_(void);
void _coreDisableEventBusExport_(void);
uint32 _coreGetDataFault_(void);
void _coreClearDataFault_(void);
uint32 _coreGetInstructionFault_(void);
void _coreClearInstructionFault_(void);
uint32 _coreGetDataFaultAddress_(void);
void _coreClearDataFaultAddress_(void);
uint32 _coreGetInstructionFaultAddress_(void);
void _coreClearInstructionFaultAddress_(void);
uint32 _coreGetAuxiliaryDataFault_(void);
void _coreClearAuxiliaryDataFault_(void);
uint32 _coreGetAuxiliaryInstructionFault_(void);
void _coreClearAuxiliaryInstructionFault_(void);
void _disable_IRQ_interrupt_(void);
void _enable_IRQ_interrupt_(void);
void _enable_interrupt_(void);
void _esmCcmErrorsClear_(void);
void _memInit_(void);
void _cacheEnable_(void);
void _cacheDisable_(void);
void _dCacheInvalidate_(void);
void _iCacheInvalidate_(void);
enum systemClockSource
{
    SYS_OSC             = 0x0U,
    SYS_PLL1            = 0x1U,
    SYS_EXTERNAL1       = 0x3U,
    SYS_LPO_LOW         = 0x4U,
    SYS_LPO_HIGH        = 0x5U,
    SYS_PLL2            = 0x6U,
    SYS_EXTERNAL2       = 0x7U,
    SYS_VCLK            = 0x9U,
    SYS_PLL2_ODCLK_8    = 0xEU,
    SYS_PLL2_ODCLK_16   = 0xFU
};
typedef enum
{
    POWERON_RESET       = 0x8000U,
    OSC_FAILURE_RESET   = 0x4000U,
    WATCHDOG_RESET      = 0x2000U,
    WATCHDOG2_RESET     = 0x1000U,
    DEBUG_RESET         = 0x0800U,
    INTERCONNECT_RESET  = 0x0080U,
    CPU0_RESET          = 0x0020U,
    SW_RESET            = 0x0010U,
    EXT_RESET           = 0x0008U,
    NO_RESET            = 0x0000U
}resetSource_t;
typedef struct system_config_reg
{
    uint32 CONFIG_SYSPC1;
    uint32 CONFIG_SYSPC2;
    uint32 CONFIG_SYSPC7;
    uint32 CONFIG_SYSPC8;
    uint32 CONFIG_SYSPC9;
    uint32 CONFIG_CSDIS;
    uint32 CONFIG_CDDIS;
    uint32 CONFIG_GHVSRC;
    uint32 CONFIG_VCLKASRC;
    uint32 CONFIG_RCLKSRC;
    uint32 CONFIG_MSTGCR;
    uint32 CONFIG_MINITGCR;
    uint32 CONFIG_MSINENA;
    uint32 CONFIG_PLLCTL1;
    uint32 CONFIG_PLLCTL2;
    uint32 CONFIG_SYSPC10;
    uint32 CONFIG_LPOMONCTL;
    uint32 CONFIG_CLKTEST;
    uint32 CONFIG_DFTCTRLREG1;
    uint32 CONFIG_DFTCTRLREG2;
    uint32 CONFIG_GPREG1;
    uint32 CONFIG_RAMGCR;
    uint32 CONFIG_BMMCR1;
    uint32 CONFIG_CLKCNTL;
    uint32 CONFIG_ECPCNTL;
    uint32 CONFIG_DEVCR1;
    uint32 CONFIG_SYSECR;
    uint32 CONFIG_PLLCTL3;
    uint32 CONFIG_STCCLKDIV;
	uint32 CONFIG_ECPCNTL1;
    uint32 CONFIG_CLK2CNTRL;
    uint32 CONFIG_VCLKACON1;
	uint32 CONFIG_HCLKCNTL;
    uint32 CONFIG_CLKSLIP;
    uint32 CONFIG_EFC_CTLEN;
} system_config_reg_t;
void systemGetConfigValue(system_config_reg_t *config_reg, config_value_type_t type);
enum flashWPowerModes
{
    SYS_SLEEP   = 0U,
    SYS_STANDBY = 1U,
    SYS_ACTIVE  = 3U
};
void setupPLL(void);
void trimLPO(void);
void customTrimLPO(void);
void setupFlash(void);
void periphInit(void);
void mapClocks(void);
void systemInit(void);
void systemPowerDown(uint32 mode);
resetSource_t getResetSource(void);
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
_Pragma("CHECK_MISRA(\"-12.7\")")
_Pragma("CHECK_MISRA(\"-16.4\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("CHECK_MISRA(\"-19.10\")")
_Pragma("CHECK_MISRA(\"-20.1\")")
_Pragma("CHECK_MISRA(\"-20.2\")")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-6.3\")")
_Pragma("CHECK_MISRA(\"-8.1\")")
_Pragma("CHECK_MISRA(\"-8.5\")")
_Pragma("CHECK_MISRA(\"-8.11\")")
_Pragma("CHECK_MISRA(\"-10.1\")")
_Pragma("CHECK_MISRA(\"-10.3\")")
_Pragma("CHECK_MISRA(\"-12.1\")")
_Pragma("CHECK_MISRA(\"-12.2\")")
_Pragma("CHECK_MISRA(\"-12.4\")")
_Pragma("CHECK_MISRA(\"-12.7\")")
_Pragma("CHECK_MISRA(\"-14.7\")")
_Pragma("CHECK_MISRA(\"-14.9\")")
_Pragma("CHECK_MISRA(\"-19.1\")")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("CHECK_MISRA(\"-19.6\")")
_Pragma("CHECK_MISRA(\"-19.7\")")
_Pragma("diag_suppress 1558")
_Pragma("diag_suppress 3195")
_Pragma("diag_push")
_Pragma("CHECK_MISRA(\"-19.4\")")
_Pragma("diag_pop")
 __inline int __isfinite(double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0; }
 __inline int __isfinitef(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) == 0; }
 __inline int __isfinitel(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0; }
 __inline int __isnan(double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) &&
        ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)) == 0); }
 __inline int __isnanf(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) &&
        (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)) == 0); }
 __inline int __isnanl(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) &&
        ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)) == 0); }
 __inline int __isnormal(double d)
{ return (((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0); }
 __inline int __isnormalf(float f)
{ return ((((((unsigned int)((_ftoi(f)) >> (24-1))) & ((128u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) == 0); }
 __inline int __isnormall(long double e)
{ return (((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)) == 0) &&
         ((((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) == 0); }
 __inline int __signbit(double d)
{ return (((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & ((__uint64_t)(1) << (64-1))) == 0)) == 0; }
 __inline int __signbitf(float f)
{ return ((((_ftoi(f)) & ((__uint32_t)(1) << (32-1))) == 0)) == 0; }
 __inline int __signbitl(long double e)
{ return (((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & ((__uint64_t)(1) << (64-1))) == 0)) == 0; }
 __inline int __isinff(float f)
{ return (((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)) && ((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)); }
 __inline int __isinf (double d)
{ return (((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) && (((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)); }
 __inline int __isinfl(long double e)
{ return (((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)) && (((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)); }
 __inline int __fpclassifyf(float f)
{
    if ((((((unsigned int)((_ftoi(f)) >> 16)) & 0x7f80u) == 0x7f80u)))
    {
        if (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if ((((((unsigned int)((_ftoi(f)) >> (24-1))) & ((128u * 2) - 1)) == 0)))
    {
        if (((((_ftoi(f)) & (((__uint32_t)(1) << (24-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
 __inline int __fpclassify (double d)
{
    if ((((((unsigned int)(((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> 48)) & 0x7ff0u) == 0x7ff0u)))
    {
        if ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if (((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)))
    {
        if ((((((((__uint64_t)_hi(d) << 32 | _lo(d)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
 __inline int __fpclassifyl(long double e)
{
    if ((((((unsigned int)(((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> 48)) & 0x7ff0u) == 0x7ff0u)))
    {
        if ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 1;
        else return 2;
    }
    if (((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) >> (53-1)) & ((1024u * 2) - 1)) == 0)))
    {
        if ((((((((__uint64_t)_hi(e) << 32 | _lo(e)))) & (((__uint64_t)(1) << (53-1)) - 1)) == 0)))
            return 0;
        else return (-2);
    }
    return (-1);
}
_Pragma("diag_pop")
typedef	double	double_t;
typedef	float	float_t;
 double      acos(double x);
 float       acosf(float x);
 long double acosl(long double x);
 double      asin(double x);
 float       asinf(float x);
 long double asinl(long double x);
 double      atan(double x);
 float       atanf(float x);
 long double atanl(long double x);
 double      atan2(double y, double x);
 float       atan2f(float y, float x);
 long double atan2l(long double y, long double x);
 double      cos(double x);
 float       cosf(float x);
 long double cosl(long double x);
 double      sin(double x);
 float       sinf(float x);
 long double sinl(long double x);
 double      tan(double x);
 float       tanf(float x);
 long double tanl(long double x);
 double      acosh(double x);
 float       acoshf(float x);
 long double acoshl(long double x);
 double      asinh(double x);
 float       asinhf(float x);
 long double asinhl(long double x);
 double      atanh(double x);
 float       atanhf(float x);
 long double atanhl(long double x);
 double      cosh(double x);
 float       coshf(float x);
 long double coshl(long double x);
 double      sinh(double x);
 float       sinhf(float x);
 long double sinhl(long double x);
 double      tanh(double x);
 float       tanhf(float x);
 long double tanhl(long double x);
 double      exp(double x);
 float       expf(float x);
 long double expl(long double x);
 double      exp2(double x);
 float       exp2f(float x);
 long double exp2l(long double x);
 double      expm1(double x);
 float       expm1f(float x);
 long double expm1l(long double x);
 double      frexp(double val, int *e);
 float       frexpf(float val, int *e);
 long double frexpl(long double val, int *e);
 int         ilogb(double x);
 int         ilogbf(float x);
 int         ilogbl(long double x);
 double      ldexp(double x, int e);
 float       ldexpf(float x, int e);
 long double ldexpl(long double x, int e);
 double      log(double x);
 float       logf(float x);
 long double logl(long double x);
 double      log10(double x);
 float       log10f(float x);
 long double log10l(long double x);
 double      log1p(double x);
 float       log1pf(float x);
 long double log1pl(long double x);
 double      log2(double x);
 float       log2f(float x);
 long double log2l(long double x);
 double      logb(double x);
 float       logbf(float x);
 long double logbl(long double x);
 double      modf(double val, double *iptr);
 float       modff(float val, float *iptr);
 long double modfl(long double val, long double *iptr);
 double      scalbn(double x, int n);
 float       scalbnf(float x, int n);
 long double scalbnl(long double x, int n);
 double      scalbln(double x, long n);
 float       scalblnf(float x, long n);
 long double scalblnl(long double x, long n);
 double      cbrt(double x);
 float       cbrtf(float x);
 long double cbrtl(long double x);
 double      fabs(double x);
 float       fabsf(float x);
 long double fabsl(long double x);
 double      hypot(double x, double y);
 float       hypotf(float x, float y);
 long double hypotl(long double x, long double y);
 double      pow(double x, double y);
 float       powf(float x, float y);
 long double powl(long double x, long double y);
 double      sqrt(double x);
 float       sqrtf(float x);
 long double sqrtl(long double x);
 double      erf(double x);
 float       erff(float x);
 long double erfl(long double x);
 double      erfc(double x);
 float       erfcf(float x);
 long double erfcl(long double x);
 double      lgamma(double x);
 float       lgammaf(float x);
 long double lgammal(long double x);
 double      tgamma(double x);
 float       tgammaf(float x);
 long double tgammal(long double x);
 double      ceil(double x);
 float       ceilf(float x);
 long double ceill(long double x);
 double      floor(double x);
 float       floorf(float x);
 long double floorl(long double x);
 double      nearbyint(double x);
 float       nearbyintf(float x);
 long double nearbyintl(long double x);
 double      rint(double x);
 float       rintf(float x);
 long double rintl(long double x);
 long        lrint(double x);
 long        lrintf(float x);
 long        lrintl(long double x);
 long long   llrint(double x);
 long long   llrintf(float x);
 long long   llrintl(long double x);
 double      round(double x);
 float       roundf(float x);
 long double roundl(long double x);
 long        lround(double x);
 long        lroundf(float x);
 long        lroundl(long double x);
 long long   llround(double x);
 long long   llroundf(float x);
 long long   llroundl(long double x);
 double      trunc(double x);
 float       truncf(float x);
 long double truncl(long double x);
 double      fmod(double x, double y);
 float       fmodf(float x, float y);
 long double fmodl(long double x, long double y);
 double      remainder(double x, double y);
 float       remainderf(float x, float y);
 long double remainderl(long double x, long double y);
 double      remquo(double x, double y, int *quo);
 float       remquof(float x, float y, int *quo);
 long double remquol(long double x, long double y, int *quo);
 double      copysign(double x, double y);
 float       copysignf(float x, float y);
 long double copysignl(long double x, long double y);
 double      nan(const char *tagp);
 float       nanf(const char *tagp);
 long double nanl(const char *tagp);
 double      nextafter(double x, double y);
 float       nextafterf(float x, float y);
 long double nextafterl(long double x, long double y);
 double      nexttoward(double x, long double y);
 float       nexttowardf(float x, long double y);
 long double nexttowardl(long double x, long double y);
 double      fdim(double x, double y);
 float       fdimf(float x, float y);
 long double fdiml(long double x, long double y);
 double      fmax(double x, double y);
 float       fmaxf(float x, float y);
 long double fmaxl(long double x, long double y);
 double      fmin(double x, double y);
 float       fminf(float x, float y);
 long double fminl(long double x, long double y);
 double      fma(double x, double y, double z);
 float       fmaf(float x, float y, float z);
 long double fmal(long double x, long double y, long double z);
_Pragma("diag_pop")
static const uint32_t mcu_frcClock_Hz = (uint32_t)((100.000F)*1000000.0f) / (((0x00000001u)) + 1u);
void MCU_Delay_us(uint32_t delay_us) {
    const uint32_t rti_nrOfCounts_us = (uint32_t)(((float_t)mcu_frcClock_Hz) / 1e6f);
    const uint32_t startValue = (*((volatile uint32_t *)0xFFFFFC10u));
    uint32_t timeOut = 0;
    while (timeOut < (10000u)) {
        const uint32_t checkValue = (*((volatile uint32_t *)0xFFFFFC10u));
        if ((checkValue - startValue) >= (delay_us * rti_nrOfCounts_us)) {
            break;
        }
        timeOut++;
    }
}
extern uint32_t MCU_GetFreeRunningCount(void) {
    return (*((volatile uint32_t *)0xFFFFFC10u));
}
extern uint32_t MCU_ConvertFrcDifferenceToTimespan_us(uint32_t count) {
    const uint32_t rti_nrOfCounts_us = (uint32_t)(((float_t)mcu_frcClock_Hz) / 1e6f);
    return count / rti_nrOfCounts_us;
}
extern _Bool MCU_IsTimeElapsed(uint32_t startCounter, uint32_t timeout_us) {
    _Bool retVal                = 0;
    uint32_t counter           = MCU_GetFreeRunningCount();
    uint32_t timeDifference_us = MCU_ConvertFrcDifferenceToTimespan_us(counter - startCounter);
    if (timeDifference_us < timeout_us) {
        retVal = 0;
    } else {
        retVal = 1;
    }
    return retVal;
}
